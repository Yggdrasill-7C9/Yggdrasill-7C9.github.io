{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/miccall/source/css/backcss.css","path":"css/backcss.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/dropdownMenu.css","path":"css/dropdownMenu.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/item.css","path":"css/item.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/my_link.css","path":"css/my_link.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/mic_gallery.css","path":"css/mic_gallery.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/noscript.css","path":"css/noscript.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/ok_prism.css","path":"css/ok_prism.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/prism.css","path":"css/prism.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/prism_dark.css","path":"css/prism_dark.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/prism_default.css","path":"css/prism_default.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/prism_coy.css","path":"css/prism_coy.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/prism_okaidia.css","path":"css/prism_okaidia.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/prism_solarized.css","path":"css/prism_solarized.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/prism_funky.css","path":"css/prism_funky.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/prism_twilight.css","path":"css/prism_twilight.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/typo.css","path":"css/typo.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/12.jpg","path":"images/12.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/3123.jpg","path":"images/3123.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/bg (2).jpg","path":"images/bg (2).jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/me.jpg","path":"images/me.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic01.jpg","path":"images/pic01.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/overlay.png","path":"images/overlay.png","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic02.jpg","path":"images/pic02.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic04.jpg","path":"images/pic04.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic03.jpg","path":"images/pic03.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic06.jpg","path":"images/pic06.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic05.jpg","path":"images/pic05.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic07.jpg","path":"images/pic07.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic08.jpg","path":"images/pic08.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic09.jpg","path":"images/pic09.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic10.jpg","path":"images/pic10.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic12.jpg","path":"images/pic12.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/pic11.jpg","path":"images/pic11.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/picx03.jpg","path":"images/picx03.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/gallery_skel.min.js","path":"js/gallery_skel.min.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/img/icon.png","path":"img/icon.png","modified":0,"renderable":1},{"_id":"themes/miccall/source/img/agumon.png","path":"img/agumon.png","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/jquery.scrolly.min.js","path":"js/jquery.scrolly.min.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/jquery.scrollex.min.js","path":"js/jquery.scrollex.min.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/mic_gallery.js","path":"js/mic_gallery.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/util.js","path":"js/util.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/skel.min.js","path":"js/skel.min.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/mic_main.css","path":"css/mic_main.css","modified":0,"renderable":1},{"_id":"themes/miccall/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/miccall/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/miccall/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/miccall/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/miccall/source/img/logo_miccall.png","path":"img/logo_miccall.png","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/images/arrow-small.svg","path":"css/images/arrow-small.svg","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/images/arrow.svg","path":"css/images/arrow.svg","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/images/close-small-alt.svg","path":"css/images/close-small-alt.svg","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/images/close-small.svg","path":"css/images/close-small.svg","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/images/close.svg","path":"css/images/close.svg","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/images/open-small.svg","path":"css/images/open-small.svg","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/images/open.svg","path":"css/images/open.svg","modified":0,"renderable":1},{"_id":"themes/miccall/source/css/images/spinner.svg","path":"css/images/spinner.svg","modified":0,"renderable":1},{"_id":"themes/miccall/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/01.jpg","path":"images/fulls/01.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/02.jpg","path":"images/fulls/02.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/03.jpg","path":"images/fulls/03.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/04.jpg","path":"images/fulls/04.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/05.jpg","path":"images/fulls/05.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/07.jpg","path":"images/fulls/07.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/08.jpg","path":"images/fulls/08.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/06.jpg","path":"images/fulls/06.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/09.jpg","path":"images/fulls/09.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/10.jpg","path":"images/fulls/10.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/11.jpg","path":"images/fulls/11.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/fulls/12.jpg","path":"images/fulls/12.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/02.jpg","path":"images/thumbs/02.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/01.jpg","path":"images/thumbs/01.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/03.jpg","path":"images/thumbs/03.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/04.jpg","path":"images/thumbs/04.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/06.jpg","path":"images/thumbs/06.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/05.jpg","path":"images/thumbs/05.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/07.jpg","path":"images/thumbs/07.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/09.jpg","path":"images/thumbs/09.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/10.jpg","path":"images/thumbs/10.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/08.jpg","path":"images/thumbs/08.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/11.jpg","path":"images/thumbs/11.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/thumbs/12.jpg","path":"images/thumbs/12.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/js/prism.js","path":"js/prism.js","modified":0,"renderable":1},{"_id":"themes/miccall/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/21.jpg","path":"images/21.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/images/bg.jpg","path":"images/bg.jpg","modified":0,"renderable":1},{"_id":"themes/miccall/source/fonts/FZLT.ttf","path":"fonts/FZLT.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"a9b38060543fe628304c64fccf490d75ff76b7d2","modified":1516072131633},{"_id":"themes/miccall/_config.yml","hash":"0e4d37fd595768b61e60e6faa3474cf0d8412d60","modified":1517300428996},{"_id":"themes/miccall/readme.md","hash":"2e143c7cbfbee95749a6999b2b6be82b89a85c05","modified":1515489385421},{"_id":"source/_data/_links.yml","hash":"49d585246485cc86abdd91f23cda9416fb961c10","modified":1515653257735},{"_id":"source/_data/links.yml","hash":"49d585246485cc86abdd91f23cda9416fb961c10","modified":1515653135716},{"_id":"source/_data/gallery.yml","hash":"b7663435c7a8eccb9ad385081c23662653af0428","modified":1515653057432},{"_id":"source/_posts/.DS_Store","hash":"6a9c2a3fbdece4fe96d83a6572f4b8df075e6c80","modified":1517301884429},{"_id":"source/_posts/weak和-strong.md","hash":"1c65f4c7d7ce45bb17feb4cb3018fff49b4e539f","modified":1517301669070},{"_id":"source/gallery/index.md","hash":"5fa1bf19732844af5cc1eaf832708c92a9420d58","modified":1515651900975},{"_id":"source/about/index.md","hash":"9e22dc2b5c28f954ba3cf78c027ae773f77a2b88","modified":1516366440272},{"_id":"themes/miccall/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1515489385402},{"_id":"source/group/index.md","hash":"441eadb0ba84574d92cb0d93f2b510207e87e531","modified":1515653610022},{"_id":"source/tag/index.md","hash":"cfa8a6277d1a101ef4ba4c17c1d97b82597dc076","modified":1515651158072},{"_id":"themes/miccall/.git/config","hash":"1843d71c1a500bada916636d3ff4eb80595f97ab","modified":1515489385405},{"_id":"themes/miccall/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1515489344225},{"_id":"themes/miccall/.git/index","hash":"eb2d7783e714c65f9fda7c67bf432414e375b806","modified":1517062605576},{"_id":"themes/miccall/.git/packed-refs","hash":"82ec4ba12d0ff2b0ac3255ed89a2f72c9066b9de","modified":1515489385400},{"_id":"themes/miccall/layout/index.ejs","hash":"528e7f920ec81a3ab75821cd294bfcb2e4e273b8","modified":1515664337112},{"_id":"themes/miccall/layout/layout.ejs","hash":"56fb21aaa193252e85d7e3a7251e07866acd7f7f","modified":1515489385421},{"_id":"themes/miccall/layout/post.ejs","hash":"d3c06743dfd9c137b8953e927d80d0099f169034","modified":1515489385421},{"_id":"source/_posts/HTTP/.DS_Store","hash":"491b8524e38f2908eaf1633833219156b2082f9d","modified":1516072225520},{"_id":"source/_posts/HTTP/Http报文详解.md","hash":"dd7887605a235836a1256f6ed6e78fc8c0326371","modified":1516092631538},{"_id":"source/_posts/Git & SVN/.DS_Store","hash":"e3ff3bd95daab67f8ac26962832685218a410fc4","modified":1516072258162},{"_id":"source/_posts/Git & SVN/github-使用手册.md","hash":"56850d7f86451487fb5d017dd50516a32f2f1a62","modified":1516072490228},{"_id":"source/_posts/Linux/.DS_Store","hash":"5cd6752e61eee7446d6a5e5ed0787ff21b9926d8","modified":1516072610760},{"_id":"source/_posts/Linux/gem、rvm使用心得.md","hash":"facc96554ef40a3dedd93d255f08e8ea48d3727a","modified":1516072605403},{"_id":"source/_posts/Linux/分享几个常用的插件工具.md","hash":"5fb34c0924dde694fbe98d10c88a7a0c883e6613","modified":1516072585730},{"_id":"source/_posts/iOS开发/.DS_Store","hash":"b5e89632c209322a4e02bd7d81160cce9b3158ba","modified":1516513736613},{"_id":"source/_posts/Linux/cUrl使用心得.md","hash":"aba8e6efc20f66359fe43fc9de1c04e5263bed27","modified":1516113708628},{"_id":"source/_posts/股票投资/股票术语.md","hash":"3989509b396fa6a32f62504bb7b9dce790647877","modified":1517298834064},{"_id":"themes/miccall/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1515489344231},{"_id":"themes/miccall/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1515489344229},{"_id":"themes/miccall/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1515489344232},{"_id":"themes/miccall/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1515489344230},{"_id":"themes/miccall/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1515489344233},{"_id":"themes/miccall/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1515489344235},{"_id":"themes/miccall/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1515489344230},{"_id":"themes/miccall/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1515489344231},{"_id":"themes/miccall/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1515489344232},{"_id":"themes/miccall/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1515489344235},{"_id":"themes/miccall/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1515489344222},{"_id":"themes/miccall/.git/logs/HEAD","hash":"cd36032d4a3757fe54ae236170517bee656bcb1c","modified":1515489385404},{"_id":"themes/miccall/layout/_partial/copyright.ejs","hash":"d9b005d4d3d63ad7843e47e9196527a9ae4449bb","modified":1515497999744},{"_id":"themes/miccall/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1515489385413},{"_id":"themes/miccall/layout/_partial/footer.ejs","hash":"003361014b1467ce8062557c6c5952abaa9f00aa","modified":1515489385413},{"_id":"themes/miccall/layout/_partial/head.ejs","hash":"ede9a68181ca1d2a7b88d78598b3f275de5f182a","modified":1515489385415},{"_id":"themes/miccall/layout/_partial/gallery_head.ejs","hash":"4bd6fb2bdf51a21b7c5b4e95b0575f7e6ac3dcd1","modified":1515489385414},{"_id":"themes/miccall/layout/_partial/gallery_js.ejs","hash":"2d4bf4e503f72f50e61fba396386dc7d57d3165f","modified":1515489385414},{"_id":"themes/miccall/layout/_partial/headerlogo.ejs","hash":"e9ba05cce80d7f93ba11a9ef5c8a12e958f996f2","modified":1515489385415},{"_id":"themes/miccall/layout/_partial/importJS.ejs","hash":"0a580ceca805a6f11cf0aa50972a5d566dfda46d","modified":1515489385415},{"_id":"themes/miccall/layout/_partial/mainfirst.ejs","hash":"e1a63fc75c9cf8a04752103270d143d3a2eec4f5","modified":1515489385416},{"_id":"themes/miccall/layout/_partial/nav.ejs","hash":"f93b586587fd80983bb56c8226b3571cb0cf668b","modified":1515489385416},{"_id":"themes/miccall/layout/_partial/intro.ejs","hash":"eb65053dda3905bb05ee09a82466f1ae0e2fcf27","modified":1515497617947},{"_id":"themes/miccall/layout/_widget/page-gallery.ejs","hash":"dbc891b114a71b69638da07fb3949a3e618284d4","modified":1515489385419},{"_id":"themes/miccall/layout/_widget/page-links.ejs","hash":"e1f9fcc94f310c7341272d0b5083bf87320fbb01","modified":1515489385420},{"_id":"themes/miccall/layout/_widget/page-tagcloud.ejs","hash":"bdd2cca14c209462c2b894de2563be5a2c6c5599","modified":1515489385420},{"_id":"themes/miccall/source/css/backcss.css","hash":"65db154a14ccb0e773a14e1d1262553e6f30aec5","modified":1515489385422},{"_id":"themes/miccall/source/css/dropdownMenu.css","hash":"3e44ce25f19c28dcf2c12db1938ccce7a081c10f","modified":1515489385422},{"_id":"themes/miccall/source/css/font-awesome.min.css","hash":"03eb0a6b53db2655f3ded9bb1a4e4af07cc1efa6","modified":1515489385423},{"_id":"themes/miccall/source/css/gallery.css","hash":"4c0178ea898cdc5e010346b56d1c9845fe8da53e","modified":1515489385423},{"_id":"themes/miccall/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1515489385424},{"_id":"themes/miccall/source/css/item.css","hash":"da1277164b611ccba56beda47960f9075c61dbab","modified":1515489385427},{"_id":"themes/miccall/source/css/my_link.css","hash":"c9535592792f2271df88c39e4baf8c849e23db17","modified":1515489385428},{"_id":"themes/miccall/source/css/mic_gallery.css","hash":"4c0178ea898cdc5e010346b56d1c9845fe8da53e","modified":1515489385427},{"_id":"themes/miccall/source/css/noscript.css","hash":"5579ccdecc63139609db824704331d8d4af61538","modified":1515489385428},{"_id":"themes/miccall/source/css/ok_prism.css","hash":"e20586e80aeef3192c727e20d2efe4bd23846d29","modified":1515489385429},{"_id":"themes/miccall/source/css/prism.css","hash":"b39768264f9923a770bcc3f289be0a2bd8e64268","modified":1515489385429},{"_id":"themes/miccall/source/css/prism_dark.css","hash":"8085542cdb4583ffb78b2edd146ebe9511bf668c","modified":1515489385431},{"_id":"themes/miccall/source/css/prism_default.css","hash":"3600bee175b309662e306b50e494ac73495619c2","modified":1515489385431},{"_id":"themes/miccall/source/css/prism_coy.css","hash":"24ebf5f3e5f68341522204dcaaf33f429d3c3718","modified":1515489385431},{"_id":"themes/miccall/source/css/prism_okaidia.css","hash":"e20586e80aeef3192c727e20d2efe4bd23846d29","modified":1515489385432},{"_id":"themes/miccall/source/css/prism_solarized.css","hash":"73759f72dc43870aaf76dca7ef4e61a142b6b4f0","modified":1515489385432},{"_id":"themes/miccall/source/css/prism_funky.css","hash":"aa0e3a37fb8ccce44457d7805a13d7c6094d1f5e","modified":1515489385432},{"_id":"themes/miccall/source/css/prism_twilight.css","hash":"17498435f6d964243c1a50deb563e6003aebe0e6","modified":1515489385432},{"_id":"themes/miccall/source/css/typo.css","hash":"768004dae4204dfbda865d412229feaa618ec3b7","modified":1515489385433},{"_id":"themes/miccall/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1515660441491},{"_id":"themes/miccall/source/images/12.jpg","hash":"88d68b169744a76ca7b21a258fc0812bc03ee701","modified":1515489385463},{"_id":"themes/miccall/source/images/3123.jpg","hash":"fc005184ff616231647c5dc85c63167040d810ba","modified":1515489385467},{"_id":"themes/miccall/source/images/bg (2).jpg","hash":"5c7ba4dead81150448ea69bf541daa64fb59ae58","modified":1515489385468},{"_id":"themes/miccall/source/images/me.jpg","hash":"d7740ebdd278a3aaebbc65c6fe7dc5564ceec174","modified":1515661078979},{"_id":"themes/miccall/source/images/pic01.jpg","hash":"774db644cdac607e0d9d72ca65a4961f9a250c11","modified":1515489385482},{"_id":"themes/miccall/source/images/overlay.png","hash":"e978d81201508e6fcbe0fe95485dae1a4b983a8d","modified":1515489385482},{"_id":"themes/miccall/source/images/pic02.jpg","hash":"ab77495fef5102f94e36b71d4308cd682dd4b1a8","modified":1515489385482},{"_id":"themes/miccall/source/images/pic04.jpg","hash":"ee299cd40108e50d7151333de525049f8ec4f150","modified":1515489385483},{"_id":"themes/miccall/source/images/pic03.jpg","hash":"ec46b8b1490a794ea5d4c61058959b9a52ac262f","modified":1515489385482},{"_id":"themes/miccall/source/images/pic06.jpg","hash":"3d8572663edf8a77b99bdfd93491d4f6a7298aaf","modified":1515489385483},{"_id":"themes/miccall/source/images/pic05.jpg","hash":"b74d638c0aa9e90f94b056db4c0a886e382973f1","modified":1515489385483},{"_id":"themes/miccall/source/images/pic07.jpg","hash":"de06b4eee3d0e42ddcac415adc8c83466f430253","modified":1515489385483},{"_id":"themes/miccall/source/images/pic08.jpg","hash":"993e8ff91c20b6d28b6302d3a18367547610c58a","modified":1515489385483},{"_id":"themes/miccall/source/images/pic09.jpg","hash":"6aae76e8215e3a6e785ce2a65484e4df03ed5fe9","modified":1515489385484},{"_id":"themes/miccall/source/images/pic10.jpg","hash":"814a661f2966a3c8fe2c89034f62e828f291d770","modified":1515489385484},{"_id":"themes/miccall/source/images/pic12.jpg","hash":"ae93f2674a3b1f1dcbfe9692f2e172e106c02d96","modified":1515489385484},{"_id":"themes/miccall/source/images/pic11.jpg","hash":"a034beb80041d238f36685706a019a269f159ac1","modified":1515489385484},{"_id":"themes/miccall/source/images/picx03.jpg","hash":"cffaa38c9489f131f6f37763b37b937811b316df","modified":1515489385484},{"_id":"themes/miccall/source/js/gallery_skel.min.js","hash":"475a99682e46ad061915a11a9adb3fad82258d3c","modified":1515489385489},{"_id":"themes/miccall/source/img/icon.png","hash":"15f5f96cd48e0bfc8a443cdb77cc7874b68ba98c","modified":1515664649984},{"_id":"themes/miccall/source/img/agumon.png","hash":"908da301fdf801118b307e28f9cdf0e535e6d1e0","modified":1448775810000},{"_id":"themes/miccall/source/js/jquery.scrolly.min.js","hash":"6807fda8e44d95117e7007563a4db951818df82b","modified":1515489385490},{"_id":"themes/miccall/source/js/jquery.scrollex.min.js","hash":"57fa1d1de2eca4fabbe75d6d160edc45cc398075","modified":1515489385490},{"_id":"themes/miccall/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1515489385490},{"_id":"themes/miccall/source/js/main.js","hash":"97cabd6461ce2751a8bdcf8d9abf94b0af34e735","modified":1515489385490},{"_id":"themes/miccall/source/js/mic_gallery.js","hash":"c2d1f883d1714723e475a4b1c7d367a7885dec2e","modified":1515489385491},{"_id":"themes/miccall/source/js/util.js","hash":"3ece9010adc07dd3dc27ced0e22e7ac8bcd16e14","modified":1515489385494},{"_id":"themes/miccall/source/js/skel.min.js","hash":"475a99682e46ad061915a11a9adb3fad82258d3c","modified":1515489385494},{"_id":"themes/miccall/source/css/mic_main.css","hash":"8a0a574ec572d3adf4141ace0262e25ce35554f0","modified":1515489385428},{"_id":"themes/miccall/source/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1515489385456},{"_id":"themes/miccall/source/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1515489385457},{"_id":"themes/miccall/source/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1515489385463},{"_id":"themes/miccall/source/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1515489385462},{"_id":"themes/miccall/source/images/logo.png","hash":"ee2cf634d838f8acab5b826400edb0b42c8ce52b","modified":1515489385481},{"_id":"themes/miccall/source/img/logo_miccall.png","hash":"ee2cf634d838f8acab5b826400edb0b42c8ce52b","modified":1515489385488},{"_id":"themes/miccall/source/js/jquery.min.js","hash":"276c87ff3e1e3155679c318938e74e5c1b76d809","modified":1515489385490},{"_id":"source/_posts/Git & SVN/github-使用手册/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1515662730603},{"_id":"source/_posts/Linux/gem、rvm使用心得/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1515664689546},{"_id":"source/_posts/iOS开发/iOS 开发基础/.DS_Store","hash":"bc78a6a6f99a66e4ed0cb87f1cd6c19476470056","modified":1516376133874},{"_id":"source/_posts/iOS开发/iOS 开发基础/instrument-详解.md","hash":"3e474ee6d2ec0be49435b4a5487f0b8c870561b6","modified":1517061879871},{"_id":"source/_posts/iOS开发/iOS 开发基础/ios-HTTP请求.md","hash":"97adb22d4ed5c21b2a45d9a4559c23bc48e41157","modified":1516116051197},{"_id":"source/_posts/iOS开发/iOS 开发基础/闭包、lambda-计算、block.md","hash":"a828291f2bef96249127e595cd12c9c34024cd12","modified":1516182822871},{"_id":"source/_posts/iOS开发/iOS 逆向开发/.DS_Store","hash":"1fa628e85a6f83ba8fce7119350552003797fe82","modified":1516376172624},{"_id":"source/_posts/iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS.md","hash":"4565db7e76b6d2c83b71e246c89e4dca612bc571","modified":1515739865760},{"_id":"source/_posts/iOS开发/其他/ios知识脉络梳理.md","hash":"92c2591f3517845a07212259ae13559c77eb4d58","modified":1516588192819},{"_id":"source/_posts/iOS开发/开发笔记/iOS开发笔记.md","hash":"cd307c4d9c67303863a424d60ef7bed64d68d05b","modified":1516420518354},{"_id":"source/_posts/iOS开发/开发笔记/深入学习block.md","hash":"10a914b014cd50c092491f267711d71777a143e2","modified":1516513660845},{"_id":"source/_posts/iOS开发/开发笔记/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1516513719693},{"_id":"source/_posts/iOS开发/开发笔记/深入学习内存管理.md","hash":"1d56a2508e52d46af174917cd378f3d99a2979da","modified":1516513672019},{"_id":"source/_posts/iOS开发/开发笔记/深入学习多线程编程.md","hash":"981012273480d8235f38dbc62d98b9cb00ef9923","modified":1516537474058},{"_id":"source/_posts/iOS开发/控件/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1516435396140},{"_id":"source/_posts/iOS开发/控件/UITableView详解.md","hash":"f269ddf0a8b387e877ae6607d0433e7d84dae88e","modified":1515891910298},{"_id":"themes/miccall/.git/refs/heads/master","hash":"7340484f3aafdf05c00692efbfd57db0e550947c","modified":1515489385403},{"_id":"themes/miccall/.git/objects/pack/pack-45c8892cef0d66777d9edc0b8d19337e70454a0e.idx","hash":"9b90bf7c6e48956aa690ec71a6c4457207647177","modified":1515489385386},{"_id":"themes/miccall/source/css/images/arrow-small.svg","hash":"f00360be7c8c06c0ab9d008b3485429cd07b8621","modified":1515489385424},{"_id":"themes/miccall/source/css/images/arrow.svg","hash":"84ad7a183fce70ac31766748919292d9db68c3c8","modified":1515489385424},{"_id":"themes/miccall/source/css/images/close-small-alt.svg","hash":"6b0204bb16fc15963977c3921d631209afff8180","modified":1515489385425},{"_id":"themes/miccall/source/css/images/close-small.svg","hash":"23e81571a4e597278e80a593c9e82a0f03d9d167","modified":1515489385425},{"_id":"themes/miccall/source/css/images/close.svg","hash":"7e524252c4610461102bf6da4b41eaa60845b642","modified":1515489385425},{"_id":"themes/miccall/source/css/images/open-small.svg","hash":"7ee24df085722b308c03d3b827fd0769a63e49f2","modified":1515489385426},{"_id":"themes/miccall/source/css/images/open.svg","hash":"f376adaf38d3fc3a2a0209e560a7d181105c75a6","modified":1515489385426},{"_id":"themes/miccall/source/css/images/spinner.svg","hash":"7ef1bb9afa8be7be3509ba644c990b23f5876863","modified":1515489385426},{"_id":"themes/miccall/source/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1515489385461},{"_id":"themes/miccall/source/images/fulls/01.jpg","hash":"cfc928948301b97ab2873e837284cd83cc3c6cff","modified":1515489385473},{"_id":"themes/miccall/source/images/fulls/02.jpg","hash":"1a729f597316a7483ebcf39b5984ced1612a0410","modified":1515489385473},{"_id":"themes/miccall/source/images/fulls/03.jpg","hash":"0f8c8109f8b605aa46ef571df1d16e8bdd43d090","modified":1515489385474},{"_id":"themes/miccall/source/images/fulls/04.jpg","hash":"806679d4c4398335413b6b53941709a4aef7c3cd","modified":1515489385474},{"_id":"themes/miccall/source/images/fulls/05.jpg","hash":"232b0b9e3b6e751ebb2e6c4284651639526200e3","modified":1515489385475},{"_id":"themes/miccall/source/images/fulls/07.jpg","hash":"eb41675450650b613195806b154c6badbb7eca4d","modified":1515489385477},{"_id":"themes/miccall/source/images/fulls/08.jpg","hash":"d31c389218f04bc7ec510ac236fbe343048e3cfc","modified":1515489385477},{"_id":"themes/miccall/source/images/fulls/06.jpg","hash":"e97b29127a50c69cf445d0591cd94daab0f50e33","modified":1515489385476},{"_id":"themes/miccall/source/images/fulls/09.jpg","hash":"61fab3aa8ceee938efb4965042ce2b5f51d3a584","modified":1515489385478},{"_id":"themes/miccall/source/images/fulls/10.jpg","hash":"9a284568752a54ab9e8e9cd19c41750e05975d2a","modified":1515489385478},{"_id":"themes/miccall/source/images/fulls/11.jpg","hash":"cff6219163e3154c1263ee1d7f924c0ae3ccc9e7","modified":1515489385479},{"_id":"themes/miccall/source/images/fulls/12.jpg","hash":"a631491537584e2e23926d9d6f50ce60bb884b18","modified":1515489385480},{"_id":"themes/miccall/source/images/thumbs/02.jpg","hash":"396a422cbc1b94b6c9b00f6a34c02b05913230ba","modified":1515489385485},{"_id":"themes/miccall/source/images/thumbs/01.jpg","hash":"4f5a2b9fdf44146d60f8dd3a32c81a8419b9148f","modified":1515489385485},{"_id":"themes/miccall/source/images/thumbs/03.jpg","hash":"e3915b1cc3283b5ec33f49e2591ebf2e6be2362e","modified":1515489385485},{"_id":"themes/miccall/source/images/thumbs/04.jpg","hash":"3c60445217b1b52b1fd6cae4578356c564d7624d","modified":1515489385485},{"_id":"themes/miccall/source/images/thumbs/06.jpg","hash":"ffc80bb5fe28626d9462e06d9f01d2a5f99b0ae9","modified":1515489385486},{"_id":"themes/miccall/source/images/thumbs/05.jpg","hash":"3e28c2253db93ba42d16ba9a1f451dbc452fd947","modified":1515489385486},{"_id":"themes/miccall/source/images/thumbs/07.jpg","hash":"45194a98089345e4f135c0f0bfffeee7ccdd9c99","modified":1515489385486},{"_id":"themes/miccall/source/images/thumbs/09.jpg","hash":"bc8a02decf65e44657f02dcc11c7395bfa41ffdb","modified":1515489385486},{"_id":"themes/miccall/source/images/thumbs/10.jpg","hash":"ccfee49fbca187bad971336cb8fda7dec05ab01e","modified":1515489385487},{"_id":"themes/miccall/source/images/thumbs/08.jpg","hash":"e0384120f6acfa64ad0b5bd0d7e114e9f239294e","modified":1515489385486},{"_id":"themes/miccall/source/images/thumbs/11.jpg","hash":"66a7fb237824b1b2fd550a068bb6a32f5031ab8f","modified":1515489385487},{"_id":"themes/miccall/source/images/thumbs/12.jpg","hash":"17ab685447ed06b6c12e4d42f38111c684221bc7","modified":1515489385487},{"_id":"themes/miccall/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1515489385489},{"_id":"source/_posts/HTTP/Http报文详解/响应报文首部.png","hash":"2a4c0a9b868def4daed483d1976347ea85be52f0","modified":1515835143866},{"_id":"source/_posts/Linux/gem、rvm使用心得/timg.jpeg","hash":"769910b42c5e8ae1529a86bb9d9bdde7efdafbdd","modified":1515662718681},{"_id":"themes/miccall/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1515489385416},{"_id":"themes/miccall/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1515489385402},{"_id":"themes/miccall/.git/logs/refs/heads/master","hash":"cd36032d4a3757fe54ae236170517bee656bcb1c","modified":1515489385404},{"_id":"themes/miccall/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1515489385417},{"_id":"themes/miccall/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1515489385417},{"_id":"themes/miccall/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1515489385417},{"_id":"themes/miccall/layout/_widget/comment/disqus/enter.ejs","hash":"ecde1e8e072cd6ec5b69287186c3551d246feb78","modified":1515489385418},{"_id":"themes/miccall/layout/_widget/comment/disqus/main.ejs","hash":"e545ec7bab21e2d345e058ed438e2031e3e1f353","modified":1515489385418},{"_id":"themes/miccall/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1515489385418},{"_id":"themes/miccall/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1515489385418},{"_id":"themes/miccall/layout/_widget/comment/disqus_click/main.ejs","hash":"afc734b693b98128f0c45e70b4ecb5702b482829","modified":1515489385419},{"_id":"source/_posts/Git & SVN/github-使用手册/timg.jpeg","hash":"195c26c76213886012e41b08c43299a4245ed90c","modified":1515662610666},{"_id":"themes/miccall/source/js/prism.js","hash":"0868d642f4661649a37dfb45b93fa30b4d92d4e4","modified":1515489385493},{"_id":"themes/miccall/source/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1515489385459},{"_id":"source/_posts/iOS开发/iOS 开发基础/instrument-详解/instrument.png","hash":"74ded96ccc7883a576e55c8c1bf1b3f852329b83","modified":1516030039887},{"_id":"themes/miccall/.git/logs/refs/remotes/origin/HEAD","hash":"cd36032d4a3757fe54ae236170517bee656bcb1c","modified":1515489385402},{"_id":"themes/miccall/source/images/21.jpg","hash":"0b2570df0e6d9b79a0c50d0b4ce8799bd40ea421","modified":1515489385466},{"_id":"source/_posts/iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS/thum.jpg","hash":"98fd072183396fa9d7737de305cb70e592c30858","modified":1515490970530},{"_id":"themes/miccall/source/images/bg.jpg","hash":"15c88465b4e46aa175a083f2cfc2b5fb43bd6937","modified":1515660384994},{"_id":"themes/miccall/source/fonts/FZLT.ttf","hash":"24dfab81236612d596c97eb38b3adf5de99f669c","modified":1515489385451},{"_id":"themes/miccall/.git/objects/pack/pack-45c8892cef0d66777d9edc0b8d19337e70454a0e.pack","hash":"e1c53f20f03899981775d18847aa7d62d97fd1df","modified":1515489385386},{"_id":"public/gallery/index.html","hash":"6dbbf4a579f8b944e36ba872f0259755b7cc52cf","modified":1517301890573},{"_id":"public/about/index.html","hash":"02e283f810511d2c8506edfee6a0badb03d30d98","modified":1517301890573},{"_id":"public/group/index.html","hash":"8dcd63d534f6a680256cd92d4414ae3e0615d583","modified":1517301890573},{"_id":"public/tag/index.html","hash":"98dddaf60930b658d499937936bb2e09a5a66fe3","modified":1517301890573},{"_id":"public/2018/01/21/iOS开发/开发笔记/深入学习内存管理/index.html","hash":"527ccbc818b74fba9f2056506d8572a840bcf935","modified":1517301890573},{"_id":"public/2018/01/21/iOS开发/开发笔记/深入学习block/index.html","hash":"bc1e80304e557039e01146518b95ffc5be0c85a8","modified":1517301890574},{"_id":"public/2018/01/21/iOS开发/开发笔记/深入学习多线程编程/index.html","hash":"6c8df84357d5272316fa91dae72db66332721fe8","modified":1517301890574},{"_id":"public/2018/01/20/weak和-strong/index.html","hash":"b5c271943350400b7601af3f464195d005e934cf","modified":1517301890574},{"_id":"public/2018/01/18/股票投资/股票术语/index.html","hash":"f63f43e6673424885138721155d1cd031ff001e2","modified":1517301890574},{"_id":"public/2018/01/16/iOS开发/iOS 开发基础/ios-HTTP请求/index.html","hash":"a43094e8ca841148884ade5f6266b158dd14219e","modified":1517301890574},{"_id":"public/2018/01/15/iOS开发/iOS 开发基础/instrument-详解/index.html","hash":"5aa44bc301e885e846713c79823a011d90b5f5fa","modified":1517301890574},{"_id":"public/2018/01/14/iOS开发/控件/UITableView详解/index.html","hash":"cfc3fdf4f7835505f7e512b8e8c4121d09839e07","modified":1517301890574},{"_id":"public/2018/01/13/HTTP/Http报文详解/index.html","hash":"4e62d486e5575c908ae2638631d74f5952500caa","modified":1517301890574},{"_id":"public/2018/01/12/Linux/分享几个常用的插件工具/index.html","hash":"e1c7322bd2489136c4bc22205eef805c2176f30f","modified":1517301890574},{"_id":"public/2017/12/29/iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS/index.html","hash":"6cf72d2b499d78c2b517bba1b07eca23ce03e3fd","modified":1517301890575},{"_id":"public/2014/01/10/iOS开发/开发笔记/iOS开发笔记/index.html","hash":"f86dd69be3d4e2a26255065f88ef4b1e57c5925c","modified":1517301890575},{"_id":"public/2013/04/25/Linux/gem、rvm使用心得/index.html","hash":"2bd8d90425d05435f9927e193588dbad44d01300","modified":1517301890575},{"_id":"public/2013/04/24/Git & SVN/github-使用手册/index.html","hash":"72a446fb6a8f842ccd303ef76e0ee14fac6b78d7","modified":1517301890575},{"_id":"public/archives/2013/index.html","hash":"fd9883d26048feb80cb37e40110acda2d88019f6","modified":1517301890575},{"_id":"public/archives/2013/04/index.html","hash":"fd9883d26048feb80cb37e40110acda2d88019f6","modified":1517301890575},{"_id":"public/archives/2014/index.html","hash":"c2ced934275ad91e86c93871677a5d3f18b66694","modified":1517301890575},{"_id":"public/archives/2014/01/index.html","hash":"c2ced934275ad91e86c93871677a5d3f18b66694","modified":1517301890575},{"_id":"public/archives/2017/index.html","hash":"528f460f4cab41da5143e14cf3bc44815c90db7b","modified":1517301890575},{"_id":"public/archives/2017/12/index.html","hash":"528f460f4cab41da5143e14cf3bc44815c90db7b","modified":1517301890575},{"_id":"public/archives/2018/page/2/index.html","hash":"6e5eb831b4215fda0b7c95cb66936a7add8daadb","modified":1517301890575},{"_id":"public/archives/2018/01/page/2/index.html","hash":"6dd269774caed7c88151aba4e1c396809b4a3199","modified":1517301890575},{"_id":"public/categories/Http/index.html","hash":"14cc80a08bfffb50d629aa1f598e3434b629360d","modified":1517301890575},{"_id":"public/categories/git-svn/index.html","hash":"3ae642574f69449eb138e5d38649d07b832e3e48","modified":1517301890575},{"_id":"public/categories/Linux/index.html","hash":"b5454bc36a6bce425b2a86e7681b020c402941b1","modified":1517301890575},{"_id":"public/categories/股票投资/index.html","hash":"c0f057137ef86445e0c858ad7a630a6531cefb3e","modified":1517301890576},{"_id":"public/tags/weak-strong/index.html","hash":"57c06e5cde02204f7def718f1306afde3b4bc1d5","modified":1517301890576},{"_id":"public/tags/Http-报文/index.html","hash":"14cc80a08bfffb50d629aa1f598e3434b629360d","modified":1517301890576},{"_id":"public/tags/URL/index.html","hash":"14cc80a08bfffb50d629aa1f598e3434b629360d","modified":1517301890576},{"_id":"public/tags/github/index.html","hash":"3ae642574f69449eb138e5d38649d07b832e3e48","modified":1517301890576},{"_id":"public/tags/gem/index.html","hash":"648d80bd3f8f3ee398fb4d783da9b0f78bc7e421","modified":1517301890576},{"_id":"public/tags/rvm/index.html","hash":"648d80bd3f8f3ee398fb4d783da9b0f78bc7e421","modified":1517301890576},{"_id":"public/tags/tools/index.html","hash":"a0a4d6a9eefc21bbd9be2e093e48bb0610a94f7b","modified":1517301890576},{"_id":"public/tags/plugins/index.html","hash":"a0a4d6a9eefc21bbd9be2e093e48bb0610a94f7b","modified":1517301890576},{"_id":"public/tags/cUrl/index.html","hash":"1fa73805910df086a011d8985de08990d5833833","modified":1517301890576},{"_id":"public/tags/instrument/index.html","hash":"5156fae4c8e22f6a69b09b0e5097ace3945c6a23","modified":1517301890576},{"_id":"public/tags/网络请求/index.html","hash":"bb2da44d998670570af8a2656bd7a3d563586107","modified":1517301890576},{"_id":"public/tags/libimobiledevice/index.html","hash":"528f460f4cab41da5143e14cf3bc44815c90db7b","modified":1517301890576},{"_id":"public/tags/UITableView/index.html","hash":"2cf4fd4072e5d276ba1d099dc194c7bab38c35b8","modified":1517301890576},{"_id":"public/2018/01/19/iOS开发/其他/ios知识脉络梳理/index.html","hash":"cdd405535d59e70eb57af6d29f62be65ca484bb6","modified":1517301890576},{"_id":"public/2018/01/15/iOS开发/iOS 开发基础/闭包、lambda-计算、block/index.html","hash":"31930c545dbfe63d394cabdc76343136df12d139","modified":1517301890577},{"_id":"public/2018/01/13/Linux/cUrl使用心得/index.html","hash":"9bcb4021ca7cb83c16be81d75f3d2d278edcb99d","modified":1517301890577},{"_id":"public/archives/index.html","hash":"928da2f714692f6098a246e513dac7a4bd1a5368","modified":1517301890577},{"_id":"public/archives/page/2/index.html","hash":"90f994ecfc8db63bde8a84907ea36dd4aa970a78","modified":1517301890577},{"_id":"public/archives/2018/index.html","hash":"9aacd69832da262e50adcc29ff7350948b037eba","modified":1517301890577},{"_id":"public/archives/2018/01/index.html","hash":"221858bc773d50b1ac450ec554c8d7567fbed7be","modified":1517301890577},{"_id":"public/categories/iOS开发/index.html","hash":"3b43a9f676d1386718abc924e1f37924d7c1dd34","modified":1517301890577},{"_id":"public/index.html","hash":"b5a600d1d863a80fff6a6d5f6036fd6ca4afc439","modified":1517301890577},{"_id":"public/page/2/index.html","hash":"bef6d996b140c5c9fbb8d29af77071de52ebaf37","modified":1517301890577},{"_id":"public/images/12.jpg","hash":"88d68b169744a76ca7b21a258fc0812bc03ee701","modified":1517301890591},{"_id":"public/images/3123.jpg","hash":"fc005184ff616231647c5dc85c63167040d810ba","modified":1517301890591},{"_id":"public/images/bg (2).jpg","hash":"5c7ba4dead81150448ea69bf541daa64fb59ae58","modified":1517301890591},{"_id":"public/images/me.jpg","hash":"d7740ebdd278a3aaebbc65c6fe7dc5564ceec174","modified":1517301890591},{"_id":"public/images/pic01.jpg","hash":"774db644cdac607e0d9d72ca65a4961f9a250c11","modified":1517301890591},{"_id":"public/images/overlay.png","hash":"e978d81201508e6fcbe0fe95485dae1a4b983a8d","modified":1517301890592},{"_id":"public/images/pic02.jpg","hash":"ab77495fef5102f94e36b71d4308cd682dd4b1a8","modified":1517301890592},{"_id":"public/images/pic04.jpg","hash":"ee299cd40108e50d7151333de525049f8ec4f150","modified":1517301890592},{"_id":"public/images/pic03.jpg","hash":"ec46b8b1490a794ea5d4c61058959b9a52ac262f","modified":1517301890592},{"_id":"public/images/pic06.jpg","hash":"3d8572663edf8a77b99bdfd93491d4f6a7298aaf","modified":1517301890592},{"_id":"public/images/pic05.jpg","hash":"b74d638c0aa9e90f94b056db4c0a886e382973f1","modified":1517301890592},{"_id":"public/images/pic07.jpg","hash":"de06b4eee3d0e42ddcac415adc8c83466f430253","modified":1517301890592},{"_id":"public/images/pic08.jpg","hash":"993e8ff91c20b6d28b6302d3a18367547610c58a","modified":1517301890592},{"_id":"public/images/pic09.jpg","hash":"6aae76e8215e3a6e785ce2a65484e4df03ed5fe9","modified":1517301890592},{"_id":"public/images/pic10.jpg","hash":"814a661f2966a3c8fe2c89034f62e828f291d770","modified":1517301890592},{"_id":"public/images/pic12.jpg","hash":"ae93f2674a3b1f1dcbfe9692f2e172e106c02d96","modified":1517301890592},{"_id":"public/images/pic11.jpg","hash":"a034beb80041d238f36685706a019a269f159ac1","modified":1517301890592},{"_id":"public/images/picx03.jpg","hash":"cffaa38c9489f131f6f37763b37b937811b316df","modified":1517301890592},{"_id":"public/img/icon.png","hash":"15f5f96cd48e0bfc8a443cdb77cc7874b68ba98c","modified":1517301890592},{"_id":"public/img/agumon.png","hash":"908da301fdf801118b307e28f9cdf0e535e6d1e0","modified":1517301890593},{"_id":"public/css/images/arrow-small.svg","hash":"f00360be7c8c06c0ab9d008b3485429cd07b8621","modified":1517301890593},{"_id":"public/css/images/arrow.svg","hash":"84ad7a183fce70ac31766748919292d9db68c3c8","modified":1517301890593},{"_id":"public/css/images/close-small-alt.svg","hash":"6b0204bb16fc15963977c3921d631209afff8180","modified":1517301890593},{"_id":"public/css/images/close-small.svg","hash":"23e81571a4e597278e80a593c9e82a0f03d9d167","modified":1517301890593},{"_id":"public/css/images/close.svg","hash":"7e524252c4610461102bf6da4b41eaa60845b642","modified":1517301890593},{"_id":"public/css/images/open-small.svg","hash":"7ee24df085722b308c03d3b827fd0769a63e49f2","modified":1517301890593},{"_id":"public/css/images/open.svg","hash":"f376adaf38d3fc3a2a0209e560a7d181105c75a6","modified":1517301890593},{"_id":"public/css/images/spinner.svg","hash":"7ef1bb9afa8be7be3509ba644c990b23f5876863","modified":1517301890593},{"_id":"public/images/fulls/01.jpg","hash":"cfc928948301b97ab2873e837284cd83cc3c6cff","modified":1517301890593},{"_id":"public/images/fulls/03.jpg","hash":"0f8c8109f8b605aa46ef571df1d16e8bdd43d090","modified":1517301890593},{"_id":"public/images/fulls/02.jpg","hash":"1a729f597316a7483ebcf39b5984ced1612a0410","modified":1517301890593},{"_id":"public/images/fulls/04.jpg","hash":"806679d4c4398335413b6b53941709a4aef7c3cd","modified":1517301890593},{"_id":"public/images/fulls/05.jpg","hash":"232b0b9e3b6e751ebb2e6c4284651639526200e3","modified":1517301890593},{"_id":"public/images/fulls/07.jpg","hash":"eb41675450650b613195806b154c6badbb7eca4d","modified":1517301890593},{"_id":"public/images/fulls/08.jpg","hash":"d31c389218f04bc7ec510ac236fbe343048e3cfc","modified":1517301890594},{"_id":"public/images/fulls/06.jpg","hash":"e97b29127a50c69cf445d0591cd94daab0f50e33","modified":1517301890594},{"_id":"public/images/fulls/09.jpg","hash":"61fab3aa8ceee938efb4965042ce2b5f51d3a584","modified":1517301890594},{"_id":"public/images/fulls/10.jpg","hash":"9a284568752a54ab9e8e9cd19c41750e05975d2a","modified":1517301890594},{"_id":"public/images/fulls/11.jpg","hash":"cff6219163e3154c1263ee1d7f924c0ae3ccc9e7","modified":1517301890594},{"_id":"public/images/fulls/12.jpg","hash":"a631491537584e2e23926d9d6f50ce60bb884b18","modified":1517301890594},{"_id":"public/images/thumbs/02.jpg","hash":"396a422cbc1b94b6c9b00f6a34c02b05913230ba","modified":1517301890594},{"_id":"public/images/thumbs/01.jpg","hash":"4f5a2b9fdf44146d60f8dd3a32c81a8419b9148f","modified":1517301890594},{"_id":"public/images/thumbs/03.jpg","hash":"e3915b1cc3283b5ec33f49e2591ebf2e6be2362e","modified":1517301890594},{"_id":"public/images/thumbs/04.jpg","hash":"3c60445217b1b52b1fd6cae4578356c564d7624d","modified":1517301890594},{"_id":"public/images/thumbs/06.jpg","hash":"ffc80bb5fe28626d9462e06d9f01d2a5f99b0ae9","modified":1517301890594},{"_id":"public/images/thumbs/05.jpg","hash":"3e28c2253db93ba42d16ba9a1f451dbc452fd947","modified":1517301890594},{"_id":"public/images/thumbs/07.jpg","hash":"45194a98089345e4f135c0f0bfffeee7ccdd9c99","modified":1517301890594},{"_id":"public/images/thumbs/09.jpg","hash":"bc8a02decf65e44657f02dcc11c7395bfa41ffdb","modified":1517301890594},{"_id":"public/images/thumbs/10.jpg","hash":"ccfee49fbca187bad971336cb8fda7dec05ab01e","modified":1517301890595},{"_id":"public/images/thumbs/08.jpg","hash":"e0384120f6acfa64ad0b5bd0d7e114e9f239294e","modified":1517301890595},{"_id":"public/images/thumbs/11.jpg","hash":"66a7fb237824b1b2fd550a068bb6a32f5031ab8f","modified":1517301890595},{"_id":"public/images/thumbs/12.jpg","hash":"17ab685447ed06b6c12e4d42f38111c684221bc7","modified":1517301890595},{"_id":"public/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1517301890603},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1517301890605},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1517301890607},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1517301890608},{"_id":"public/images/logo.png","hash":"ee2cf634d838f8acab5b826400edb0b42c8ce52b","modified":1517301890608},{"_id":"public/img/logo_miccall.png","hash":"ee2cf634d838f8acab5b826400edb0b42c8ce52b","modified":1517301890608},{"_id":"public/css/dropdownMenu.css","hash":"3e44ce25f19c28dcf2c12db1938ccce7a081c10f","modified":1517301890615},{"_id":"public/css/backcss.css","hash":"65db154a14ccb0e773a14e1d1262553e6f30aec5","modified":1517301890615},{"_id":"public/css/my_link.css","hash":"c9535592792f2271df88c39e4baf8c849e23db17","modified":1517301890615},{"_id":"public/css/noscript.css","hash":"5579ccdecc63139609db824704331d8d4af61538","modified":1517301890615},{"_id":"public/css/ok_prism.css","hash":"e20586e80aeef3192c727e20d2efe4bd23846d29","modified":1517301890615},{"_id":"public/css/prism.css","hash":"b39768264f9923a770bcc3f289be0a2bd8e64268","modified":1517301890615},{"_id":"public/css/prism_dark.css","hash":"8085542cdb4583ffb78b2edd146ebe9511bf668c","modified":1517301890615},{"_id":"public/css/prism_default.css","hash":"3600bee175b309662e306b50e494ac73495619c2","modified":1517301890615},{"_id":"public/css/prism_coy.css","hash":"24ebf5f3e5f68341522204dcaaf33f429d3c3718","modified":1517301890616},{"_id":"public/css/prism_okaidia.css","hash":"e20586e80aeef3192c727e20d2efe4bd23846d29","modified":1517301890616},{"_id":"public/css/prism_solarized.css","hash":"73759f72dc43870aaf76dca7ef4e61a142b6b4f0","modified":1517301890616},{"_id":"public/css/prism_funky.css","hash":"aa0e3a37fb8ccce44457d7805a13d7c6094d1f5e","modified":1517301890616},{"_id":"public/css/prism_twilight.css","hash":"17498435f6d964243c1a50deb563e6003aebe0e6","modified":1517301890616},{"_id":"public/css/typo.css","hash":"768004dae4204dfbda865d412229feaa618ec3b7","modified":1517301890616},{"_id":"public/js/gallery_skel.min.js","hash":"475a99682e46ad061915a11a9adb3fad82258d3c","modified":1517301890616},{"_id":"public/js/jquery.scrolly.min.js","hash":"6807fda8e44d95117e7007563a4db951818df82b","modified":1517301890616},{"_id":"public/js/jquery.scrollex.min.js","hash":"57fa1d1de2eca4fabbe75d6d160edc45cc398075","modified":1517301890616},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1517301890616},{"_id":"public/js/main.js","hash":"97cabd6461ce2751a8bdcf8d9abf94b0af34e735","modified":1517301890616},{"_id":"public/js/mic_gallery.js","hash":"c2d1f883d1714723e475a4b1c7d367a7885dec2e","modified":1517301890616},{"_id":"public/js/util.js","hash":"3ece9010adc07dd3dc27ced0e22e7ac8bcd16e14","modified":1517301890616},{"_id":"public/js/skel.min.js","hash":"475a99682e46ad061915a11a9adb3fad82258d3c","modified":1517301890616},{"_id":"public/css/font-awesome.min.css","hash":"03eb0a6b53db2655f3ded9bb1a4e4af07cc1efa6","modified":1517301890616},{"_id":"public/css/gallery.css","hash":"4c0178ea898cdc5e010346b56d1c9845fe8da53e","modified":1517301890616},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1517301890617},{"_id":"public/css/item.css","hash":"da1277164b611ccba56beda47960f9075c61dbab","modified":1517301890617},{"_id":"public/css/mic_gallery.css","hash":"4c0178ea898cdc5e010346b56d1c9845fe8da53e","modified":1517301890617},{"_id":"public/css/mic_main.css","hash":"8a0a574ec572d3adf4141ace0262e25ce35554f0","modified":1517301890617},{"_id":"public/js/jquery.min.js","hash":"276c87ff3e1e3155679c318938e74e5c1b76d809","modified":1517301890617},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1517301890617},{"_id":"public/js/prism.js","hash":"0868d642f4661649a37dfb45b93fa30b4d92d4e4","modified":1517301890617},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1517301890617},{"_id":"public/2018/01/13/HTTP/Http报文详解/响应报文首部.png","hash":"2a4c0a9b868def4daed483d1976347ea85be52f0","modified":1517301890617},{"_id":"public/2013/04/25/Linux/gem、rvm使用心得/timg.jpeg","hash":"769910b42c5e8ae1529a86bb9d9bdde7efdafbdd","modified":1517301890617},{"_id":"public/2018/01/15/iOS开发/iOS 开发基础/instrument-详解/instrument.png","hash":"74ded96ccc7883a576e55c8c1bf1b3f852329b83","modified":1517301890617},{"_id":"public/2013/04/24/Git & SVN/github-使用手册/timg.jpeg","hash":"195c26c76213886012e41b08c43299a4245ed90c","modified":1517301890625},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1517301890643},{"_id":"public/2017/12/29/iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS/thum.jpg","hash":"98fd072183396fa9d7737de305cb70e592c30858","modified":1517301890644},{"_id":"public/images/21.jpg","hash":"0b2570df0e6d9b79a0c50d0b4ce8799bd40ea421","modified":1517301890659},{"_id":"public/images/bg.jpg","hash":"15c88465b4e46aa175a083f2cfc2b5fb43bd6937","modified":1517301890723},{"_id":"public/fonts/FZLT.ttf","hash":"24dfab81236612d596c97eb38b3adf5de99f669c","modified":1517301890738}],"Category":[{"name":"iOS开发","_id":"cjd1edb5q0003dc4m6x2w4114"},{"name":"Http","_id":"cjd1edb6w000bdc4ml484xul1"},{"name":"git&svn","_id":"cjd1edb78000gdc4mdd76smel"},{"name":"Linux","_id":"cjd1edb7a000kdc4m65ngonvn"},{"name":"股票投资","_id":"cjd1edb7d000vdc4mju8j7rv7"}],"Data":[{"_id":"_links","data":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}},{"_id":"links","data":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}},{"_id":"gallery","data":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}],"Page":[{"title":"gallery","date":"2018-01-11T06:24:43.000Z","layout":"gallery","_content":"","source":"gallery/index.md","raw":"---\ntitle: gallery\ndate: 2018-01-11 14:24:43\nlayout: gallery\n---\n","updated":"2018-01-11T06:25:00.975Z","path":"gallery/index.html","comments":1,"_id":"cjd1edb5n0001dc4mul02s3ly","content":"","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":""},{"title":"about me","date":"2018-01-09T08:25:51.000Z","thumbnail":"http://tupian.aladd.net/2018/1/7/bizhitupian4.jpg","_content":"\n# about \n| 参数           | 描述         | 默认值    |\n| ------------ | ---------- | ------ |\n| `thumbnail`  | 缩略图        |        |\n| `layout`     | 布局         |        |\n| `title`      | 标题         |        |\n| `date`       | 建立日期       | 文件建立日期 |\n| `updated`    | 更新日期       | 文件更新日期 |\n| `comments`   | 开启文章的评论功能  | true   |\n| `tags`       | 标签（不适用于分页） |        |\n| `categories` | 分类（不适用于分页） |        |\n| `permalink`  | 覆盖文章网址     |        |\n\n\n\n掌握的技能：\n\n* 能熟练使用 UML、思维导图、流程图、网络拓扑图\n* lldb\n* ​","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2018-01-09 16:25:51\nthumbnail: \"http://tupian.aladd.net/2018/1/7/bizhitupian4.jpg\"\n---\n\n# about \n| 参数           | 描述         | 默认值    |\n| ------------ | ---------- | ------ |\n| `thumbnail`  | 缩略图        |        |\n| `layout`     | 布局         |        |\n| `title`      | 标题         |        |\n| `date`       | 建立日期       | 文件建立日期 |\n| `updated`    | 更新日期       | 文件更新日期 |\n| `comments`   | 开启文章的评论功能  | true   |\n| `tags`       | 标签（不适用于分页） |        |\n| `categories` | 分类（不适用于分页） |        |\n| `permalink`  | 覆盖文章网址     |        |\n\n\n\n掌握的技能：\n\n* 能熟练使用 UML、思维导图、流程图、网络拓扑图\n* lldb\n* ​","updated":"2018-01-19T12:54:00.272Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjd1edb5p0002dc4m7agg5sss","content":"<h1 id=\"about\"><a href=\"#about\" class=\"headerlink\" title=\"about\"></a>about</h1><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>thumbnail</code></td>\n<td>缩略图</td>\n<td></td>\n</tr>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td><code>comments</code></td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<p>掌握的技能：</p>\n<ul>\n<li>能熟练使用 UML、思维导图、流程图、网络拓扑图</li>\n<li>lldb</li>\n<li>​</li>\n</ul>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<h1 id=\"about\"><a href=\"#about\" class=\"headerlink\" title=\"about\"></a>about</h1><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>thumbnail</code></td>\n<td>缩略图</td>\n<td></td>\n</tr>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td><code>comments</code></td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<p>掌握的技能：</p>\n<ul>\n<li>能熟练使用 UML、思维导图、流程图、网络拓扑图</li>\n<li>lldb</li>\n<li>​</li>\n</ul>\n"},{"title":"group","date":"2018-01-11T06:25:18.000Z","layout":"links","_content":"","source":"group/index.md","raw":"---\ntitle: group\ndate: 2018-01-11 14:25:18\nlayout: links\n---\n","updated":"2018-01-11T06:53:30.022Z","path":"group/index.html","comments":1,"_id":"cjd1edb6c0007dc4mmjni81sr","content":"","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":""},{"title":"tag","date":"2018-01-11T06:11:49.000Z","layout":"tags","_content":"","source":"tag/index.md","raw":"---\ntitle: tag\ndate: 2018-01-11 14:11:49\nlayout: tags\n---\n","updated":"2018-01-11T06:12:38.072Z","path":"tag/index.html","comments":1,"_id":"cjd1edb6c0008dc4mohkh5plf","content":"","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":""}],"Post":[{"title":"weak和 strong","date":"2018-01-20T02:53:58.000Z","thumbnail":null,"_content":"\n\n\n@property中 weak 和 strong 的使用先看两段代码：\n\n```Objective-c\n@interface ViewController ()\n\n@property (nonatomic,strong)UIButton *button1;\n\n@end\n\n@implementation ViewController\n\n-(UIButton *)button1{\n    if (!_button1) {\n_button1=[UIButton buttonWithType:UIButtonTypeCustom];\n        _button1.frame=CGRectMake(50, 50, 100, 100);\n        [_button1 setTitle:@\"第一个\" forState:UIControlStateNormal];\n_button1.backgroundColor=[UIColor redColor];\n    }\nreturn _button1;\n\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button1];\n}\n\n@end\n```\n\n```objectivec\n@interface ViewController ()\n\n@property (nonatomic,weak) UIButton *button2;\n\n@end\n  \n@implementation ViewController\n\n-(UIButton *)button2{ \n\t\n    UIButton *btn=[UIButton buttonWithType:UIButtonTypeCustom];\n    btn.frame=CGRectMake(100, 100, 100, 100);\n    [btn setTitle:@\"第二个\" forState:UIControlStateNormal];\n    btn.backgroundColor=[UIColor yellowColor];\n    return btn;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button2];\n}\n\n@end\n```\n\n\n\n\n\n\n\n\n\n@property：strong：视图被移除时，因为有强引用指向他，所以不再次释放一下，则引用计数就是1\n\n\n\n@property：weak：从父视图移除时，这个 button 就直接释放了，因为是弱引用，所以不对引用计数造成影响（就像 assign）（xib 用 weak）\n\n\n\nweak 的机制：weak 变量能够在引用计数为 0 时被自动设置成 nil，显然是有运行时逻辑在工作的。\n\n","source":"_posts/weak和-strong.md","raw":"---\ntitle: weak和 strong\ndate: 2018-01-20 10:53:58\ntags: weak&strong\ncategories: iOS开发\nthumbnail:\n---\n\n\n\n@property中 weak 和 strong 的使用先看两段代码：\n\n```Objective-c\n@interface ViewController ()\n\n@property (nonatomic,strong)UIButton *button1;\n\n@end\n\n@implementation ViewController\n\n-(UIButton *)button1{\n    if (!_button1) {\n_button1=[UIButton buttonWithType:UIButtonTypeCustom];\n        _button1.frame=CGRectMake(50, 50, 100, 100);\n        [_button1 setTitle:@\"第一个\" forState:UIControlStateNormal];\n_button1.backgroundColor=[UIColor redColor];\n    }\nreturn _button1;\n\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button1];\n}\n\n@end\n```\n\n```objectivec\n@interface ViewController ()\n\n@property (nonatomic,weak) UIButton *button2;\n\n@end\n  \n@implementation ViewController\n\n-(UIButton *)button2{ \n\t\n    UIButton *btn=[UIButton buttonWithType:UIButtonTypeCustom];\n    btn.frame=CGRectMake(100, 100, 100, 100);\n    [btn setTitle:@\"第二个\" forState:UIControlStateNormal];\n    btn.backgroundColor=[UIColor yellowColor];\n    return btn;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button2];\n}\n\n@end\n```\n\n\n\n\n\n\n\n\n\n@property：strong：视图被移除时，因为有强引用指向他，所以不再次释放一下，则引用计数就是1\n\n\n\n@property：weak：从父视图移除时，这个 button 就直接释放了，因为是弱引用，所以不对引用计数造成影响（就像 assign）（xib 用 weak）\n\n\n\nweak 的机制：weak 变量能够在引用计数为 0 时被自动设置成 nil，显然是有运行时逻辑在工作的。\n\n","slug":"weak和-strong","published":1,"updated":"2018-01-30T08:41:09.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb5j0000dc4mg56kaotr","content":"<p>@property中 weak 和 strong 的使用先看两段代码：</p>\n<pre><code class=\"Objective-c\">@interface ViewController ()\n\n@property (nonatomic,strong)UIButton *button1;\n\n@end\n\n@implementation ViewController\n\n-(UIButton *)button1{\n    if (!_button1) {\n_button1=[UIButton buttonWithType:UIButtonTypeCustom];\n        _button1.frame=CGRectMake(50, 50, 100, 100);\n        [_button1 setTitle:@&quot;第一个&quot; forState:UIControlStateNormal];\n_button1.backgroundColor=[UIColor redColor];\n    }\nreturn _button1;\n\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button1];\n}\n\n@end\n</code></pre>\n<pre><code class=\"objectivec\">@interface ViewController ()\n\n@property (nonatomic,weak) UIButton *button2;\n\n@end\n\n@implementation ViewController\n\n-(UIButton *)button2{ \n\n    UIButton *btn=[UIButton buttonWithType:UIButtonTypeCustom];\n    btn.frame=CGRectMake(100, 100, 100, 100);\n    [btn setTitle:@&quot;第二个&quot; forState:UIControlStateNormal];\n    btn.backgroundColor=[UIColor yellowColor];\n    return btn;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button2];\n}\n\n@end\n</code></pre>\n<p>@property：strong：视图被移除时，因为有强引用指向他，所以不再次释放一下，则引用计数就是1</p>\n<p>@property：weak：从父视图移除时，这个 button 就直接释放了，因为是弱引用，所以不对引用计数造成影响（就像 assign）（xib 用 weak）</p>\n<p>weak 的机制：weak 变量能够在引用计数为 0 时被自动设置成 nil，显然是有运行时逻辑在工作的。</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<p>@property中 weak 和 strong 的使用先看两段代码：</p>\n<pre><code class=\"Objective-c\">@interface ViewController ()\n\n@property (nonatomic,strong)UIButton *button1;\n\n@end\n\n@implementation ViewController\n\n-(UIButton *)button1{\n    if (!_button1) {\n_button1=[UIButton buttonWithType:UIButtonTypeCustom];\n        _button1.frame=CGRectMake(50, 50, 100, 100);\n        [_button1 setTitle:@&quot;第一个&quot; forState:UIControlStateNormal];\n_button1.backgroundColor=[UIColor redColor];\n    }\nreturn _button1;\n\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button1];\n}\n\n@end\n</code></pre>\n<pre><code class=\"objectivec\">@interface ViewController ()\n\n@property (nonatomic,weak) UIButton *button2;\n\n@end\n\n@implementation ViewController\n\n-(UIButton *)button2{ \n\n    UIButton *btn=[UIButton buttonWithType:UIButtonTypeCustom];\n    btn.frame=CGRectMake(100, 100, 100, 100);\n    [btn setTitle:@&quot;第二个&quot; forState:UIControlStateNormal];\n    btn.backgroundColor=[UIColor yellowColor];\n    return btn;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button2];\n}\n\n@end\n</code></pre>\n<p>@property：strong：视图被移除时，因为有强引用指向他，所以不再次释放一下，则引用计数就是1</p>\n<p>@property：weak：从父视图移除时，这个 button 就直接释放了，因为是弱引用，所以不对引用计数造成影响（就像 assign）（xib 用 weak）</p>\n<p>weak 的机制：weak 变量能够在引用计数为 0 时被自动设置成 nil，显然是有运行时逻辑在工作的。</p>\n"},{"title":"Http - Web 基础概述","date":"2018-01-13T08:58:34.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515845822875&di=5c5ed7e816115333fa10af3a5d2e12dd&imgtype=0&src=http%3A%2F%2Fattach.bbs.miui.com%2Fforum%2F201708%2F02%2F162015g8shss8wbwb8w193.jpg","_content":"\n[TOC]\n\n# 一、HTTP报文\n\n![](https://images0.cnblogs.com/blog2015/776887/201507/241034588189239.png)\n\nHttp 报文分为请求报文（request）和响应报文（response），主要分三部分：\n\n- ## 1、起始行\n\n  - 请求行：**包含了一个方法和 URL（路径） 以及 HTTP 版本**\n\n  - 响应行：包含了 HTTP 版本，状态码和原因短语\n\n  - 方法：\n\n    > 分为常用的7种 HTTP 方法和对 HTTP 规范的扩展方法。\n\n  - 状态码：\n\n    > 状态码位于响应的起始行中；\n    >\n    > 状态码数在每条响应报文的起始行中返回的；\n\n  - 原因短语：\n\n    > 通常与状态码成对出现，如200 OK（描述操作状态的、文本的形式的原因短语）\n\n  - 版本号：\n\n    > **注意，版本号不会被当做小数处理，2.22要比2.3要大** \n\n- ## 2、首部（请求头、响应头、head）\n\n  - 通用首部\n  - 请求首部\n    - Accept 首部\n    - 条件请求首部\n    - 安全请求首部\n    - 代理请求首部\n  - 响应首部\n    - 协商首部\n    - 安全响应首部\n  - 实体首部\n    - 内容首部（Content）\n    - 实体缓存首部\n\n- ## 3、主体（请求体、响应体、body）\n\n![响应报文首部](响应报文首部.png)\n\n#二、URL \n\n##1、URL 语法\n\n<scheme>://<user>:<password>@<host>:<port>/<path>;<params1>;<params2>?<query>&<query2>#<flag>\n\n方案://用户名:密码@主机:端口/路径;参数1;参数2？查询字符串#片段\n\n> URI方案：http（80）、ftp（21）、https（443）、mailto、rtsp、rtmp（1935）、file、telnet（23）、ssh（22），以上为常用的，远不止这些\n\n> rtsp：Real Time Streaming Protocol：实时流传输协议\n>\n> rtmp：Real Time Message Protocol ：实时信息传输协议\n\n## 2、一些常见的概念\n\n### （1） URI \n\nURI（统一资源标识符）\n\n* URL（统一资源定位符）\n* URN（统一资源名）\n\n### （1）RFC\n\n​         Request For Comments（RFC），是一系列以编号排定的文件。说白了就是 Internet标准定制文件。\n\n​        一个RFC文件在成为官方标准前一般至少要经历4个阶段【RFC2026】：因特网草案、建议标准、草案标准、因特网标准。\n\n### （3）事物\n\n一个 HTTP 事物有一条请求命令和一条响应结果组成。\n\n事物 = 请求 + 响应\n\n### （4）TCP\n\nTCP：传输控制协议，是把东西从一个地方传到另一个地方用的。***转发 HTTP 报文***。\n\nTCP 客户端与服务器是通过套接字（socket）通信的。\n\nHTTP 是**应用**层的，TCP 是**传输**层的。一个侧重应用，一个侧重传输。\n\n作用：\n\n* 无差错的数据传输\n* 按序传输（数据总是按照发送的顺序到达目的地）\n* 未分段的数据流（可以在任意时刻以任意尺寸发送数据）（尺寸就是 Content-Length）\n\n### （5）隧道（tunnel）\n\n定义：对 HTTP 报文进行**盲转**发的特殊代理。（ 之所以敢盲转还是不因为加了一层 SSL）\n\n### （6）SSL\n\nSSL（安全套接字层，）在 HTTPS 网络协议栈同 TSL 一样，属于安全层\n\n![](https://upload-images.jianshu.io/upload_images/3588755-cca8c7cf776db6ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/644)\n\n### （7）代理与 Agent 代理\n\n这俩货其实不一样，前者指 proxy，用于在客户端和服务器之间转发流量；\n\n后者是代表用户发起 HTTP 请求的客户端程序。（就是 web 机器人、爬虫）。\n\n### （8）报文流\n\n不管报文是从客户端流入服务器，还是从服务器流入客户端，所有的报文都是像河水一样，**下游**流动。\n\nHTTP 使用流入和流出描述***事务处理***的方向。\n\n客服端\\\n\n​           服务器\n\n客户端/\n\n# 三、连接管理\n\n###1、OSI 七层协议和 TCP/IP 五层网络协议\n\n总结为一句话：应表会、传网数物（五层协议中应表会为一层）。\n\n###2、TCP 协议中的三次握手\n\n总结为一句话：“船~来~了！船~来~了~吗？船~来~了。”之后服务器把船开往客服端。\n\n![](http://img.blog.csdn.net/20170104214009596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2h1c2xlaQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n### 3、TCP 慢启动（slow shtar）\n\nTCP 会通过时间进行自我调谐。开始会限制连接的最大速度，如果数据传输成功，再慢慢提速。这种调谐被称为 TCP 慢启动。\n\n>  新建了一座桥。汽车为了试试这个桥能不能走，先慢慢开过去，如果发现没问题，其他汽车再提速过去。\n\n\n\n在提速的过程中，有个概念叫***打开拥塞窗口***。\n\n> 有一个车队要过一座桥。一开始先派一辆车过去，确认没事的话派两个车试试，如果还没事的话派四辆车过去，这个过程就叫打开拥塞窗口。","source":"_posts/HTTP/Http报文详解.md","raw":"---\ntitle: Http - Web 基础概述\ndate: 2018-01-13 16:58:34\ntags: \n- Http 报文\n- URL\ncategories: Http\nthumbnail: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515845822875&di=5c5ed7e816115333fa10af3a5d2e12dd&imgtype=0&src=http%3A%2F%2Fattach.bbs.miui.com%2Fforum%2F201708%2F02%2F162015g8shss8wbwb8w193.jpg\"\n---\n\n[TOC]\n\n# 一、HTTP报文\n\n![](https://images0.cnblogs.com/blog2015/776887/201507/241034588189239.png)\n\nHttp 报文分为请求报文（request）和响应报文（response），主要分三部分：\n\n- ## 1、起始行\n\n  - 请求行：**包含了一个方法和 URL（路径） 以及 HTTP 版本**\n\n  - 响应行：包含了 HTTP 版本，状态码和原因短语\n\n  - 方法：\n\n    > 分为常用的7种 HTTP 方法和对 HTTP 规范的扩展方法。\n\n  - 状态码：\n\n    > 状态码位于响应的起始行中；\n    >\n    > 状态码数在每条响应报文的起始行中返回的；\n\n  - 原因短语：\n\n    > 通常与状态码成对出现，如200 OK（描述操作状态的、文本的形式的原因短语）\n\n  - 版本号：\n\n    > **注意，版本号不会被当做小数处理，2.22要比2.3要大** \n\n- ## 2、首部（请求头、响应头、head）\n\n  - 通用首部\n  - 请求首部\n    - Accept 首部\n    - 条件请求首部\n    - 安全请求首部\n    - 代理请求首部\n  - 响应首部\n    - 协商首部\n    - 安全响应首部\n  - 实体首部\n    - 内容首部（Content）\n    - 实体缓存首部\n\n- ## 3、主体（请求体、响应体、body）\n\n![响应报文首部](响应报文首部.png)\n\n#二、URL \n\n##1、URL 语法\n\n<scheme>://<user>:<password>@<host>:<port>/<path>;<params1>;<params2>?<query>&<query2>#<flag>\n\n方案://用户名:密码@主机:端口/路径;参数1;参数2？查询字符串#片段\n\n> URI方案：http（80）、ftp（21）、https（443）、mailto、rtsp、rtmp（1935）、file、telnet（23）、ssh（22），以上为常用的，远不止这些\n\n> rtsp：Real Time Streaming Protocol：实时流传输协议\n>\n> rtmp：Real Time Message Protocol ：实时信息传输协议\n\n## 2、一些常见的概念\n\n### （1） URI \n\nURI（统一资源标识符）\n\n* URL（统一资源定位符）\n* URN（统一资源名）\n\n### （1）RFC\n\n​         Request For Comments（RFC），是一系列以编号排定的文件。说白了就是 Internet标准定制文件。\n\n​        一个RFC文件在成为官方标准前一般至少要经历4个阶段【RFC2026】：因特网草案、建议标准、草案标准、因特网标准。\n\n### （3）事物\n\n一个 HTTP 事物有一条请求命令和一条响应结果组成。\n\n事物 = 请求 + 响应\n\n### （4）TCP\n\nTCP：传输控制协议，是把东西从一个地方传到另一个地方用的。***转发 HTTP 报文***。\n\nTCP 客户端与服务器是通过套接字（socket）通信的。\n\nHTTP 是**应用**层的，TCP 是**传输**层的。一个侧重应用，一个侧重传输。\n\n作用：\n\n* 无差错的数据传输\n* 按序传输（数据总是按照发送的顺序到达目的地）\n* 未分段的数据流（可以在任意时刻以任意尺寸发送数据）（尺寸就是 Content-Length）\n\n### （5）隧道（tunnel）\n\n定义：对 HTTP 报文进行**盲转**发的特殊代理。（ 之所以敢盲转还是不因为加了一层 SSL）\n\n### （6）SSL\n\nSSL（安全套接字层，）在 HTTPS 网络协议栈同 TSL 一样，属于安全层\n\n![](https://upload-images.jianshu.io/upload_images/3588755-cca8c7cf776db6ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/644)\n\n### （7）代理与 Agent 代理\n\n这俩货其实不一样，前者指 proxy，用于在客户端和服务器之间转发流量；\n\n后者是代表用户发起 HTTP 请求的客户端程序。（就是 web 机器人、爬虫）。\n\n### （8）报文流\n\n不管报文是从客户端流入服务器，还是从服务器流入客户端，所有的报文都是像河水一样，**下游**流动。\n\nHTTP 使用流入和流出描述***事务处理***的方向。\n\n客服端\\\n\n​           服务器\n\n客户端/\n\n# 三、连接管理\n\n###1、OSI 七层协议和 TCP/IP 五层网络协议\n\n总结为一句话：应表会、传网数物（五层协议中应表会为一层）。\n\n###2、TCP 协议中的三次握手\n\n总结为一句话：“船~来~了！船~来~了~吗？船~来~了。”之后服务器把船开往客服端。\n\n![](http://img.blog.csdn.net/20170104214009596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2h1c2xlaQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n### 3、TCP 慢启动（slow shtar）\n\nTCP 会通过时间进行自我调谐。开始会限制连接的最大速度，如果数据传输成功，再慢慢提速。这种调谐被称为 TCP 慢启动。\n\n>  新建了一座桥。汽车为了试试这个桥能不能走，先慢慢开过去，如果发现没问题，其他汽车再提速过去。\n\n\n\n在提速的过程中，有个概念叫***打开拥塞窗口***。\n\n> 有一个车队要过一座桥。一开始先派一辆车过去，确认没事的话派两个车试试，如果还没事的话派四辆车过去，这个过程就叫打开拥塞窗口。","slug":"HTTP/Http报文详解","published":1,"updated":"2018-01-16T08:50:31.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb6t0009dc4m8ao3zb0v","content":"<p>[TOC]</p>\n<h1 id=\"一、HTTP报文\"><a href=\"#一、HTTP报文\" class=\"headerlink\" title=\"一、HTTP报文\"></a>一、HTTP报文</h1><p><img src=\"https://images0.cnblogs.com/blog2015/776887/201507/241034588189239.png\" alt=\"\"></p>\n<p>Http 报文分为请求报文（request）和响应报文（response），主要分三部分：</p>\n<ul>\n<li><h2 id=\"1、起始行\"><a href=\"#1、起始行\" class=\"headerlink\" title=\"1、起始行\"></a>1、起始行</h2><ul>\n<li><p>请求行：<strong>包含了一个方法和 URL（路径） 以及 HTTP 版本</strong></p>\n</li>\n<li><p>响应行：包含了 HTTP 版本，状态码和原因短语</p>\n</li>\n<li><p>方法：</p>\n<blockquote>\n<p>分为常用的7种 HTTP 方法和对 HTTP 规范的扩展方法。</p>\n</blockquote>\n</li>\n<li><p>状态码：</p>\n<blockquote>\n<p>状态码位于响应的起始行中；</p>\n<p>状态码数在每条响应报文的起始行中返回的；</p>\n</blockquote>\n</li>\n<li><p>原因短语：</p>\n<blockquote>\n<p>通常与状态码成对出现，如200 OK（描述操作状态的、文本的形式的原因短语）</p>\n</blockquote>\n</li>\n<li><p>版本号：</p>\n<blockquote>\n<p><strong>注意，版本号不会被当做小数处理，2.22要比2.3要大</strong> </p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><h2 id=\"2、首部（请求头、响应头、head）\"><a href=\"#2、首部（请求头、响应头、head）\" class=\"headerlink\" title=\"2、首部（请求头、响应头、head）\"></a>2、首部（请求头、响应头、head）</h2><ul>\n<li>通用首部</li>\n<li>请求首部<ul>\n<li>Accept 首部</li>\n<li>条件请求首部</li>\n<li>安全请求首部</li>\n<li>代理请求首部</li>\n</ul>\n</li>\n<li>响应首部<ul>\n<li>协商首部</li>\n<li>安全响应首部</li>\n</ul>\n</li>\n<li>实体首部<ul>\n<li>内容首部（Content）</li>\n<li>实体缓存首部</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"3、主体（请求体、响应体、body）\"><a href=\"#3、主体（请求体、响应体、body）\" class=\"headerlink\" title=\"3、主体（请求体、响应体、body）\"></a>3、主体（请求体、响应体、body）</h2></li>\n</ul>\n<p><img src=\"响应报文首部.png\" alt=\"响应报文首部\"></p>\n<p>#二、URL </p>\n<p>##1、URL 语法</p>\n<p><scheme>://<user>:<password>@<host>:<port>/<path></path>;<params1>;<params2>?<query>&amp;<query2>#<flag></flag></query2></query></params2></params1></port></host></password></user></scheme></p>\n<p>方案://用户名:密码@主机:端口/路径;参数1;参数2？查询字符串#片段</p>\n<blockquote>\n<p>URI方案：http（80）、ftp（21）、https（443）、mailto、rtsp、rtmp（1935）、file、telnet（23）、ssh（22），以上为常用的，远不止这些</p>\n<p>rtsp：Real Time Streaming Protocol：实时流传输协议</p>\n<p>rtmp：Real Time Message Protocol ：实时信息传输协议</p>\n</blockquote>\n<h2 id=\"2、一些常见的概念\"><a href=\"#2、一些常见的概念\" class=\"headerlink\" title=\"2、一些常见的概念\"></a>2、一些常见的概念</h2><h3 id=\"（1）-URI\"><a href=\"#（1）-URI\" class=\"headerlink\" title=\"（1） URI\"></a>（1） URI</h3><p>URI（统一资源标识符）</p>\n<ul>\n<li>URL（统一资源定位符）</li>\n<li>URN（统一资源名）</li>\n</ul>\n<h3 id=\"（1）RFC\"><a href=\"#（1）RFC\" class=\"headerlink\" title=\"（1）RFC\"></a>（1）RFC</h3><p>​         Request For Comments（RFC），是一系列以编号排定的文件。说白了就是 Internet标准定制文件。</p>\n<p>​        一个RFC文件在成为官方标准前一般至少要经历4个阶段【RFC2026】：因特网草案、建议标准、草案标准、因特网标准。</p>\n<h3 id=\"（3）事物\"><a href=\"#（3）事物\" class=\"headerlink\" title=\"（3）事物\"></a>（3）事物</h3><p>一个 HTTP 事物有一条请求命令和一条响应结果组成。</p>\n<p>事物 = 请求 + 响应</p>\n<h3 id=\"（4）TCP\"><a href=\"#（4）TCP\" class=\"headerlink\" title=\"（4）TCP\"></a>（4）TCP</h3><p>TCP：传输控制协议，是把东西从一个地方传到另一个地方用的。<strong><em>转发 HTTP 报文</em></strong>。</p>\n<p>TCP 客户端与服务器是通过套接字（socket）通信的。</p>\n<p>HTTP 是<strong>应用</strong>层的，TCP 是<strong>传输</strong>层的。一个侧重应用，一个侧重传输。</p>\n<p>作用：</p>\n<ul>\n<li>无差错的数据传输</li>\n<li>按序传输（数据总是按照发送的顺序到达目的地）</li>\n<li>未分段的数据流（可以在任意时刻以任意尺寸发送数据）（尺寸就是 Content-Length）</li>\n</ul>\n<h3 id=\"（5）隧道（tunnel）\"><a href=\"#（5）隧道（tunnel）\" class=\"headerlink\" title=\"（5）隧道（tunnel）\"></a>（5）隧道（tunnel）</h3><p>定义：对 HTTP 报文进行<strong>盲转</strong>发的特殊代理。（ 之所以敢盲转还是不因为加了一层 SSL）</p>\n<h3 id=\"（6）SSL\"><a href=\"#（6）SSL\" class=\"headerlink\" title=\"（6）SSL\"></a>（6）SSL</h3><p>SSL（安全套接字层，）在 HTTPS 网络协议栈同 TSL 一样，属于安全层</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3588755-cca8c7cf776db6ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/644\" alt=\"\"></p>\n<h3 id=\"（7）代理与-Agent-代理\"><a href=\"#（7）代理与-Agent-代理\" class=\"headerlink\" title=\"（7）代理与 Agent 代理\"></a>（7）代理与 Agent 代理</h3><p>这俩货其实不一样，前者指 proxy，用于在客户端和服务器之间转发流量；</p>\n<p>后者是代表用户发起 HTTP 请求的客户端程序。（就是 web 机器人、爬虫）。</p>\n<h3 id=\"（8）报文流\"><a href=\"#（8）报文流\" class=\"headerlink\" title=\"（8）报文流\"></a>（8）报文流</h3><p>不管报文是从客户端流入服务器，还是从服务器流入客户端，所有的报文都是像河水一样，<strong>下游</strong>流动。</p>\n<p>HTTP 使用流入和流出描述<strong><em>事务处理</em></strong>的方向。</p>\n<p>客服端\\</p>\n<p>​           服务器</p>\n<p>客户端/</p>\n<h1 id=\"三、连接管理\"><a href=\"#三、连接管理\" class=\"headerlink\" title=\"三、连接管理\"></a>三、连接管理</h1><p>###1、OSI 七层协议和 TCP/IP 五层网络协议</p>\n<p>总结为一句话：应表会、传网数物（五层协议中应表会为一层）。</p>\n<p>###2、TCP 协议中的三次握手</p>\n<p>总结为一句话：“船~来~了！船~来~了~吗？船~来~了。”之后服务器把船开往客服端。</p>\n<p><img src=\"http://img.blog.csdn.net/20170104214009596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2h1c2xlaQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h3 id=\"3、TCP-慢启动（slow-shtar）\"><a href=\"#3、TCP-慢启动（slow-shtar）\" class=\"headerlink\" title=\"3、TCP 慢启动（slow shtar）\"></a>3、TCP 慢启动（slow shtar）</h3><p>TCP 会通过时间进行自我调谐。开始会限制连接的最大速度，如果数据传输成功，再慢慢提速。这种调谐被称为 TCP 慢启动。</p>\n<blockquote>\n<p> 新建了一座桥。汽车为了试试这个桥能不能走，先慢慢开过去，如果发现没问题，其他汽车再提速过去。</p>\n</blockquote>\n<p>在提速的过程中，有个概念叫<strong><em>打开拥塞窗口</em></strong>。</p>\n<blockquote>\n<p>有一个车队要过一座桥。一开始先派一辆车过去，确认没事的话派两个车试试，如果还没事的话派四辆车过去，这个过程就叫打开拥塞窗口。</p>\n</blockquote>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"一、HTTP报文\"><a href=\"#一、HTTP报文\" class=\"headerlink\" title=\"一、HTTP报文\"></a>一、HTTP报文</h1><p><img src=\"https://images0.cnblogs.com/blog2015/776887/201507/241034588189239.png\" alt=\"\"></p>\n<p>Http 报文分为请求报文（request）和响应报文（response），主要分三部分：</p>\n<ul>\n<li><h2 id=\"1、起始行\"><a href=\"#1、起始行\" class=\"headerlink\" title=\"1、起始行\"></a>1、起始行</h2><ul>\n<li><p>请求行：<strong>包含了一个方法和 URL（路径） 以及 HTTP 版本</strong></p>\n</li>\n<li><p>响应行：包含了 HTTP 版本，状态码和原因短语</p>\n</li>\n<li><p>方法：</p>\n<blockquote>\n<p>分为常用的7种 HTTP 方法和对 HTTP 规范的扩展方法。</p>\n</blockquote>\n</li>\n<li><p>状态码：</p>\n<blockquote>\n<p>状态码位于响应的起始行中；</p>\n<p>状态码数在每条响应报文的起始行中返回的；</p>\n</blockquote>\n</li>\n<li><p>原因短语：</p>\n<blockquote>\n<p>通常与状态码成对出现，如200 OK（描述操作状态的、文本的形式的原因短语）</p>\n</blockquote>\n</li>\n<li><p>版本号：</p>\n<blockquote>\n<p><strong>注意，版本号不会被当做小数处理，2.22要比2.3要大</strong> </p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><h2 id=\"2、首部（请求头、响应头、head）\"><a href=\"#2、首部（请求头、响应头、head）\" class=\"headerlink\" title=\"2、首部（请求头、响应头、head）\"></a>2、首部（请求头、响应头、head）</h2><ul>\n<li>通用首部</li>\n<li>请求首部<ul>\n<li>Accept 首部</li>\n<li>条件请求首部</li>\n<li>安全请求首部</li>\n<li>代理请求首部</li>\n</ul>\n</li>\n<li>响应首部<ul>\n<li>协商首部</li>\n<li>安全响应首部</li>\n</ul>\n</li>\n<li>实体首部<ul>\n<li>内容首部（Content）</li>\n<li>实体缓存首部</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"3、主体（请求体、响应体、body）\"><a href=\"#3、主体（请求体、响应体、body）\" class=\"headerlink\" title=\"3、主体（请求体、响应体、body）\"></a>3、主体（请求体、响应体、body）</h2></li>\n</ul>\n<p><img src=\"响应报文首部.png\" alt=\"响应报文首部\"></p>\n<p>#二、URL </p>\n<p>##1、URL 语法</p>\n<p><scheme>://<user>:<password>@<host>:<port>/<path></path>;<params1>;<params2>?<query>&amp;<query2>#<flag></flag></query2></query></params2></params1></port></host></password></user></scheme></p>\n<p>方案://用户名:密码@主机:端口/路径;参数1;参数2？查询字符串#片段</p>\n<blockquote>\n<p>URI方案：http（80）、ftp（21）、https（443）、mailto、rtsp、rtmp（1935）、file、telnet（23）、ssh（22），以上为常用的，远不止这些</p>\n<p>rtsp：Real Time Streaming Protocol：实时流传输协议</p>\n<p>rtmp：Real Time Message Protocol ：实时信息传输协议</p>\n</blockquote>\n<h2 id=\"2、一些常见的概念\"><a href=\"#2、一些常见的概念\" class=\"headerlink\" title=\"2、一些常见的概念\"></a>2、一些常见的概念</h2><h3 id=\"（1）-URI\"><a href=\"#（1）-URI\" class=\"headerlink\" title=\"（1） URI\"></a>（1） URI</h3><p>URI（统一资源标识符）</p>\n<ul>\n<li>URL（统一资源定位符）</li>\n<li>URN（统一资源名）</li>\n</ul>\n<h3 id=\"（1）RFC\"><a href=\"#（1）RFC\" class=\"headerlink\" title=\"（1）RFC\"></a>（1）RFC</h3><p>​         Request For Comments（RFC），是一系列以编号排定的文件。说白了就是 Internet标准定制文件。</p>\n<p>​        一个RFC文件在成为官方标准前一般至少要经历4个阶段【RFC2026】：因特网草案、建议标准、草案标准、因特网标准。</p>\n<h3 id=\"（3）事物\"><a href=\"#（3）事物\" class=\"headerlink\" title=\"（3）事物\"></a>（3）事物</h3><p>一个 HTTP 事物有一条请求命令和一条响应结果组成。</p>\n<p>事物 = 请求 + 响应</p>\n<h3 id=\"（4）TCP\"><a href=\"#（4）TCP\" class=\"headerlink\" title=\"（4）TCP\"></a>（4）TCP</h3><p>TCP：传输控制协议，是把东西从一个地方传到另一个地方用的。<strong><em>转发 HTTP 报文</em></strong>。</p>\n<p>TCP 客户端与服务器是通过套接字（socket）通信的。</p>\n<p>HTTP 是<strong>应用</strong>层的，TCP 是<strong>传输</strong>层的。一个侧重应用，一个侧重传输。</p>\n<p>作用：</p>\n<ul>\n<li>无差错的数据传输</li>\n<li>按序传输（数据总是按照发送的顺序到达目的地）</li>\n<li>未分段的数据流（可以在任意时刻以任意尺寸发送数据）（尺寸就是 Content-Length）</li>\n</ul>\n<h3 id=\"（5）隧道（tunnel）\"><a href=\"#（5）隧道（tunnel）\" class=\"headerlink\" title=\"（5）隧道（tunnel）\"></a>（5）隧道（tunnel）</h3><p>定义：对 HTTP 报文进行<strong>盲转</strong>发的特殊代理。（ 之所以敢盲转还是不因为加了一层 SSL）</p>\n<h3 id=\"（6）SSL\"><a href=\"#（6）SSL\" class=\"headerlink\" title=\"（6）SSL\"></a>（6）SSL</h3><p>SSL（安全套接字层，）在 HTTPS 网络协议栈同 TSL 一样，属于安全层</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3588755-cca8c7cf776db6ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/644\" alt=\"\"></p>\n<h3 id=\"（7）代理与-Agent-代理\"><a href=\"#（7）代理与-Agent-代理\" class=\"headerlink\" title=\"（7）代理与 Agent 代理\"></a>（7）代理与 Agent 代理</h3><p>这俩货其实不一样，前者指 proxy，用于在客户端和服务器之间转发流量；</p>\n<p>后者是代表用户发起 HTTP 请求的客户端程序。（就是 web 机器人、爬虫）。</p>\n<h3 id=\"（8）报文流\"><a href=\"#（8）报文流\" class=\"headerlink\" title=\"（8）报文流\"></a>（8）报文流</h3><p>不管报文是从客户端流入服务器，还是从服务器流入客户端，所有的报文都是像河水一样，<strong>下游</strong>流动。</p>\n<p>HTTP 使用流入和流出描述<strong><em>事务处理</em></strong>的方向。</p>\n<p>客服端\\</p>\n<p>​           服务器</p>\n<p>客户端/</p>\n<h1 id=\"三、连接管理\"><a href=\"#三、连接管理\" class=\"headerlink\" title=\"三、连接管理\"></a>三、连接管理</h1><p>###1、OSI 七层协议和 TCP/IP 五层网络协议</p>\n<p>总结为一句话：应表会、传网数物（五层协议中应表会为一层）。</p>\n<p>###2、TCP 协议中的三次握手</p>\n<p>总结为一句话：“船~来~了！船~来~了~吗？船~来~了。”之后服务器把船开往客服端。</p>\n<p><img src=\"http://img.blog.csdn.net/20170104214009596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2h1c2xlaQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h3 id=\"3、TCP-慢启动（slow-shtar）\"><a href=\"#3、TCP-慢启动（slow-shtar）\" class=\"headerlink\" title=\"3、TCP 慢启动（slow shtar）\"></a>3、TCP 慢启动（slow shtar）</h3><p>TCP 会通过时间进行自我调谐。开始会限制连接的最大速度，如果数据传输成功，再慢慢提速。这种调谐被称为 TCP 慢启动。</p>\n<blockquote>\n<p> 新建了一座桥。汽车为了试试这个桥能不能走，先慢慢开过去，如果发现没问题，其他汽车再提速过去。</p>\n</blockquote>\n<p>在提速的过程中，有个概念叫<strong><em>打开拥塞窗口</em></strong>。</p>\n<blockquote>\n<p>有一个车队要过一座桥。一开始先派一辆车过去，确认没事的话派两个车试试，如果还没事的话派四辆车过去，这个过程就叫打开拥塞窗口。</p>\n</blockquote>\n"},{"title":"git 深入学习","date":"2013-04-24T09:07:16.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515664615&di=e299224babfec2bfc85a87315fc28e89&src=http://a3.topitme.com/3/af/64/1128834126ba564af3o.jpg","_content":"\n# （一）git深入学习\n\n\n\n### 一、官方说明\n\n##### start a working area (see also: git help tutorial)\n\n- clone      Clone a repository into a new directory\n\n  > 克隆一个 repo 到一个新的目录\n\n- init       Create an empty Git repository or reinitialize（重置） an existing one\n\n  > 创建一个空的 git repo 或者重置一个\n\n  ​\n\n##### work on the current change (see also: git help everyday)\n\n- add        Add file contents to the index\n\n  > add all\n  >\n  > ```\n  > git add .\n  > ```\n\n- mv         Move or rename a file, a directory, or a symlink\n\n- reset      Reset current HEAD to the specified state\n\n  > 重置当前 HEAD 区到指定的状态\n\n- rm         Remove files from the working tree and from the index\n\n##### examine the history and state (see also: git help revisions)\n\n- bisect     Use binary search to find the commit that introduced a bug\n\n  > 使用二分法查找\n\n- grep       Print lines matching a pattern\n\n  > *grep* (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)\n\n- log        Show commit logs\n\n- show       Show various types of objects\n\n- status     Show the working tree status\n\n  > 显示当前工作树的状态\n\n  ​\n\n  ##### grow, mark and tweak your common history\n\n- branch     List, create, or delete branches（分支）\n\n- checkout   Switch branches or restore working tree files（检出）\n\n- commit     Record changes to the repository（提交到版本库）\n\n- diff       Show changes between commits, commit and working tree, etc\n\n- merge      Join two or more development histories together（合并）\n\n  > 多人开发\n\n- rebase     Reapply commits on top of another base tip\n\n- tag        Create, list, delete or verify a tag object signed with GPG\n\n##### collaborate (see also: git help workflows)\n\n- fetch      Download objects and refs from another repository\n\n  > 从远程的分支获取最新版本到本地，不会自动 merge\n  >\n  > ```\n  > #从远程的origin 的 master主分支下载最新的版本到 origin/master分支上 \n  > git fetch origin master:tmp \n  >\n  > #比较本地的 master 分支和 origin/master 分支的区别\n  > git diff tmp \n  >\n  > #合并\n  > git merge tmp\n  > ```\n  >\n  >  git fetch 相对比 git pull 安全些\n\n- pull       Fetch from and integrate with another repository or a local branch\n\n  > 从远程的分支获取最新的版本，并 merge 到本地\n  >\n  > ```\n  > git pull origin master\n  > ```\n  >\n  > **fetch + merge = pull**\n\n- push       Update remote refs along with associated objects\n\n### 二、其他用法\n\n- remote \n\n  > ```\n  > git remote    #列出已经存在的分支\n  > ```\n  >\n  > ```\n  > git remote -v #列出详细信息，每个名字后面加上地址\n  > ```\n\n### 三、具体步骤\n\n```\n$cd yourRepoDict\n$git init \n$git add .\n$git commit -m \"xxxxx\"\n$git remote add origin https://github.com/Yggdrasill-7C9/blog.git\n$git push -u origin master\n```\n\n\n\n# （二）git深入学习\n\n## 一、常见概念\n\n1、**Git 的核心是一个对象数据库。**所有提交的文件、目录、以及相关的元数据都被储存在该数据库中。\n\n* Blob 对象：储存文件内容。\n* Tree 对象：储存目录数据。\n\n2、提交图：`git log --graph`\n\n3、Git 主要有两个层面构成：\n\n* 瓷质命令（porcelain command）\n* 管道（plumbing）\n\n4、快速合并：\n\n* 有两个分支 a 和 b。其中 b 并未对内容做任何修改。所以合并 ab的时候，实际就是将指针指向了a\t。\n* 非快进操作：`--no-ff`：强制产生一次新的提交\n\na —— b —— c ——d \\\n\n​             \\ ——————e\n\n\n\n创建并切换新分支`git checkout -b newbranch`\n\n强制切换新分支`git checkout --force newbranch` \n\n删除分支 `git branch -d nowbranch`\n\n强制删除当前分支 `git branch -D nowbranch` \n\n\n\n## 二、储藏\n\n希望在不提交的情况下修改当前版本的其他内容\n\n### 1、git stash\n\ngit shash 可以将工作区和暂存区中修改 保存在***储藏栈（stash stack）**\n\n### 2、git shash pop\n\n回复栈顶的被储存修改到*工作区*中\n\n### 3、git shash list\n\n查看储藏的修改内容\n\n\n\n## 三、\n\npush\n\npull\n\nmerge\n\nfetch\n\n","source":"_posts/Git & SVN/github-使用手册.md","raw":"---\ntitle: git 深入学习\ndate: 2013-04-24 17:07:16\ncategories: git&svn\ntags: github\nthumbnail: \"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515664615&di=e299224babfec2bfc85a87315fc28e89&src=http://a3.topitme.com/3/af/64/1128834126ba564af3o.jpg\"\n---\n\n# （一）git深入学习\n\n\n\n### 一、官方说明\n\n##### start a working area (see also: git help tutorial)\n\n- clone      Clone a repository into a new directory\n\n  > 克隆一个 repo 到一个新的目录\n\n- init       Create an empty Git repository or reinitialize（重置） an existing one\n\n  > 创建一个空的 git repo 或者重置一个\n\n  ​\n\n##### work on the current change (see also: git help everyday)\n\n- add        Add file contents to the index\n\n  > add all\n  >\n  > ```\n  > git add .\n  > ```\n\n- mv         Move or rename a file, a directory, or a symlink\n\n- reset      Reset current HEAD to the specified state\n\n  > 重置当前 HEAD 区到指定的状态\n\n- rm         Remove files from the working tree and from the index\n\n##### examine the history and state (see also: git help revisions)\n\n- bisect     Use binary search to find the commit that introduced a bug\n\n  > 使用二分法查找\n\n- grep       Print lines matching a pattern\n\n  > *grep* (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)\n\n- log        Show commit logs\n\n- show       Show various types of objects\n\n- status     Show the working tree status\n\n  > 显示当前工作树的状态\n\n  ​\n\n  ##### grow, mark and tweak your common history\n\n- branch     List, create, or delete branches（分支）\n\n- checkout   Switch branches or restore working tree files（检出）\n\n- commit     Record changes to the repository（提交到版本库）\n\n- diff       Show changes between commits, commit and working tree, etc\n\n- merge      Join two or more development histories together（合并）\n\n  > 多人开发\n\n- rebase     Reapply commits on top of another base tip\n\n- tag        Create, list, delete or verify a tag object signed with GPG\n\n##### collaborate (see also: git help workflows)\n\n- fetch      Download objects and refs from another repository\n\n  > 从远程的分支获取最新版本到本地，不会自动 merge\n  >\n  > ```\n  > #从远程的origin 的 master主分支下载最新的版本到 origin/master分支上 \n  > git fetch origin master:tmp \n  >\n  > #比较本地的 master 分支和 origin/master 分支的区别\n  > git diff tmp \n  >\n  > #合并\n  > git merge tmp\n  > ```\n  >\n  >  git fetch 相对比 git pull 安全些\n\n- pull       Fetch from and integrate with another repository or a local branch\n\n  > 从远程的分支获取最新的版本，并 merge 到本地\n  >\n  > ```\n  > git pull origin master\n  > ```\n  >\n  > **fetch + merge = pull**\n\n- push       Update remote refs along with associated objects\n\n### 二、其他用法\n\n- remote \n\n  > ```\n  > git remote    #列出已经存在的分支\n  > ```\n  >\n  > ```\n  > git remote -v #列出详细信息，每个名字后面加上地址\n  > ```\n\n### 三、具体步骤\n\n```\n$cd yourRepoDict\n$git init \n$git add .\n$git commit -m \"xxxxx\"\n$git remote add origin https://github.com/Yggdrasill-7C9/blog.git\n$git push -u origin master\n```\n\n\n\n# （二）git深入学习\n\n## 一、常见概念\n\n1、**Git 的核心是一个对象数据库。**所有提交的文件、目录、以及相关的元数据都被储存在该数据库中。\n\n* Blob 对象：储存文件内容。\n* Tree 对象：储存目录数据。\n\n2、提交图：`git log --graph`\n\n3、Git 主要有两个层面构成：\n\n* 瓷质命令（porcelain command）\n* 管道（plumbing）\n\n4、快速合并：\n\n* 有两个分支 a 和 b。其中 b 并未对内容做任何修改。所以合并 ab的时候，实际就是将指针指向了a\t。\n* 非快进操作：`--no-ff`：强制产生一次新的提交\n\na —— b —— c ——d \\\n\n​             \\ ——————e\n\n\n\n创建并切换新分支`git checkout -b newbranch`\n\n强制切换新分支`git checkout --force newbranch` \n\n删除分支 `git branch -d nowbranch`\n\n强制删除当前分支 `git branch -D nowbranch` \n\n\n\n## 二、储藏\n\n希望在不提交的情况下修改当前版本的其他内容\n\n### 1、git stash\n\ngit shash 可以将工作区和暂存区中修改 保存在***储藏栈（stash stack）**\n\n### 2、git shash pop\n\n回复栈顶的被储存修改到*工作区*中\n\n### 3、git shash list\n\n查看储藏的修改内容\n\n\n\n## 三、\n\npush\n\npull\n\nmerge\n\nfetch\n\n","slug":"Git & SVN/github-使用手册","published":1,"updated":"2018-01-16T03:14:50.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb6u000adc4m2qxfwbx2","content":"<h1 id=\"（一）git深入学习\"><a href=\"#（一）git深入学习\" class=\"headerlink\" title=\"（一）git深入学习\"></a>（一）git深入学习</h1><h3 id=\"一、官方说明\"><a href=\"#一、官方说明\" class=\"headerlink\" title=\"一、官方说明\"></a>一、官方说明</h3><h5 id=\"start-a-working-area-see-also-git-help-tutorial\"><a href=\"#start-a-working-area-see-also-git-help-tutorial\" class=\"headerlink\" title=\"start a working area (see also: git help tutorial)\"></a>start a working area (see also: git help tutorial)</h5><ul>\n<li><p>clone      Clone a repository into a new directory</p>\n<blockquote>\n<p>克隆一个 repo 到一个新的目录</p>\n</blockquote>\n</li>\n<li><p>init       Create an empty Git repository or reinitialize（重置） an existing one</p>\n<blockquote>\n<p>创建一个空的 git repo 或者重置一个</p>\n</blockquote>\n<p>​</p>\n</li>\n</ul>\n<h5 id=\"work-on-the-current-change-see-also-git-help-everyday\"><a href=\"#work-on-the-current-change-see-also-git-help-everyday\" class=\"headerlink\" title=\"work on the current change (see also: git help everyday)\"></a>work on the current change (see also: git help everyday)</h5><ul>\n<li><p>add        Add file contents to the index</p>\n<blockquote>\n<p>add all</p>\n<pre><code>git add .\n</code></pre></blockquote>\n</li>\n<li><p>mv         Move or rename a file, a directory, or a symlink</p>\n</li>\n<li><p>reset      Reset current HEAD to the specified state</p>\n<blockquote>\n<p>重置当前 HEAD 区到指定的状态</p>\n</blockquote>\n</li>\n<li><p>rm         Remove files from the working tree and from the index</p>\n</li>\n</ul>\n<h5 id=\"examine-the-history-and-state-see-also-git-help-revisions\"><a href=\"#examine-the-history-and-state-see-also-git-help-revisions\" class=\"headerlink\" title=\"examine the history and state (see also: git help revisions)\"></a>examine the history and state (see also: git help revisions)</h5><ul>\n<li><p>bisect     Use binary search to find the commit that introduced a bug</p>\n<blockquote>\n<p>使用二分法查找</p>\n</blockquote>\n</li>\n<li><p>grep       Print lines matching a pattern</p>\n<blockquote>\n<p><em>grep</em> (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)</p>\n</blockquote>\n</li>\n<li><p>log        Show commit logs</p>\n</li>\n<li><p>show       Show various types of objects</p>\n</li>\n<li><p>status     Show the working tree status</p>\n<blockquote>\n<p>显示当前工作树的状态</p>\n</blockquote>\n<p>​</p>\n<h5 id=\"grow-mark-and-tweak-your-common-history\"><a href=\"#grow-mark-and-tweak-your-common-history\" class=\"headerlink\" title=\"grow, mark and tweak your common history\"></a>grow, mark and tweak your common history</h5></li>\n<li><p>branch     List, create, or delete branches（分支）</p>\n</li>\n<li><p>checkout   Switch branches or restore working tree files（检出）</p>\n</li>\n<li><p>commit     Record changes to the repository（提交到版本库）</p>\n</li>\n<li><p>diff       Show changes between commits, commit and working tree, etc</p>\n</li>\n<li><p>merge      Join two or more development histories together（合并）</p>\n<blockquote>\n<p>多人开发</p>\n</blockquote>\n</li>\n<li><p>rebase     Reapply commits on top of another base tip</p>\n</li>\n<li><p>tag        Create, list, delete or verify a tag object signed with GPG</p>\n</li>\n</ul>\n<h5 id=\"collaborate-see-also-git-help-workflows\"><a href=\"#collaborate-see-also-git-help-workflows\" class=\"headerlink\" title=\"collaborate (see also: git help workflows)\"></a>collaborate (see also: git help workflows)</h5><ul>\n<li><p>fetch      Download objects and refs from another repository</p>\n<blockquote>\n<p>从远程的分支获取最新版本到本地，不会自动 merge</p>\n<pre><code>#从远程的origin 的 master主分支下载最新的版本到 origin/master分支上 \ngit fetch origin master:tmp \n\n#比较本地的 master 分支和 origin/master 分支的区别\ngit diff tmp \n\n#合并\ngit merge tmp\n</code></pre><p> git fetch 相对比 git pull 安全些</p>\n</blockquote>\n</li>\n<li><p>pull       Fetch from and integrate with another repository or a local branch</p>\n<blockquote>\n<p>从远程的分支获取最新的版本，并 merge 到本地</p>\n<pre><code>git pull origin master\n</code></pre><p><strong>fetch + merge = pull</strong></p>\n</blockquote>\n</li>\n<li><p>push       Update remote refs along with associated objects</p>\n</li>\n</ul>\n<h3 id=\"二、其他用法\"><a href=\"#二、其他用法\" class=\"headerlink\" title=\"二、其他用法\"></a>二、其他用法</h3><ul>\n<li><p>remote </p>\n<blockquote>\n<pre><code>git remote    #列出已经存在的分支\n</code></pre><pre><code>git remote -v #列出详细信息，每个名字后面加上地址\n</code></pre></blockquote>\n</li>\n</ul>\n<h3 id=\"三、具体步骤\"><a href=\"#三、具体步骤\" class=\"headerlink\" title=\"三、具体步骤\"></a>三、具体步骤</h3><pre><code>$cd yourRepoDict\n$git init \n$git add .\n$git commit -m &quot;xxxxx&quot;\n$git remote add origin https://github.com/Yggdrasill-7C9/blog.git\n$git push -u origin master\n</code></pre><h1 id=\"（二）git深入学习\"><a href=\"#（二）git深入学习\" class=\"headerlink\" title=\"（二）git深入学习\"></a>（二）git深入学习</h1><h2 id=\"一、常见概念\"><a href=\"#一、常见概念\" class=\"headerlink\" title=\"一、常见概念\"></a>一、常见概念</h2><p>1、<strong>Git 的核心是一个对象数据库。</strong>所有提交的文件、目录、以及相关的元数据都被储存在该数据库中。</p>\n<ul>\n<li>Blob 对象：储存文件内容。</li>\n<li>Tree 对象：储存目录数据。</li>\n</ul>\n<p>2、提交图：<code>git log --graph</code></p>\n<p>3、Git 主要有两个层面构成：</p>\n<ul>\n<li>瓷质命令（porcelain command）</li>\n<li>管道（plumbing）</li>\n</ul>\n<p>4、快速合并：</p>\n<ul>\n<li>有两个分支 a 和 b。其中 b 并未对内容做任何修改。所以合并 ab的时候，实际就是将指针指向了a    。</li>\n<li>非快进操作：<code>--no-ff</code>：强制产生一次新的提交</li>\n</ul>\n<p>a —— b —— c ——d \\</p>\n<p>​             \\ ——————e</p>\n<p>创建并切换新分支<code>git checkout -b newbranch</code></p>\n<p>强制切换新分支<code>git checkout --force newbranch</code> </p>\n<p>删除分支 <code>git branch -d nowbranch</code></p>\n<p>强制删除当前分支 <code>git branch -D nowbranch</code> </p>\n<h2 id=\"二、储藏\"><a href=\"#二、储藏\" class=\"headerlink\" title=\"二、储藏\"></a>二、储藏</h2><p>希望在不提交的情况下修改当前版本的其他内容</p>\n<h3 id=\"1、git-stash\"><a href=\"#1、git-stash\" class=\"headerlink\" title=\"1、git stash\"></a>1、git stash</h3><p>git shash 可以将工作区和暂存区中修改 保存在<strong>*储藏栈（stash stack）</strong></p>\n<h3 id=\"2、git-shash-pop\"><a href=\"#2、git-shash-pop\" class=\"headerlink\" title=\"2、git shash pop\"></a>2、git shash pop</h3><p>回复栈顶的被储存修改到<em>工作区</em>中</p>\n<h3 id=\"3、git-shash-list\"><a href=\"#3、git-shash-list\" class=\"headerlink\" title=\"3、git shash list\"></a>3、git shash list</h3><p>查看储藏的修改内容</p>\n<h2 id=\"三、\"><a href=\"#三、\" class=\"headerlink\" title=\"三、\"></a>三、</h2><p>push</p>\n<p>pull</p>\n<p>merge</p>\n<p>fetch</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<h1 id=\"（一）git深入学习\"><a href=\"#（一）git深入学习\" class=\"headerlink\" title=\"（一）git深入学习\"></a>（一）git深入学习</h1><h3 id=\"一、官方说明\"><a href=\"#一、官方说明\" class=\"headerlink\" title=\"一、官方说明\"></a>一、官方说明</h3><h5 id=\"start-a-working-area-see-also-git-help-tutorial\"><a href=\"#start-a-working-area-see-also-git-help-tutorial\" class=\"headerlink\" title=\"start a working area (see also: git help tutorial)\"></a>start a working area (see also: git help tutorial)</h5><ul>\n<li><p>clone      Clone a repository into a new directory</p>\n<blockquote>\n<p>克隆一个 repo 到一个新的目录</p>\n</blockquote>\n</li>\n<li><p>init       Create an empty Git repository or reinitialize（重置） an existing one</p>\n<blockquote>\n<p>创建一个空的 git repo 或者重置一个</p>\n</blockquote>\n<p>​</p>\n</li>\n</ul>\n<h5 id=\"work-on-the-current-change-see-also-git-help-everyday\"><a href=\"#work-on-the-current-change-see-also-git-help-everyday\" class=\"headerlink\" title=\"work on the current change (see also: git help everyday)\"></a>work on the current change (see also: git help everyday)</h5><ul>\n<li><p>add        Add file contents to the index</p>\n<blockquote>\n<p>add all</p>\n<pre><code>git add .\n</code></pre></blockquote>\n</li>\n<li><p>mv         Move or rename a file, a directory, or a symlink</p>\n</li>\n<li><p>reset      Reset current HEAD to the specified state</p>\n<blockquote>\n<p>重置当前 HEAD 区到指定的状态</p>\n</blockquote>\n</li>\n<li><p>rm         Remove files from the working tree and from the index</p>\n</li>\n</ul>\n<h5 id=\"examine-the-history-and-state-see-also-git-help-revisions\"><a href=\"#examine-the-history-and-state-see-also-git-help-revisions\" class=\"headerlink\" title=\"examine the history and state (see also: git help revisions)\"></a>examine the history and state (see also: git help revisions)</h5><ul>\n<li><p>bisect     Use binary search to find the commit that introduced a bug</p>\n<blockquote>\n<p>使用二分法查找</p>\n</blockquote>\n</li>\n<li><p>grep       Print lines matching a pattern</p>\n<blockquote>\n<p><em>grep</em> (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)</p>\n</blockquote>\n</li>\n<li><p>log        Show commit logs</p>\n</li>\n<li><p>show       Show various types of objects</p>\n</li>\n<li><p>status     Show the working tree status</p>\n<blockquote>\n<p>显示当前工作树的状态</p>\n</blockquote>\n<p>​</p>\n<h5 id=\"grow-mark-and-tweak-your-common-history\"><a href=\"#grow-mark-and-tweak-your-common-history\" class=\"headerlink\" title=\"grow, mark and tweak your common history\"></a>grow, mark and tweak your common history</h5></li>\n<li><p>branch     List, create, or delete branches（分支）</p>\n</li>\n<li><p>checkout   Switch branches or restore working tree files（检出）</p>\n</li>\n<li><p>commit     Record changes to the repository（提交到版本库）</p>\n</li>\n<li><p>diff       Show changes between commits, commit and working tree, etc</p>\n</li>\n<li><p>merge      Join two or more development histories together（合并）</p>\n<blockquote>\n<p>多人开发</p>\n</blockquote>\n</li>\n<li><p>rebase     Reapply commits on top of another base tip</p>\n</li>\n<li><p>tag        Create, list, delete or verify a tag object signed with GPG</p>\n</li>\n</ul>\n<h5 id=\"collaborate-see-also-git-help-workflows\"><a href=\"#collaborate-see-also-git-help-workflows\" class=\"headerlink\" title=\"collaborate (see also: git help workflows)\"></a>collaborate (see also: git help workflows)</h5><ul>\n<li><p>fetch      Download objects and refs from another repository</p>\n<blockquote>\n<p>从远程的分支获取最新版本到本地，不会自动 merge</p>\n<pre><code>#从远程的origin 的 master主分支下载最新的版本到 origin/master分支上 \ngit fetch origin master:tmp \n\n#比较本地的 master 分支和 origin/master 分支的区别\ngit diff tmp \n\n#合并\ngit merge tmp\n</code></pre><p> git fetch 相对比 git pull 安全些</p>\n</blockquote>\n</li>\n<li><p>pull       Fetch from and integrate with another repository or a local branch</p>\n<blockquote>\n<p>从远程的分支获取最新的版本，并 merge 到本地</p>\n<pre><code>git pull origin master\n</code></pre><p><strong>fetch + merge = pull</strong></p>\n</blockquote>\n</li>\n<li><p>push       Update remote refs along with associated objects</p>\n</li>\n</ul>\n<h3 id=\"二、其他用法\"><a href=\"#二、其他用法\" class=\"headerlink\" title=\"二、其他用法\"></a>二、其他用法</h3><ul>\n<li><p>remote </p>\n<blockquote>\n<pre><code>git remote    #列出已经存在的分支\n</code></pre><pre><code>git remote -v #列出详细信息，每个名字后面加上地址\n</code></pre></blockquote>\n</li>\n</ul>\n<h3 id=\"三、具体步骤\"><a href=\"#三、具体步骤\" class=\"headerlink\" title=\"三、具体步骤\"></a>三、具体步骤</h3><pre><code>$cd yourRepoDict\n$git init \n$git add .\n$git commit -m &quot;xxxxx&quot;\n$git remote add origin https://github.com/Yggdrasill-7C9/blog.git\n$git push -u origin master\n</code></pre><h1 id=\"（二）git深入学习\"><a href=\"#（二）git深入学习\" class=\"headerlink\" title=\"（二）git深入学习\"></a>（二）git深入学习</h1><h2 id=\"一、常见概念\"><a href=\"#一、常见概念\" class=\"headerlink\" title=\"一、常见概念\"></a>一、常见概念</h2><p>1、<strong>Git 的核心是一个对象数据库。</strong>所有提交的文件、目录、以及相关的元数据都被储存在该数据库中。</p>\n<ul>\n<li>Blob 对象：储存文件内容。</li>\n<li>Tree 对象：储存目录数据。</li>\n</ul>\n<p>2、提交图：<code>git log --graph</code></p>\n<p>3、Git 主要有两个层面构成：</p>\n<ul>\n<li>瓷质命令（porcelain command）</li>\n<li>管道（plumbing）</li>\n</ul>\n<p>4、快速合并：</p>\n<ul>\n<li>有两个分支 a 和 b。其中 b 并未对内容做任何修改。所以合并 ab的时候，实际就是将指针指向了a    。</li>\n<li>非快进操作：<code>--no-ff</code>：强制产生一次新的提交</li>\n</ul>\n<p>a —— b —— c ——d \\</p>\n<p>​             \\ ——————e</p>\n<p>创建并切换新分支<code>git checkout -b newbranch</code></p>\n<p>强制切换新分支<code>git checkout --force newbranch</code> </p>\n<p>删除分支 <code>git branch -d nowbranch</code></p>\n<p>强制删除当前分支 <code>git branch -D nowbranch</code> </p>\n<h2 id=\"二、储藏\"><a href=\"#二、储藏\" class=\"headerlink\" title=\"二、储藏\"></a>二、储藏</h2><p>希望在不提交的情况下修改当前版本的其他内容</p>\n<h3 id=\"1、git-stash\"><a href=\"#1、git-stash\" class=\"headerlink\" title=\"1、git stash\"></a>1、git stash</h3><p>git shash 可以将工作区和暂存区中修改 保存在<strong>*储藏栈（stash stack）</strong></p>\n<h3 id=\"2、git-shash-pop\"><a href=\"#2、git-shash-pop\" class=\"headerlink\" title=\"2、git shash pop\"></a>2、git shash pop</h3><p>回复栈顶的被储存修改到<em>工作区</em>中</p>\n<h3 id=\"3、git-shash-list\"><a href=\"#3、git-shash-list\" class=\"headerlink\" title=\"3、git shash list\"></a>3、git shash list</h3><p>查看储藏的修改内容</p>\n<h2 id=\"三、\"><a href=\"#三、\" class=\"headerlink\" title=\"三、\"></a>三、</h2><p>push</p>\n<p>pull</p>\n<p>merge</p>\n<p>fetch</p>\n"},{"title":"gem、rvm使用心得","date":"2013-04-25T09:06:37.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515664615&di=81c30abd5565396089d0aae99a62f8d2&src=http://a3.topitme.com/0/13/0b/11293612116520b130o.jpg","_content":"\n# gem,rvm使用心得\n\n##### rvm 和 gem 的关系\n\n- rvm 全称是 Ruby Version Manager，即Ruby 版本管理器。\n- gem，即RubyGems，是一个用于对 Ruby 组件进行打包 Ruby 的打包系统，可以从远程服务器下载并安装 Rails。\n\n> [Ruby](https://baike.baidu.com/item/Ruby) on Rails 是一个用于开发数据库驱动的网络应用程序的完整框架。Rails基于[MVC](https://baike.baidu.com/item/MVC)（模型- 视图- 控制器）设计模式。从视图中的[Ajax](https://baike.baidu.com/item/Ajax)应用，到控制器中的访问请求和反馈，到封装数据库的模型，Rails 为你提供一个纯Ruby的开发环境。发布网站时，你只需要一个数据库和一个网络服务器即可。\n>\n> Ruby On Rails是一个用于编写网络应用程序的软件包.它基于一种计算机软件语言Ruby,给程序开发人员提供了强大的框架支持.你可以用比以前少的多的代码和 短的多的时间编写出一流的网络软件。\n\n\n\n**查看gem 源**：\n\n```\n$ gem source\n```\n\n|      |                     |      |\n| ---- | ------------------- | ---- |\n| -a   | --add SOURCE_URI    | 添加源  |\n| -l   | --list              | 列表   |\n| -r   | --remove SOURCE_URI | 删除   |\n| -c   | --clear-all         | 清除所有 |\n| -u   | --update            | 更新   |\n\n```\n$ gem sources -r http://rubygems.org/ #删除默认的源\n\n$ gem sources -a https://ruby.taobao.org #添加淘宝源\n```\n\n\n\n- Mac OSX 必须要安装的库\n\n  ```\n  $ brew install libxml2 libxslt libiconv\n  ```\n\n- 载入 RVM 环境\n\n  ```\n  $ source ~/.rvm/scripts/rvm\n  ```\n\n- 用 RVM 安装 ruby 环境\n\n  ```\n  $ rvm requirements\n  $ rvm install 2.3.0\n  ```\n\n- 安装 Bundler\n\n  ```\n  $ gem install bundler\n  ```\n\n- 安装 Rails 环境\n\n  ```\n  $ gem install rails\n  ```\n\n- homebrew 安装 ruby\n\n  ```\n  $ brew install ruby\n  ```\n\n- RVM 安装\n\n  ```\n  $ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n  $ \\curl -sSL https://get.rvm.io | bash -s stable\n  $ source ~/.bashrc\n  $ source ~/.bash_profile\n  ```\n\n- 列出以及 ruby 版本\n\n  ```\n  $ rvm list known\n  ```\n\n- 切换 ruby 版本\n\n  ```\n  $ rvm use 2.2.0\n  ```\n\n  ​\n\n- 修改 RVM 下载 Ruby 的源，到 Ruby China 的镜像:\n\n  ```\n  $ echo \"ruby_url=https://cache.ruby-china.org/pub/ruby\" > ~/.rvm/user/db\n  ```\n\n  ​\n\n  [1]: https://ruby-china.org/wiki/rvm-guide\t\"ruby wiki\"\n  [2]: https://www.ruby-toolbox.com/\t\"热门的 Gem\"\n\n  ​","source":"_posts/Linux/gem、rvm使用心得.md","raw":"---\ntitle: gem、rvm使用心得\ndate: 2013-04-25 17:06:37\ncategories: Linux\ntags:\n- gem\n- rvm\nthumbnail: \"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515664615&di=81c30abd5565396089d0aae99a62f8d2&src=http://a3.topitme.com/0/13/0b/11293612116520b130o.jpg\"\n---\n\n# gem,rvm使用心得\n\n##### rvm 和 gem 的关系\n\n- rvm 全称是 Ruby Version Manager，即Ruby 版本管理器。\n- gem，即RubyGems，是一个用于对 Ruby 组件进行打包 Ruby 的打包系统，可以从远程服务器下载并安装 Rails。\n\n> [Ruby](https://baike.baidu.com/item/Ruby) on Rails 是一个用于开发数据库驱动的网络应用程序的完整框架。Rails基于[MVC](https://baike.baidu.com/item/MVC)（模型- 视图- 控制器）设计模式。从视图中的[Ajax](https://baike.baidu.com/item/Ajax)应用，到控制器中的访问请求和反馈，到封装数据库的模型，Rails 为你提供一个纯Ruby的开发环境。发布网站时，你只需要一个数据库和一个网络服务器即可。\n>\n> Ruby On Rails是一个用于编写网络应用程序的软件包.它基于一种计算机软件语言Ruby,给程序开发人员提供了强大的框架支持.你可以用比以前少的多的代码和 短的多的时间编写出一流的网络软件。\n\n\n\n**查看gem 源**：\n\n```\n$ gem source\n```\n\n|      |                     |      |\n| ---- | ------------------- | ---- |\n| -a   | --add SOURCE_URI    | 添加源  |\n| -l   | --list              | 列表   |\n| -r   | --remove SOURCE_URI | 删除   |\n| -c   | --clear-all         | 清除所有 |\n| -u   | --update            | 更新   |\n\n```\n$ gem sources -r http://rubygems.org/ #删除默认的源\n\n$ gem sources -a https://ruby.taobao.org #添加淘宝源\n```\n\n\n\n- Mac OSX 必须要安装的库\n\n  ```\n  $ brew install libxml2 libxslt libiconv\n  ```\n\n- 载入 RVM 环境\n\n  ```\n  $ source ~/.rvm/scripts/rvm\n  ```\n\n- 用 RVM 安装 ruby 环境\n\n  ```\n  $ rvm requirements\n  $ rvm install 2.3.0\n  ```\n\n- 安装 Bundler\n\n  ```\n  $ gem install bundler\n  ```\n\n- 安装 Rails 环境\n\n  ```\n  $ gem install rails\n  ```\n\n- homebrew 安装 ruby\n\n  ```\n  $ brew install ruby\n  ```\n\n- RVM 安装\n\n  ```\n  $ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n  $ \\curl -sSL https://get.rvm.io | bash -s stable\n  $ source ~/.bashrc\n  $ source ~/.bash_profile\n  ```\n\n- 列出以及 ruby 版本\n\n  ```\n  $ rvm list known\n  ```\n\n- 切换 ruby 版本\n\n  ```\n  $ rvm use 2.2.0\n  ```\n\n  ​\n\n- 修改 RVM 下载 Ruby 的源，到 Ruby China 的镜像:\n\n  ```\n  $ echo \"ruby_url=https://cache.ruby-china.org/pub/ruby\" > ~/.rvm/user/db\n  ```\n\n  ​\n\n  [1]: https://ruby-china.org/wiki/rvm-guide\t\"ruby wiki\"\n  [2]: https://www.ruby-toolbox.com/\t\"热门的 Gem\"\n\n  ​","slug":"Linux/gem、rvm使用心得","published":1,"updated":"2018-01-16T03:16:45.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb6w000ddc4myzta63e3","content":"<h1 id=\"gem-rvm使用心得\"><a href=\"#gem-rvm使用心得\" class=\"headerlink\" title=\"gem,rvm使用心得\"></a>gem,rvm使用心得</h1><h5 id=\"rvm-和-gem-的关系\"><a href=\"#rvm-和-gem-的关系\" class=\"headerlink\" title=\"rvm 和 gem 的关系\"></a>rvm 和 gem 的关系</h5><ul>\n<li>rvm 全称是 Ruby Version Manager，即Ruby 版本管理器。</li>\n<li>gem，即RubyGems，是一个用于对 Ruby 组件进行打包 Ruby 的打包系统，可以从远程服务器下载并安装 Rails。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/Ruby\" target=\"_blank\" rel=\"noopener\">Ruby</a> on Rails 是一个用于开发数据库驱动的网络应用程序的完整框架。Rails基于<a href=\"https://baike.baidu.com/item/MVC\" target=\"_blank\" rel=\"noopener\">MVC</a>（模型- 视图- 控制器）设计模式。从视图中的<a href=\"https://baike.baidu.com/item/Ajax\" target=\"_blank\" rel=\"noopener\">Ajax</a>应用，到控制器中的访问请求和反馈，到封装数据库的模型，Rails 为你提供一个纯Ruby的开发环境。发布网站时，你只需要一个数据库和一个网络服务器即可。</p>\n<p>Ruby On Rails是一个用于编写网络应用程序的软件包.它基于一种计算机软件语言Ruby,给程序开发人员提供了强大的框架支持.你可以用比以前少的多的代码和 短的多的时间编写出一流的网络软件。</p>\n</blockquote>\n<p><strong>查看gem 源</strong>：</p>\n<pre><code>$ gem source\n</code></pre><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>–add SOURCE_URI</td>\n<td>添加源</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>–list</td>\n<td>列表</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>–remove SOURCE_URI</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>–clear-all</td>\n<td>清除所有</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>–update</td>\n<td>更新</td>\n</tr>\n</tbody>\n</table>\n<pre><code>$ gem sources -r http://rubygems.org/ #删除默认的源\n\n$ gem sources -a https://ruby.taobao.org #添加淘宝源\n</code></pre><ul>\n<li><p>Mac OSX 必须要安装的库</p>\n<pre><code>$ brew install libxml2 libxslt libiconv\n</code></pre></li>\n<li><p>载入 RVM 环境</p>\n<pre><code>$ source ~/.rvm/scripts/rvm\n</code></pre></li>\n<li><p>用 RVM 安装 ruby 环境</p>\n<pre><code>$ rvm requirements\n$ rvm install 2.3.0\n</code></pre></li>\n<li><p>安装 Bundler</p>\n<pre><code>$ gem install bundler\n</code></pre></li>\n<li><p>安装 Rails 环境</p>\n<pre><code>$ gem install rails\n</code></pre></li>\n<li><p>homebrew 安装 ruby</p>\n<pre><code>$ brew install ruby\n</code></pre></li>\n<li><p>RVM 安装</p>\n<pre><code>$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n$ \\curl -sSL https://get.rvm.io | bash -s stable\n$ source ~/.bashrc\n$ source ~/.bash_profile\n</code></pre></li>\n<li><p>列出以及 ruby 版本</p>\n<pre><code>$ rvm list known\n</code></pre></li>\n<li><p>切换 ruby 版本</p>\n<pre><code>$ rvm use 2.2.0\n</code></pre><p>​</p>\n</li>\n<li><p>修改 RVM 下载 Ruby 的源，到 Ruby China 的镜像:</p>\n<pre><code>$ echo &quot;ruby_url=https://cache.ruby-china.org/pub/ruby&quot; &gt; ~/.rvm/user/db\n</code></pre><p>​</p>\n</li>\n</ul>\n<p>  ​</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<h1 id=\"gem-rvm使用心得\"><a href=\"#gem-rvm使用心得\" class=\"headerlink\" title=\"gem,rvm使用心得\"></a>gem,rvm使用心得</h1><h5 id=\"rvm-和-gem-的关系\"><a href=\"#rvm-和-gem-的关系\" class=\"headerlink\" title=\"rvm 和 gem 的关系\"></a>rvm 和 gem 的关系</h5><ul>\n<li>rvm 全称是 Ruby Version Manager，即Ruby 版本管理器。</li>\n<li>gem，即RubyGems，是一个用于对 Ruby 组件进行打包 Ruby 的打包系统，可以从远程服务器下载并安装 Rails。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/Ruby\" target=\"_blank\" rel=\"noopener\">Ruby</a> on Rails 是一个用于开发数据库驱动的网络应用程序的完整框架。Rails基于<a href=\"https://baike.baidu.com/item/MVC\" target=\"_blank\" rel=\"noopener\">MVC</a>（模型- 视图- 控制器）设计模式。从视图中的<a href=\"https://baike.baidu.com/item/Ajax\" target=\"_blank\" rel=\"noopener\">Ajax</a>应用，到控制器中的访问请求和反馈，到封装数据库的模型，Rails 为你提供一个纯Ruby的开发环境。发布网站时，你只需要一个数据库和一个网络服务器即可。</p>\n<p>Ruby On Rails是一个用于编写网络应用程序的软件包.它基于一种计算机软件语言Ruby,给程序开发人员提供了强大的框架支持.你可以用比以前少的多的代码和 短的多的时间编写出一流的网络软件。</p>\n</blockquote>\n<p><strong>查看gem 源</strong>：</p>\n<pre><code>$ gem source\n</code></pre><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>–add SOURCE_URI</td>\n<td>添加源</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>–list</td>\n<td>列表</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>–remove SOURCE_URI</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>–clear-all</td>\n<td>清除所有</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>–update</td>\n<td>更新</td>\n</tr>\n</tbody>\n</table>\n<pre><code>$ gem sources -r http://rubygems.org/ #删除默认的源\n\n$ gem sources -a https://ruby.taobao.org #添加淘宝源\n</code></pre><ul>\n<li><p>Mac OSX 必须要安装的库</p>\n<pre><code>$ brew install libxml2 libxslt libiconv\n</code></pre></li>\n<li><p>载入 RVM 环境</p>\n<pre><code>$ source ~/.rvm/scripts/rvm\n</code></pre></li>\n<li><p>用 RVM 安装 ruby 环境</p>\n<pre><code>$ rvm requirements\n$ rvm install 2.3.0\n</code></pre></li>\n<li><p>安装 Bundler</p>\n<pre><code>$ gem install bundler\n</code></pre></li>\n<li><p>安装 Rails 环境</p>\n<pre><code>$ gem install rails\n</code></pre></li>\n<li><p>homebrew 安装 ruby</p>\n<pre><code>$ brew install ruby\n</code></pre></li>\n<li><p>RVM 安装</p>\n<pre><code>$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n$ \\curl -sSL https://get.rvm.io | bash -s stable\n$ source ~/.bashrc\n$ source ~/.bash_profile\n</code></pre></li>\n<li><p>列出以及 ruby 版本</p>\n<pre><code>$ rvm list known\n</code></pre></li>\n<li><p>切换 ruby 版本</p>\n<pre><code>$ rvm use 2.2.0\n</code></pre><p>​</p>\n</li>\n<li><p>修改 RVM 下载 Ruby 的源，到 Ruby China 的镜像:</p>\n<pre><code>$ echo &quot;ruby_url=https://cache.ruby-china.org/pub/ruby&quot; &gt; ~/.rvm/user/db\n</code></pre><p>​</p>\n</li>\n</ul>\n<p>  ​</p>\n"},{"title":"分享几个常用的插件工具","date":"2018-01-12T07:12:25.000Z","thumbnail":"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1084700340,387885401&fm=27&gp=0.jpg","_content":"\n\n\n# 分享几个我常用的插件工具\n\n## 一、gem\n\n### 1、synx \n\n1. 介绍：\n\n   synx：同步 xcode 工程中的 group 至当前的 finder 中\n\n2. 安装：\n\n   ```shell\n   $ gem install synx\n   ```\n\n\n3. 使用：\n\n   ```shell\n   $ synx your/product/path/project.xcodeproj #项目中有 pod 时一样用xcodeproj\n   ```\n\n4. 注意事项：\n\n   导入 .a 和 .framework文件时，或者 支付宝 SDK 时可能会出现一些问题","source":"_posts/Linux/分享几个常用的插件工具.md","raw":"---\ntitle: 分享几个常用的插件工具\ndate: 2018-01-12 15:12:25\ncategories: Linux\ntags: \n- tools\n- plugins\nthumbnail: \"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1084700340,387885401&fm=27&gp=0.jpg\"\n---\n\n\n\n# 分享几个我常用的插件工具\n\n## 一、gem\n\n### 1、synx \n\n1. 介绍：\n\n   synx：同步 xcode 工程中的 group 至当前的 finder 中\n\n2. 安装：\n\n   ```shell\n   $ gem install synx\n   ```\n\n\n3. 使用：\n\n   ```shell\n   $ synx your/product/path/project.xcodeproj #项目中有 pod 时一样用xcodeproj\n   ```\n\n4. 注意事项：\n\n   导入 .a 和 .framework文件时，或者 支付宝 SDK 时可能会出现一些问题","slug":"Linux/分享几个常用的插件工具","published":1,"updated":"2018-01-16T03:16:25.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb71000edc4mpho1qfdb","content":"<h1 id=\"分享几个我常用的插件工具\"><a href=\"#分享几个我常用的插件工具\" class=\"headerlink\" title=\"分享几个我常用的插件工具\"></a>分享几个我常用的插件工具</h1><h2 id=\"一、gem\"><a href=\"#一、gem\" class=\"headerlink\" title=\"一、gem\"></a>一、gem</h2><h3 id=\"1、synx\"><a href=\"#1、synx\" class=\"headerlink\" title=\"1、synx\"></a>1、synx</h3><ol>\n<li><p>介绍：</p>\n<p>synx：同步 xcode 工程中的 group 至当前的 finder 中</p>\n</li>\n<li><p>安装：</p>\n<pre><code class=\"shell\">$ gem install synx\n</code></pre>\n</li>\n</ol>\n<ol>\n<li><p>使用：</p>\n<pre><code class=\"shell\">$ synx your/product/path/project.xcodeproj #项目中有 pod 时一样用xcodeproj\n</code></pre>\n</li>\n<li><p>注意事项：</p>\n<p>导入 .a 和 .framework文件时，或者 支付宝 SDK 时可能会出现一些问题</p>\n</li>\n</ol>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<h1 id=\"分享几个我常用的插件工具\"><a href=\"#分享几个我常用的插件工具\" class=\"headerlink\" title=\"分享几个我常用的插件工具\"></a>分享几个我常用的插件工具</h1><h2 id=\"一、gem\"><a href=\"#一、gem\" class=\"headerlink\" title=\"一、gem\"></a>一、gem</h2><h3 id=\"1、synx\"><a href=\"#1、synx\" class=\"headerlink\" title=\"1、synx\"></a>1、synx</h3><ol>\n<li><p>介绍：</p>\n<p>synx：同步 xcode 工程中的 group 至当前的 finder 中</p>\n</li>\n<li><p>安装：</p>\n<pre><code class=\"shell\">$ gem install synx\n</code></pre>\n</li>\n</ol>\n<ol>\n<li><p>使用：</p>\n<pre><code class=\"shell\">$ synx your/product/path/project.xcodeproj #项目中有 pod 时一样用xcodeproj\n</code></pre>\n</li>\n<li><p>注意事项：</p>\n<p>导入 .a 和 .framework文件时，或者 支付宝 SDK 时可能会出现一些问题</p>\n</li>\n</ol>\n"},{"title":"cUrl使用心得","date":"2018-01-13T06:32:40.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1516119417386&di=f9810c82af31ee64a32e2e4ca05c91bb&imgtype=0&src=http%3A%2F%2Fwww.wmpic.me%2Fwp-content%2Fuploads%2F2014%2F03%2F20140325103402919.jpg","_content":"\n# 一、常用参数\n\n```shell\n# -i：include全部HTTP报文\n# -v：显示请求过程\n# -d：HTTP POST DATA \n# -X：自定义请求方法。如-X POST\n# -H：自定义请求头 如 -H \"Content-type: application/json\"\n# -G： --get  Send the -d data with a HTTP GET (H)\n# -o：输出\n# -s：静音模式，不输出任何东西\n# -S, --show-error    Show error. With -s, make curl show errors when they occur\n# -f, --fail         连接失败时不显示http错误 (H)\n\n# 调试的话暂时用到这么多，其他的命令想到在更。这种东西可以直接看英文文档。\n```\n\n\n\n# 二、get 请求\n\n```shell\n# 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地\ncurl \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"  \n\n# 显示全部信息:包括起始行、响应头、响应体\n# -i: --include       Include protocol headers in the output (H/F)\ncurl -i \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"\n\n# 显示get请求全过程解析 *表示解析过程  >表示请求 <表示响应 \n# -v: --verbose 冗长的\ncurl -v \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\" #--verbose \n```\n\n\n\n# 三、post请求\n\n```shell\n#  -d: --data DATA     HTTP POST data (H)\ncurl -d \"param1=value1&param2=value2\" \"http://www.baidu.com\"\n```\n\n\n\n# 四、JSON 格式的 post 请求\n\n```shell\n# -H: --header LINE   Pass custom header LINE to server (H)\n# -X: --request COMMAND  Specify request command to use\n# -d: --data DATA     HTTP POST data (H)\ncurl -l -H \"Content-type: application/json\" -X POST -d '{\"phone\":\"13521389587\",\"password\":\"test\"}' http://domain/apis/users.json\n```\n\n\n\n# 五、实例\n\n```\nURL ：http://7xssni.com1.z0.glb.clouddn.com/home.txt\n```\n\n```\n{\n  \"headUrl\" : {\n    \"headList\" : [\n      \"http://7xssni.com1.z0.glb.clouddn.com/home1.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home2.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home3.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home4.jpg\"\n    ]\n  },\n  \"homeUrl\" : {\n    \"dataList\" : [\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/1.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"PVC实体塑木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/2.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"3D印花地毯\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/3.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"金刚木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/4.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典菱形软包\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/5.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典防水木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/6.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典花纹墙纸\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/7.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典使用木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/8.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"非洲柚木地板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      }\n    ]\n  }\n}\n```\n\n\n\n\n\n## 五、常用命令：\n\n```\n -a, --append        Append to target file when uploading (F/SFTP)\n -E, --cert CERT[:PASSWD]  Client certificate file and password (SSL)\n -K, --config FILE   Read config from FILE\n -C, --continue-at OFFSET  Resumed transfer OFFSET\n -b, --cookie STRING/FILE  Read cookies from STRING/FILE (H)\n -c, --cookie-jar FILE  Write cookies to FILE after operation (H)\n -d, --data DATA     HTTP POST data (H)\n -D, --dump-header FILE  Write the received headers to FILE\n -f, --fail          Fail silently (no output at all) on HTTP errors (H)\n -F, --form CONTENT  Specify HTTP multipart POST data (H)\n -P, --ftp-port ADR  Use PORT with given address instead of PASV (F)\n -G, --get           Send the -d data with a HTTP GET (H)\n -g, --globoff       Disable URL sequences and ranges using {} and []\n -H, --header LINE   Pass custom header LINE to server (H)\n -I, --head          Show document info only\n -h, --help          This help text\n -i, --include       Include protocol headers in the output (H/F)\n -k, --insecure      Allow connections to SSL sites without certs (H)\n -j, --junk-session-cookies  Ignore session cookies read from file (H)\n -l, --list-only     List only mode (F/POP3)\n -L, --location      Follow redirects (H)\n -M, --manual        Display the full manual\n -m, --max-time SECONDS  Maximum time allowed for the transfer\n -n, --netrc         Must read .netrc for user name and password\n -N, --no-buffer     Disable buffering of the output stream\n -o, --output FILE   Write to FILE instead of stdout\n -U, --proxy-user USER[:PASSWORD]  Proxy user and password\n     --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port\n -p, --proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)\n     --pubkey KEY    Public key file name (SSH)\n -Q, --quote CMD     Send command(s) to server before transfer (F/SFTP)\n     --random-file FILE  File for reading random data from (SSL)\n -r, --range RANGE   Retrieve only the bytes within RANGE\n     --raw           Do HTTP \"raw\"; no transfer decoding (H)\n -e, --referer       Referer URL (H)\n -J, --remote-header-name  Use the header-provided filename (H)\n -O, --remote-name   Write output to a file named as the remote file\n     --remote-name-all  Use the remote file name for all URLs\n -R, --remote-time   Set the remote file's time on the local output\n -X, --request COMMAND  Specify request command to use\n -S, --show-error    Show error. With -s, make curl show errors when they occur\n -s, --silent        Silent mode (don't output anything)\n -Y, --speed-limit RATE  Stop transfers below RATE for 'speed-time' secs\n -y, --speed-time SECONDS  Trigger 'speed-limit' abort after SECONDS (default: 30)\n -t, --telnet-option OPT=VAL  Set telnet option\n     --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be >512)\n     --tftp-no-options  Do not send TFTP options requests\n -z, --time-cond TIME   Transfer based on a time condition\n -T, --upload-file FILE  Transfer FILE to destination\n     --url URL       URL to work with\n -B, --use-ascii     Use ASCII/text transfer\n -u, --user USER[:PASSWORD]  Server user and password\n -A, --user-agent STRING  Send User-Agent STRING to server (H)\n -v, --verbose       Make the operation more talkative\n -V, --version       Show version number and quit\n -w, --write-out FORMAT  Use output FORMAT after completion\n -q, --disable       Disable .curlrc (must be first parameter)\n```\n\n","source":"_posts/Linux/cUrl使用心得.md","raw":"---\ntitle: cUrl使用心得\ndate: 2018-01-13 14:32:40\ntags: cUrl\ncategories: Linux\nthumbnail: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1516119417386&di=f9810c82af31ee64a32e2e4ca05c91bb&imgtype=0&src=http%3A%2F%2Fwww.wmpic.me%2Fwp-content%2Fuploads%2F2014%2F03%2F20140325103402919.jpg\n---\n\n# 一、常用参数\n\n```shell\n# -i：include全部HTTP报文\n# -v：显示请求过程\n# -d：HTTP POST DATA \n# -X：自定义请求方法。如-X POST\n# -H：自定义请求头 如 -H \"Content-type: application/json\"\n# -G： --get  Send the -d data with a HTTP GET (H)\n# -o：输出\n# -s：静音模式，不输出任何东西\n# -S, --show-error    Show error. With -s, make curl show errors when they occur\n# -f, --fail         连接失败时不显示http错误 (H)\n\n# 调试的话暂时用到这么多，其他的命令想到在更。这种东西可以直接看英文文档。\n```\n\n\n\n# 二、get 请求\n\n```shell\n# 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地\ncurl \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"  \n\n# 显示全部信息:包括起始行、响应头、响应体\n# -i: --include       Include protocol headers in the output (H/F)\ncurl -i \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"\n\n# 显示get请求全过程解析 *表示解析过程  >表示请求 <表示响应 \n# -v: --verbose 冗长的\ncurl -v \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\" #--verbose \n```\n\n\n\n# 三、post请求\n\n```shell\n#  -d: --data DATA     HTTP POST data (H)\ncurl -d \"param1=value1&param2=value2\" \"http://www.baidu.com\"\n```\n\n\n\n# 四、JSON 格式的 post 请求\n\n```shell\n# -H: --header LINE   Pass custom header LINE to server (H)\n# -X: --request COMMAND  Specify request command to use\n# -d: --data DATA     HTTP POST data (H)\ncurl -l -H \"Content-type: application/json\" -X POST -d '{\"phone\":\"13521389587\",\"password\":\"test\"}' http://domain/apis/users.json\n```\n\n\n\n# 五、实例\n\n```\nURL ：http://7xssni.com1.z0.glb.clouddn.com/home.txt\n```\n\n```\n{\n  \"headUrl\" : {\n    \"headList\" : [\n      \"http://7xssni.com1.z0.glb.clouddn.com/home1.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home2.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home3.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home4.jpg\"\n    ]\n  },\n  \"homeUrl\" : {\n    \"dataList\" : [\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/1.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"PVC实体塑木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/2.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"3D印花地毯\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/3.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"金刚木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/4.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典菱形软包\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/5.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典防水木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/6.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典花纹墙纸\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/7.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典使用木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/8.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"非洲柚木地板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      }\n    ]\n  }\n}\n```\n\n\n\n\n\n## 五、常用命令：\n\n```\n -a, --append        Append to target file when uploading (F/SFTP)\n -E, --cert CERT[:PASSWD]  Client certificate file and password (SSL)\n -K, --config FILE   Read config from FILE\n -C, --continue-at OFFSET  Resumed transfer OFFSET\n -b, --cookie STRING/FILE  Read cookies from STRING/FILE (H)\n -c, --cookie-jar FILE  Write cookies to FILE after operation (H)\n -d, --data DATA     HTTP POST data (H)\n -D, --dump-header FILE  Write the received headers to FILE\n -f, --fail          Fail silently (no output at all) on HTTP errors (H)\n -F, --form CONTENT  Specify HTTP multipart POST data (H)\n -P, --ftp-port ADR  Use PORT with given address instead of PASV (F)\n -G, --get           Send the -d data with a HTTP GET (H)\n -g, --globoff       Disable URL sequences and ranges using {} and []\n -H, --header LINE   Pass custom header LINE to server (H)\n -I, --head          Show document info only\n -h, --help          This help text\n -i, --include       Include protocol headers in the output (H/F)\n -k, --insecure      Allow connections to SSL sites without certs (H)\n -j, --junk-session-cookies  Ignore session cookies read from file (H)\n -l, --list-only     List only mode (F/POP3)\n -L, --location      Follow redirects (H)\n -M, --manual        Display the full manual\n -m, --max-time SECONDS  Maximum time allowed for the transfer\n -n, --netrc         Must read .netrc for user name and password\n -N, --no-buffer     Disable buffering of the output stream\n -o, --output FILE   Write to FILE instead of stdout\n -U, --proxy-user USER[:PASSWORD]  Proxy user and password\n     --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port\n -p, --proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)\n     --pubkey KEY    Public key file name (SSH)\n -Q, --quote CMD     Send command(s) to server before transfer (F/SFTP)\n     --random-file FILE  File for reading random data from (SSL)\n -r, --range RANGE   Retrieve only the bytes within RANGE\n     --raw           Do HTTP \"raw\"; no transfer decoding (H)\n -e, --referer       Referer URL (H)\n -J, --remote-header-name  Use the header-provided filename (H)\n -O, --remote-name   Write output to a file named as the remote file\n     --remote-name-all  Use the remote file name for all URLs\n -R, --remote-time   Set the remote file's time on the local output\n -X, --request COMMAND  Specify request command to use\n -S, --show-error    Show error. With -s, make curl show errors when they occur\n -s, --silent        Silent mode (don't output anything)\n -Y, --speed-limit RATE  Stop transfers below RATE for 'speed-time' secs\n -y, --speed-time SECONDS  Trigger 'speed-limit' abort after SECONDS (default: 30)\n -t, --telnet-option OPT=VAL  Set telnet option\n     --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be >512)\n     --tftp-no-options  Do not send TFTP options requests\n -z, --time-cond TIME   Transfer based on a time condition\n -T, --upload-file FILE  Transfer FILE to destination\n     --url URL       URL to work with\n -B, --use-ascii     Use ASCII/text transfer\n -u, --user USER[:PASSWORD]  Server user and password\n -A, --user-agent STRING  Send User-Agent STRING to server (H)\n -v, --verbose       Make the operation more talkative\n -V, --version       Show version number and quit\n -w, --write-out FORMAT  Use output FORMAT after completion\n -q, --disable       Disable .curlrc (must be first parameter)\n```\n\n","slug":"Linux/cUrl使用心得","published":1,"updated":"2018-01-16T14:41:48.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb77000fdc4m8o3r2yvy","content":"<h1 id=\"一、常用参数\"><a href=\"#一、常用参数\" class=\"headerlink\" title=\"一、常用参数\"></a>一、常用参数</h1><pre><code class=\"shell\"># -i：include全部HTTP报文\n# -v：显示请求过程\n# -d：HTTP POST DATA \n# -X：自定义请求方法。如-X POST\n# -H：自定义请求头 如 -H &quot;Content-type: application/json&quot;\n# -G： --get  Send the -d data with a HTTP GET (H)\n# -o：输出\n# -s：静音模式，不输出任何东西\n# -S, --show-error    Show error. With -s, make curl show errors when they occur\n# -f, --fail         连接失败时不显示http错误 (H)\n\n# 调试的话暂时用到这么多，其他的命令想到在更。这种东西可以直接看英文文档。\n</code></pre>\n<h1 id=\"二、get-请求\"><a href=\"#二、get-请求\" class=\"headerlink\" title=\"二、get 请求\"></a>二、get 请求</h1><pre><code class=\"shell\"># 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地\ncurl &quot;http://7xssni.com1.z0.glb.clouddn.com/home.txt&quot;  \n\n# 显示全部信息:包括起始行、响应头、响应体\n# -i: --include       Include protocol headers in the output (H/F)\ncurl -i &quot;http://7xssni.com1.z0.glb.clouddn.com/home.txt&quot;\n\n# 显示get请求全过程解析 *表示解析过程  &gt;表示请求 &lt;表示响应 \n# -v: --verbose 冗长的\ncurl -v &quot;http://7xssni.com1.z0.glb.clouddn.com/home.txt&quot; #--verbose\n</code></pre>\n<h1 id=\"三、post请求\"><a href=\"#三、post请求\" class=\"headerlink\" title=\"三、post请求\"></a>三、post请求</h1><pre><code class=\"shell\">#  -d: --data DATA     HTTP POST data (H)\ncurl -d &quot;param1=value1&amp;param2=value2&quot; &quot;http://www.baidu.com&quot;\n</code></pre>\n<h1 id=\"四、JSON-格式的-post-请求\"><a href=\"#四、JSON-格式的-post-请求\" class=\"headerlink\" title=\"四、JSON 格式的 post 请求\"></a>四、JSON 格式的 post 请求</h1><pre><code class=\"shell\"># -H: --header LINE   Pass custom header LINE to server (H)\n# -X: --request COMMAND  Specify request command to use\n# -d: --data DATA     HTTP POST data (H)\ncurl -l -H &quot;Content-type: application/json&quot; -X POST -d &#39;{&quot;phone&quot;:&quot;13521389587&quot;,&quot;password&quot;:&quot;test&quot;}&#39; http://domain/apis/users.json\n</code></pre>\n<h1 id=\"五、实例\"><a href=\"#五、实例\" class=\"headerlink\" title=\"五、实例\"></a>五、实例</h1><pre><code>URL ：http://7xssni.com1.z0.glb.clouddn.com/home.txt\n</code></pre><pre><code>{\n  &quot;headUrl&quot; : {\n    &quot;headList&quot; : [\n      &quot;http://7xssni.com1.z0.glb.clouddn.com/home1.jpg&quot;,\n      &quot;http://7xssni.com1.z0.glb.clouddn.com/home2.jpg&quot;,\n      &quot;http://7xssni.com1.z0.glb.clouddn.com/home3.jpg&quot;,\n      &quot;http://7xssni.com1.z0.glb.clouddn.com/home4.jpg&quot;\n    ]\n  },\n  &quot;homeUrl&quot; : {\n    &quot;dataList&quot; : [\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/1.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;PVC实体塑木板&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/2.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;3D印花地毯&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/3.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;金刚木板&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/4.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;经典菱形软包&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/5.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;经典防水木板&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/6.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;经典花纹墙纸&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/7.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;经典使用木板&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/8.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;非洲柚木地板&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      }\n    ]\n  }\n}\n</code></pre><h2 id=\"五、常用命令：\"><a href=\"#五、常用命令：\" class=\"headerlink\" title=\"五、常用命令：\"></a>五、常用命令：</h2><pre><code> -a, --append        Append to target file when uploading (F/SFTP)\n -E, --cert CERT[:PASSWD]  Client certificate file and password (SSL)\n -K, --config FILE   Read config from FILE\n -C, --continue-at OFFSET  Resumed transfer OFFSET\n -b, --cookie STRING/FILE  Read cookies from STRING/FILE (H)\n -c, --cookie-jar FILE  Write cookies to FILE after operation (H)\n -d, --data DATA     HTTP POST data (H)\n -D, --dump-header FILE  Write the received headers to FILE\n -f, --fail          Fail silently (no output at all) on HTTP errors (H)\n -F, --form CONTENT  Specify HTTP multipart POST data (H)\n -P, --ftp-port ADR  Use PORT with given address instead of PASV (F)\n -G, --get           Send the -d data with a HTTP GET (H)\n -g, --globoff       Disable URL sequences and ranges using {} and []\n -H, --header LINE   Pass custom header LINE to server (H)\n -I, --head          Show document info only\n -h, --help          This help text\n -i, --include       Include protocol headers in the output (H/F)\n -k, --insecure      Allow connections to SSL sites without certs (H)\n -j, --junk-session-cookies  Ignore session cookies read from file (H)\n -l, --list-only     List only mode (F/POP3)\n -L, --location      Follow redirects (H)\n -M, --manual        Display the full manual\n -m, --max-time SECONDS  Maximum time allowed for the transfer\n -n, --netrc         Must read .netrc for user name and password\n -N, --no-buffer     Disable buffering of the output stream\n -o, --output FILE   Write to FILE instead of stdout\n -U, --proxy-user USER[:PASSWORD]  Proxy user and password\n     --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port\n -p, --proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)\n     --pubkey KEY    Public key file name (SSH)\n -Q, --quote CMD     Send command(s) to server before transfer (F/SFTP)\n     --random-file FILE  File for reading random data from (SSL)\n -r, --range RANGE   Retrieve only the bytes within RANGE\n     --raw           Do HTTP &quot;raw&quot;; no transfer decoding (H)\n -e, --referer       Referer URL (H)\n -J, --remote-header-name  Use the header-provided filename (H)\n -O, --remote-name   Write output to a file named as the remote file\n     --remote-name-all  Use the remote file name for all URLs\n -R, --remote-time   Set the remote file&#39;s time on the local output\n -X, --request COMMAND  Specify request command to use\n -S, --show-error    Show error. With -s, make curl show errors when they occur\n -s, --silent        Silent mode (don&#39;t output anything)\n -Y, --speed-limit RATE  Stop transfers below RATE for &#39;speed-time&#39; secs\n -y, --speed-time SECONDS  Trigger &#39;speed-limit&#39; abort after SECONDS (default: 30)\n -t, --telnet-option OPT=VAL  Set telnet option\n     --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be &gt;512)\n     --tftp-no-options  Do not send TFTP options requests\n -z, --time-cond TIME   Transfer based on a time condition\n -T, --upload-file FILE  Transfer FILE to destination\n     --url URL       URL to work with\n -B, --use-ascii     Use ASCII/text transfer\n -u, --user USER[:PASSWORD]  Server user and password\n -A, --user-agent STRING  Send User-Agent STRING to server (H)\n -v, --verbose       Make the operation more talkative\n -V, --version       Show version number and quit\n -w, --write-out FORMAT  Use output FORMAT after completion\n -q, --disable       Disable .curlrc (must be first parameter)\n</code></pre>","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<h1 id=\"一、常用参数\"><a href=\"#一、常用参数\" class=\"headerlink\" title=\"一、常用参数\"></a>一、常用参数</h1><pre><code class=\"shell\"># -i：include全部HTTP报文\n# -v：显示请求过程\n# -d：HTTP POST DATA \n# -X：自定义请求方法。如-X POST\n# -H：自定义请求头 如 -H &quot;Content-type: application/json&quot;\n# -G： --get  Send the -d data with a HTTP GET (H)\n# -o：输出\n# -s：静音模式，不输出任何东西\n# -S, --show-error    Show error. With -s, make curl show errors when they occur\n# -f, --fail         连接失败时不显示http错误 (H)\n\n# 调试的话暂时用到这么多，其他的命令想到在更。这种东西可以直接看英文文档。\n</code></pre>\n<h1 id=\"二、get-请求\"><a href=\"#二、get-请求\" class=\"headerlink\" title=\"二、get 请求\"></a>二、get 请求</h1><pre><code class=\"shell\"># 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地\ncurl &quot;http://7xssni.com1.z0.glb.clouddn.com/home.txt&quot;  \n\n# 显示全部信息:包括起始行、响应头、响应体\n# -i: --include       Include protocol headers in the output (H/F)\ncurl -i &quot;http://7xssni.com1.z0.glb.clouddn.com/home.txt&quot;\n\n# 显示get请求全过程解析 *表示解析过程  &gt;表示请求 &lt;表示响应 \n# -v: --verbose 冗长的\ncurl -v &quot;http://7xssni.com1.z0.glb.clouddn.com/home.txt&quot; #--verbose\n</code></pre>\n<h1 id=\"三、post请求\"><a href=\"#三、post请求\" class=\"headerlink\" title=\"三、post请求\"></a>三、post请求</h1><pre><code class=\"shell\">#  -d: --data DATA     HTTP POST data (H)\ncurl -d &quot;param1=value1&amp;param2=value2&quot; &quot;http://www.baidu.com&quot;\n</code></pre>\n<h1 id=\"四、JSON-格式的-post-请求\"><a href=\"#四、JSON-格式的-post-请求\" class=\"headerlink\" title=\"四、JSON 格式的 post 请求\"></a>四、JSON 格式的 post 请求</h1><pre><code class=\"shell\"># -H: --header LINE   Pass custom header LINE to server (H)\n# -X: --request COMMAND  Specify request command to use\n# -d: --data DATA     HTTP POST data (H)\ncurl -l -H &quot;Content-type: application/json&quot; -X POST -d &#39;{&quot;phone&quot;:&quot;13521389587&quot;,&quot;password&quot;:&quot;test&quot;}&#39; http://domain/apis/users.json\n</code></pre>\n<h1 id=\"五、实例\"><a href=\"#五、实例\" class=\"headerlink\" title=\"五、实例\"></a>五、实例</h1><pre><code>URL ：http://7xssni.com1.z0.glb.clouddn.com/home.txt\n</code></pre><pre><code>{\n  &quot;headUrl&quot; : {\n    &quot;headList&quot; : [\n      &quot;http://7xssni.com1.z0.glb.clouddn.com/home1.jpg&quot;,\n      &quot;http://7xssni.com1.z0.glb.clouddn.com/home2.jpg&quot;,\n      &quot;http://7xssni.com1.z0.glb.clouddn.com/home3.jpg&quot;,\n      &quot;http://7xssni.com1.z0.glb.clouddn.com/home4.jpg&quot;\n    ]\n  },\n  &quot;homeUrl&quot; : {\n    &quot;dataList&quot; : [\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/1.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;PVC实体塑木板&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/2.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;3D印花地毯&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/3.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;金刚木板&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/4.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;经典菱形软包&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/5.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;经典防水木板&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/6.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;经典花纹墙纸&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/7.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;经典使用木板&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      },\n      {\n        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/8.jpg&quot;,\n        &quot;materialList&quot; : &quot;进口&quot;,\n        &quot;titleStr&quot; : &quot;非洲柚木地板&quot;,\n        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;\n      }\n    ]\n  }\n}\n</code></pre><h2 id=\"五、常用命令：\"><a href=\"#五、常用命令：\" class=\"headerlink\" title=\"五、常用命令：\"></a>五、常用命令：</h2><pre><code> -a, --append        Append to target file when uploading (F/SFTP)\n -E, --cert CERT[:PASSWD]  Client certificate file and password (SSL)\n -K, --config FILE   Read config from FILE\n -C, --continue-at OFFSET  Resumed transfer OFFSET\n -b, --cookie STRING/FILE  Read cookies from STRING/FILE (H)\n -c, --cookie-jar FILE  Write cookies to FILE after operation (H)\n -d, --data DATA     HTTP POST data (H)\n -D, --dump-header FILE  Write the received headers to FILE\n -f, --fail          Fail silently (no output at all) on HTTP errors (H)\n -F, --form CONTENT  Specify HTTP multipart POST data (H)\n -P, --ftp-port ADR  Use PORT with given address instead of PASV (F)\n -G, --get           Send the -d data with a HTTP GET (H)\n -g, --globoff       Disable URL sequences and ranges using {} and []\n -H, --header LINE   Pass custom header LINE to server (H)\n -I, --head          Show document info only\n -h, --help          This help text\n -i, --include       Include protocol headers in the output (H/F)\n -k, --insecure      Allow connections to SSL sites without certs (H)\n -j, --junk-session-cookies  Ignore session cookies read from file (H)\n -l, --list-only     List only mode (F/POP3)\n -L, --location      Follow redirects (H)\n -M, --manual        Display the full manual\n -m, --max-time SECONDS  Maximum time allowed for the transfer\n -n, --netrc         Must read .netrc for user name and password\n -N, --no-buffer     Disable buffering of the output stream\n -o, --output FILE   Write to FILE instead of stdout\n -U, --proxy-user USER[:PASSWORD]  Proxy user and password\n     --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port\n -p, --proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)\n     --pubkey KEY    Public key file name (SSH)\n -Q, --quote CMD     Send command(s) to server before transfer (F/SFTP)\n     --random-file FILE  File for reading random data from (SSL)\n -r, --range RANGE   Retrieve only the bytes within RANGE\n     --raw           Do HTTP &quot;raw&quot;; no transfer decoding (H)\n -e, --referer       Referer URL (H)\n -J, --remote-header-name  Use the header-provided filename (H)\n -O, --remote-name   Write output to a file named as the remote file\n     --remote-name-all  Use the remote file name for all URLs\n -R, --remote-time   Set the remote file&#39;s time on the local output\n -X, --request COMMAND  Specify request command to use\n -S, --show-error    Show error. With -s, make curl show errors when they occur\n -s, --silent        Silent mode (don&#39;t output anything)\n -Y, --speed-limit RATE  Stop transfers below RATE for &#39;speed-time&#39; secs\n -y, --speed-time SECONDS  Trigger &#39;speed-limit&#39; abort after SECONDS (default: 30)\n -t, --telnet-option OPT=VAL  Set telnet option\n     --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be &gt;512)\n     --tftp-no-options  Do not send TFTP options requests\n -z, --time-cond TIME   Transfer based on a time condition\n -T, --upload-file FILE  Transfer FILE to destination\n     --url URL       URL to work with\n -B, --use-ascii     Use ASCII/text transfer\n -u, --user USER[:PASSWORD]  Server user and password\n -A, --user-agent STRING  Send User-Agent STRING to server (H)\n -v, --verbose       Make the operation more talkative\n -V, --version       Show version number and quit\n -w, --write-out FORMAT  Use output FORMAT after completion\n -q, --disable       Disable .curlrc (must be first parameter)\n</code></pre>"},{"title":"股票术语","date":"2018-01-18T15:34:23.000Z","thumbnail":"https://i0.hdslb.com/bfs/drawyoo/9e9287e1e69f8489cbb9031afb090e1bc893311e.jpg","_content":"\n股票术语\n\n1、市盈率（P/E ratio）\n\n市盈率 = （当前每股市场价格）÷ （每股税后利润）\n\n动态市盈率：还没有真正实现的下一年度预测利润的市盈率。\n\n\n\n2、市净率：\n\n市净率 = （每股市价 P）÷ （每股净资产 Book Value）\n\n股票净值主要包括公司资本金、资本公积金、法定公积金、任意公积金、为分配盈余等项目的合计，它代表全体股东共同享有的权益，也称净资产。\n\n\n\n3、[公积金](https://baike.baidu.com/item/%E5%85%AC%E7%A7%AF%E9%87%91/1329924?fr=aladdin):公积金分为住房公积金和公司公积金，上文特指公司公积金\n\n","source":"_posts/股票投资/股票术语.md","raw":"---\ntitle: '股票术语'\ndate: 2018-01-18 23:34:23\ntags: \ncategories: 股票投资\nthumbnail: https://i0.hdslb.com/bfs/drawyoo/9e9287e1e69f8489cbb9031afb090e1bc893311e.jpg\n---\n\n股票术语\n\n1、市盈率（P/E ratio）\n\n市盈率 = （当前每股市场价格）÷ （每股税后利润）\n\n动态市盈率：还没有真正实现的下一年度预测利润的市盈率。\n\n\n\n2、市净率：\n\n市净率 = （每股市价 P）÷ （每股净资产 Book Value）\n\n股票净值主要包括公司资本金、资本公积金、法定公积金、任意公积金、为分配盈余等项目的合计，它代表全体股东共同享有的权益，也称净资产。\n\n\n\n3、[公积金](https://baike.baidu.com/item/%E5%85%AC%E7%A7%AF%E9%87%91/1329924?fr=aladdin):公积金分为住房公积金和公司公积金，上文特指公司公积金\n\n","slug":"股票投资/股票术语","published":1,"updated":"2018-01-30T07:53:54.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb78000idc4mmf2rnnf1","content":"<p>股票术语</p>\n<p>1、市盈率（P/E ratio）</p>\n<p>市盈率 = （当前每股市场价格）÷ （每股税后利润）</p>\n<p>动态市盈率：还没有真正实现的下一年度预测利润的市盈率。</p>\n<p>2、市净率：</p>\n<p>市净率 = （每股市价 P）÷ （每股净资产 Book Value）</p>\n<p>股票净值主要包括公司资本金、资本公积金、法定公积金、任意公积金、为分配盈余等项目的合计，它代表全体股东共同享有的权益，也称净资产。</p>\n<p>3、<a href=\"https://baike.baidu.com/item/%E5%85%AC%E7%A7%AF%E9%87%91/1329924?fr=aladdin\" target=\"_blank\" rel=\"noopener\">公积金</a>:公积金分为住房公积金和公司公积金，上文特指公司公积金</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<p>股票术语</p>\n<p>1、市盈率（P/E ratio）</p>\n<p>市盈率 = （当前每股市场价格）÷ （每股税后利润）</p>\n<p>动态市盈率：还没有真正实现的下一年度预测利润的市盈率。</p>\n<p>2、市净率：</p>\n<p>市净率 = （每股市价 P）÷ （每股净资产 Book Value）</p>\n<p>股票净值主要包括公司资本金、资本公积金、法定公积金、任意公积金、为分配盈余等项目的合计，它代表全体股东共同享有的权益，也称净资产。</p>\n<p>3、<a href=\"https://baike.baidu.com/item/%E5%85%AC%E7%A7%AF%E9%87%91/1329924?fr=aladdin\" target=\"_blank\" rel=\"noopener\">公积金</a>:公积金分为住房公积金和公司公积金，上文特指公司公积金</p>\n"},{"title":"instrument 详解","date":"2018-01-15T15:26:11.000Z","thumbnail":"https://i0.hdslb.com/bfs/drawyoo/08a8f9111655a8a0c2f1dd05ea4f5291692fb08c.jpg","_content":"\n[TOC]\n\n![](instrument.png)\n\n## 一、Blank\n\n\n\n## 二、Activity Monitor（活动监视器）\n\n\n\n## 三、Allocations（内存分配）\n\n![](https://upload-images.jianshu.io/upload_images/325854-060ac29a8dbf6c9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n### 1、程序员对内存关注的点\n\n* 正确使用\n\n  * 避免非法访问\n\n    > 即避免访问被释放掉的内存。release 后不能再 retain。\n\n  * 避免内存泄漏\n\n* 高效使用\n\n  * 降低内存峰值\n  * 处理内存警告\n  * Cache\n\n### 2、Regions（区域）\n\n以下内容参考自 [Stack Overflow](https://stackoverflow.com/questions/13437365/what-is-resident-and-dirty-memory-of-ios!)\n\n视频链接：[iOS内存管理及优化](https://www.imooc.com/video/11075)\n\n* Clean Memory：在闪存中有备份，能够再次读取。主要包括`system framework`、`binary executable of your app`、`memory mapped files`\n* Dirty Memory：所有非`Clean Memory`，**系统无法回收**。包括`Heap allocation`、`caches`、`decompressed images`（解压的图片）\n\n### 3、虚拟内存之间的关系\n\n* 虚拟内存层面：（逻辑内存）\n\n  >  virtual memory = clean memory + dirty memory.\n\n* 物理内存层面：\n\n  > resident memory= dirty memory+clean memory that loaded in physical memory\n\n* 总结：\n\n  > virtual memory == (clean memory + dirty memory) > resident memory >dirty memory\n\n```objective-c\n// clean memory\n- (IBAction)clickAction1{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@\"%p\",buf);\n}\n\n// dirty memory\n- (IBAction)clickAction2{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@\"%p\",buf);\n  for(int i=0; i < 3*1024*1024; ++i){ //分配3M 物理内存，剩余97M 虚拟内存\n    buf[i] = rand();\n  }\n}\n\n- (void)cleanOrDirtyMemory{\n  \n  \tNSString* str1 = [NSString stringWithString:@\"dirty\"];//dirty memory(堆上分配的内存都是 dirty的，不回收的话系统都会占用这个内存)\n    NSString* str2 = @\"w\";//存在只读数据段里面 \n    char *buf = malloc(100*1024*1024); //100M 虚拟内存 (clean，因为我们没有访问到)\n    for(int i=0; i < 3*1024*1024; ++i){ //分配3M 物理内存（dirty），剩余97M 虚拟内存(clean)\n    buf[i] = rand();//dirty\n  }\n}\n```\n\n\n\n### 4、VMTracker：\n\n> ```\n> 官方解释：Adds the Allocations and VM Tracker instruments toyour document. Use this template to monitor memory and object-allocationpatterns in your program \n> ```\n\n* Dirty Size：\n* Swapped Size：\n* Resident Size：\n\n### 5、参数：\n\n* 图形列（Graph）：\n\n  > 当指定类别的复选框被勾选时,instrument工具在跟踪面板里面显示特定类别的图形。 Instruments 应用通常给每个图形类别赋一个颜色。\n\n* 类别(Category)：\n\n  > 通常是一个 Core Foundation 对象、Objective-C 类、或者 malloc 出来的内存空间。\n\n* 净分配字节数(Persistent Bytes)：\n\n  > 当前已经分配内存但是仍然没有被释放的字节的总数。\n\n* 净分配数(#Persistent)：\n\n  > 当前已经分配内存但仍然没有被释放的对象或内存块的数量。\n\n* 临时分配数(#Transient)：\n\n  > 当前已经分配内存但仍然没有被释放的对象或内存块的数量。\n\n* 总分配字节数(Total Bytes)：\n\n  > 所有已经分配内存,而且包括已经被释放了的字节的总数。\n\n* 总分配数(#Total)：\n\n  > 所有当前已经分配内存,包括已经被释放了的对象或内存 块的总数。\n\n* 临时分配/全部内存分配(Transient/Total Bytes)：\n\n  > 当前和全部分配数的直方图。如上图所示当比例变化时,直方条会变颜色，Instruments 应用通常给它们标示不同的颜色来指出分配模式以便进行进一步的研究。\n\n## 四、Cocoa Layout\n\n## 五、Core Animation\n\n## 六、Core Data\n\n## 七、Counters（计数器）\n\n## 八、Energy Log\n\n## 九、File Activity\n\n## 十、Leaks（内存泄漏）\n\n## 十一、Metal System Trace\n\n## 十二、Network\n\n## 十三、SceneKit\n\n## 十四、System Trace（系统跟踪）\n\n## 十五、System Usage\n\n ios 模拟器暂不支持\n\n## 十六、Time profiler\n\n## 十七、Zombies（僵尸）\n\n\n\n","source":"_posts/iOS开发/iOS 开发基础/instrument-详解.md","raw":"---\ntitle: instrument 详解\ndate: 2018-01-15 23:26:11\ntags: instrument\ncategories: iOS开发\nthumbnail: https://i0.hdslb.com/bfs/drawyoo/08a8f9111655a8a0c2f1dd05ea4f5291692fb08c.jpg\n---\n\n[TOC]\n\n![](instrument.png)\n\n## 一、Blank\n\n\n\n## 二、Activity Monitor（活动监视器）\n\n\n\n## 三、Allocations（内存分配）\n\n![](https://upload-images.jianshu.io/upload_images/325854-060ac29a8dbf6c9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n### 1、程序员对内存关注的点\n\n* 正确使用\n\n  * 避免非法访问\n\n    > 即避免访问被释放掉的内存。release 后不能再 retain。\n\n  * 避免内存泄漏\n\n* 高效使用\n\n  * 降低内存峰值\n  * 处理内存警告\n  * Cache\n\n### 2、Regions（区域）\n\n以下内容参考自 [Stack Overflow](https://stackoverflow.com/questions/13437365/what-is-resident-and-dirty-memory-of-ios!)\n\n视频链接：[iOS内存管理及优化](https://www.imooc.com/video/11075)\n\n* Clean Memory：在闪存中有备份，能够再次读取。主要包括`system framework`、`binary executable of your app`、`memory mapped files`\n* Dirty Memory：所有非`Clean Memory`，**系统无法回收**。包括`Heap allocation`、`caches`、`decompressed images`（解压的图片）\n\n### 3、虚拟内存之间的关系\n\n* 虚拟内存层面：（逻辑内存）\n\n  >  virtual memory = clean memory + dirty memory.\n\n* 物理内存层面：\n\n  > resident memory= dirty memory+clean memory that loaded in physical memory\n\n* 总结：\n\n  > virtual memory == (clean memory + dirty memory) > resident memory >dirty memory\n\n```objective-c\n// clean memory\n- (IBAction)clickAction1{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@\"%p\",buf);\n}\n\n// dirty memory\n- (IBAction)clickAction2{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@\"%p\",buf);\n  for(int i=0; i < 3*1024*1024; ++i){ //分配3M 物理内存，剩余97M 虚拟内存\n    buf[i] = rand();\n  }\n}\n\n- (void)cleanOrDirtyMemory{\n  \n  \tNSString* str1 = [NSString stringWithString:@\"dirty\"];//dirty memory(堆上分配的内存都是 dirty的，不回收的话系统都会占用这个内存)\n    NSString* str2 = @\"w\";//存在只读数据段里面 \n    char *buf = malloc(100*1024*1024); //100M 虚拟内存 (clean，因为我们没有访问到)\n    for(int i=0; i < 3*1024*1024; ++i){ //分配3M 物理内存（dirty），剩余97M 虚拟内存(clean)\n    buf[i] = rand();//dirty\n  }\n}\n```\n\n\n\n### 4、VMTracker：\n\n> ```\n> 官方解释：Adds the Allocations and VM Tracker instruments toyour document. Use this template to monitor memory and object-allocationpatterns in your program \n> ```\n\n* Dirty Size：\n* Swapped Size：\n* Resident Size：\n\n### 5、参数：\n\n* 图形列（Graph）：\n\n  > 当指定类别的复选框被勾选时,instrument工具在跟踪面板里面显示特定类别的图形。 Instruments 应用通常给每个图形类别赋一个颜色。\n\n* 类别(Category)：\n\n  > 通常是一个 Core Foundation 对象、Objective-C 类、或者 malloc 出来的内存空间。\n\n* 净分配字节数(Persistent Bytes)：\n\n  > 当前已经分配内存但是仍然没有被释放的字节的总数。\n\n* 净分配数(#Persistent)：\n\n  > 当前已经分配内存但仍然没有被释放的对象或内存块的数量。\n\n* 临时分配数(#Transient)：\n\n  > 当前已经分配内存但仍然没有被释放的对象或内存块的数量。\n\n* 总分配字节数(Total Bytes)：\n\n  > 所有已经分配内存,而且包括已经被释放了的字节的总数。\n\n* 总分配数(#Total)：\n\n  > 所有当前已经分配内存,包括已经被释放了的对象或内存 块的总数。\n\n* 临时分配/全部内存分配(Transient/Total Bytes)：\n\n  > 当前和全部分配数的直方图。如上图所示当比例变化时,直方条会变颜色，Instruments 应用通常给它们标示不同的颜色来指出分配模式以便进行进一步的研究。\n\n## 四、Cocoa Layout\n\n## 五、Core Animation\n\n## 六、Core Data\n\n## 七、Counters（计数器）\n\n## 八、Energy Log\n\n## 九、File Activity\n\n## 十、Leaks（内存泄漏）\n\n## 十一、Metal System Trace\n\n## 十二、Network\n\n## 十三、SceneKit\n\n## 十四、System Trace（系统跟踪）\n\n## 十五、System Usage\n\n ios 模拟器暂不支持\n\n## 十六、Time profiler\n\n## 十七、Zombies（僵尸）\n\n\n\n","slug":"iOS开发/iOS 开发基础/instrument-详解","published":1,"updated":"2018-01-27T14:04:39.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb7w0017dc4ma8nyc9nc","content":"<p>[TOC]</p>\n<p><img src=\"instrument.png\" alt=\"\"></p>\n<h2 id=\"一、Blank\"><a href=\"#一、Blank\" class=\"headerlink\" title=\"一、Blank\"></a>一、Blank</h2><h2 id=\"二、Activity-Monitor（活动监视器）\"><a href=\"#二、Activity-Monitor（活动监视器）\" class=\"headerlink\" title=\"二、Activity Monitor（活动监视器）\"></a>二、Activity Monitor（活动监视器）</h2><h2 id=\"三、Allocations（内存分配）\"><a href=\"#三、Allocations（内存分配）\" class=\"headerlink\" title=\"三、Allocations（内存分配）\"></a>三、Allocations（内存分配）</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/325854-060ac29a8dbf6c9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"\"></p>\n<h3 id=\"1、程序员对内存关注的点\"><a href=\"#1、程序员对内存关注的点\" class=\"headerlink\" title=\"1、程序员对内存关注的点\"></a>1、程序员对内存关注的点</h3><ul>\n<li><p>正确使用</p>\n<ul>\n<li><p>避免非法访问</p>\n<blockquote>\n<p>即避免访问被释放掉的内存。release 后不能再 retain。</p>\n</blockquote>\n</li>\n<li><p>避免内存泄漏</p>\n</li>\n</ul>\n</li>\n<li><p>高效使用</p>\n<ul>\n<li>降低内存峰值</li>\n<li>处理内存警告</li>\n<li>Cache</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、Regions（区域）\"><a href=\"#2、Regions（区域）\" class=\"headerlink\" title=\"2、Regions（区域）\"></a>2、Regions（区域）</h3><p>以下内容参考自 <a href=\"https://stackoverflow.com/questions/13437365/what-is-resident-and-dirty-memory-of-ios!\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a></p>\n<p>视频链接：<a href=\"https://www.imooc.com/video/11075\" target=\"_blank\" rel=\"noopener\">iOS内存管理及优化</a></p>\n<ul>\n<li>Clean Memory：在闪存中有备份，能够再次读取。主要包括<code>system framework</code>、<code>binary executable of your app</code>、<code>memory mapped files</code></li>\n<li>Dirty Memory：所有非<code>Clean Memory</code>，<strong>系统无法回收</strong>。包括<code>Heap allocation</code>、<code>caches</code>、<code>decompressed images</code>（解压的图片）</li>\n</ul>\n<h3 id=\"3、虚拟内存之间的关系\"><a href=\"#3、虚拟内存之间的关系\" class=\"headerlink\" title=\"3、虚拟内存之间的关系\"></a>3、虚拟内存之间的关系</h3><ul>\n<li><p>虚拟内存层面：（逻辑内存）</p>\n<blockquote>\n<p> virtual memory = clean memory + dirty memory.</p>\n</blockquote>\n</li>\n<li><p>物理内存层面：</p>\n<blockquote>\n<p>resident memory= dirty memory+clean memory that loaded in physical memory</p>\n</blockquote>\n</li>\n<li><p>总结：</p>\n<blockquote>\n<p>virtual memory == (clean memory + dirty memory) &gt; resident memory &gt;dirty memory</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"objective-c\">// clean memory\n- (IBAction)clickAction1{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@&quot;%p&quot;,buf);\n}\n\n// dirty memory\n- (IBAction)clickAction2{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@&quot;%p&quot;,buf);\n  for(int i=0; i &lt; 3*1024*1024; ++i){ //分配3M 物理内存，剩余97M 虚拟内存\n    buf[i] = rand();\n  }\n}\n\n- (void)cleanOrDirtyMemory{\n\n      NSString* str1 = [NSString stringWithString:@&quot;dirty&quot;];//dirty memory(堆上分配的内存都是 dirty的，不回收的话系统都会占用这个内存)\n    NSString* str2 = @&quot;w&quot;;//存在只读数据段里面 \n    char *buf = malloc(100*1024*1024); //100M 虚拟内存 (clean，因为我们没有访问到)\n    for(int i=0; i &lt; 3*1024*1024; ++i){ //分配3M 物理内存（dirty），剩余97M 虚拟内存(clean)\n    buf[i] = rand();//dirty\n  }\n}\n</code></pre>\n<h3 id=\"4、VMTracker：\"><a href=\"#4、VMTracker：\" class=\"headerlink\" title=\"4、VMTracker：\"></a>4、VMTracker：</h3><blockquote>\n<pre><code>官方解释：Adds the Allocations and VM Tracker instruments toyour document. Use this template to monitor memory and object-allocationpatterns in your program\n</code></pre></blockquote>\n<ul>\n<li>Dirty Size：</li>\n<li>Swapped Size：</li>\n<li>Resident Size：</li>\n</ul>\n<h3 id=\"5、参数：\"><a href=\"#5、参数：\" class=\"headerlink\" title=\"5、参数：\"></a>5、参数：</h3><ul>\n<li><p>图形列（Graph）：</p>\n<blockquote>\n<p>当指定类别的复选框被勾选时,instrument工具在跟踪面板里面显示特定类别的图形。 Instruments 应用通常给每个图形类别赋一个颜色。</p>\n</blockquote>\n</li>\n<li><p>类别(Category)：</p>\n<blockquote>\n<p>通常是一个 Core Foundation 对象、Objective-C 类、或者 malloc 出来的内存空间。</p>\n</blockquote>\n</li>\n<li><p>净分配字节数(Persistent Bytes)：</p>\n<blockquote>\n<p>当前已经分配内存但是仍然没有被释放的字节的总数。</p>\n</blockquote>\n</li>\n<li><p>净分配数(#Persistent)：</p>\n<blockquote>\n<p>当前已经分配内存但仍然没有被释放的对象或内存块的数量。</p>\n</blockquote>\n</li>\n<li><p>临时分配数(#Transient)：</p>\n<blockquote>\n<p>当前已经分配内存但仍然没有被释放的对象或内存块的数量。</p>\n</blockquote>\n</li>\n<li><p>总分配字节数(Total Bytes)：</p>\n<blockquote>\n<p>所有已经分配内存,而且包括已经被释放了的字节的总数。</p>\n</blockquote>\n</li>\n<li><p>总分配数(#Total)：</p>\n<blockquote>\n<p>所有当前已经分配内存,包括已经被释放了的对象或内存 块的总数。</p>\n</blockquote>\n</li>\n<li><p>临时分配/全部内存分配(Transient/Total Bytes)：</p>\n<blockquote>\n<p>当前和全部分配数的直方图。如上图所示当比例变化时,直方条会变颜色，Instruments 应用通常给它们标示不同的颜色来指出分配模式以便进行进一步的研究。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、Cocoa-Layout\"><a href=\"#四、Cocoa-Layout\" class=\"headerlink\" title=\"四、Cocoa Layout\"></a>四、Cocoa Layout</h2><h2 id=\"五、Core-Animation\"><a href=\"#五、Core-Animation\" class=\"headerlink\" title=\"五、Core Animation\"></a>五、Core Animation</h2><h2 id=\"六、Core-Data\"><a href=\"#六、Core-Data\" class=\"headerlink\" title=\"六、Core Data\"></a>六、Core Data</h2><h2 id=\"七、Counters（计数器）\"><a href=\"#七、Counters（计数器）\" class=\"headerlink\" title=\"七、Counters（计数器）\"></a>七、Counters（计数器）</h2><h2 id=\"八、Energy-Log\"><a href=\"#八、Energy-Log\" class=\"headerlink\" title=\"八、Energy Log\"></a>八、Energy Log</h2><h2 id=\"九、File-Activity\"><a href=\"#九、File-Activity\" class=\"headerlink\" title=\"九、File Activity\"></a>九、File Activity</h2><h2 id=\"十、Leaks（内存泄漏）\"><a href=\"#十、Leaks（内存泄漏）\" class=\"headerlink\" title=\"十、Leaks（内存泄漏）\"></a>十、Leaks（内存泄漏）</h2><h2 id=\"十一、Metal-System-Trace\"><a href=\"#十一、Metal-System-Trace\" class=\"headerlink\" title=\"十一、Metal System Trace\"></a>十一、Metal System Trace</h2><h2 id=\"十二、Network\"><a href=\"#十二、Network\" class=\"headerlink\" title=\"十二、Network\"></a>十二、Network</h2><h2 id=\"十三、SceneKit\"><a href=\"#十三、SceneKit\" class=\"headerlink\" title=\"十三、SceneKit\"></a>十三、SceneKit</h2><h2 id=\"十四、System-Trace（系统跟踪）\"><a href=\"#十四、System-Trace（系统跟踪）\" class=\"headerlink\" title=\"十四、System Trace（系统跟踪）\"></a>十四、System Trace（系统跟踪）</h2><h2 id=\"十五、System-Usage\"><a href=\"#十五、System-Usage\" class=\"headerlink\" title=\"十五、System Usage\"></a>十五、System Usage</h2><p> ios 模拟器暂不支持</p>\n<h2 id=\"十六、Time-profiler\"><a href=\"#十六、Time-profiler\" class=\"headerlink\" title=\"十六、Time profiler\"></a>十六、Time profiler</h2><h2 id=\"十七、Zombies（僵尸）\"><a href=\"#十七、Zombies（僵尸）\" class=\"headerlink\" title=\"十七、Zombies（僵尸）\"></a>十七、Zombies（僵尸）</h2>","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<p>[TOC]</p>\n<p><img src=\"instrument.png\" alt=\"\"></p>\n<h2 id=\"一、Blank\"><a href=\"#一、Blank\" class=\"headerlink\" title=\"一、Blank\"></a>一、Blank</h2><h2 id=\"二、Activity-Monitor（活动监视器）\"><a href=\"#二、Activity-Monitor（活动监视器）\" class=\"headerlink\" title=\"二、Activity Monitor（活动监视器）\"></a>二、Activity Monitor（活动监视器）</h2><h2 id=\"三、Allocations（内存分配）\"><a href=\"#三、Allocations（内存分配）\" class=\"headerlink\" title=\"三、Allocations（内存分配）\"></a>三、Allocations（内存分配）</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/325854-060ac29a8dbf6c9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"\"></p>\n<h3 id=\"1、程序员对内存关注的点\"><a href=\"#1、程序员对内存关注的点\" class=\"headerlink\" title=\"1、程序员对内存关注的点\"></a>1、程序员对内存关注的点</h3><ul>\n<li><p>正确使用</p>\n<ul>\n<li><p>避免非法访问</p>\n<blockquote>\n<p>即避免访问被释放掉的内存。release 后不能再 retain。</p>\n</blockquote>\n</li>\n<li><p>避免内存泄漏</p>\n</li>\n</ul>\n</li>\n<li><p>高效使用</p>\n<ul>\n<li>降低内存峰值</li>\n<li>处理内存警告</li>\n<li>Cache</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、Regions（区域）\"><a href=\"#2、Regions（区域）\" class=\"headerlink\" title=\"2、Regions（区域）\"></a>2、Regions（区域）</h3><p>以下内容参考自 <a href=\"https://stackoverflow.com/questions/13437365/what-is-resident-and-dirty-memory-of-ios!\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a></p>\n<p>视频链接：<a href=\"https://www.imooc.com/video/11075\" target=\"_blank\" rel=\"noopener\">iOS内存管理及优化</a></p>\n<ul>\n<li>Clean Memory：在闪存中有备份，能够再次读取。主要包括<code>system framework</code>、<code>binary executable of your app</code>、<code>memory mapped files</code></li>\n<li>Dirty Memory：所有非<code>Clean Memory</code>，<strong>系统无法回收</strong>。包括<code>Heap allocation</code>、<code>caches</code>、<code>decompressed images</code>（解压的图片）</li>\n</ul>\n<h3 id=\"3、虚拟内存之间的关系\"><a href=\"#3、虚拟内存之间的关系\" class=\"headerlink\" title=\"3、虚拟内存之间的关系\"></a>3、虚拟内存之间的关系</h3><ul>\n<li><p>虚拟内存层面：（逻辑内存）</p>\n<blockquote>\n<p> virtual memory = clean memory + dirty memory.</p>\n</blockquote>\n</li>\n<li><p>物理内存层面：</p>\n<blockquote>\n<p>resident memory= dirty memory+clean memory that loaded in physical memory</p>\n</blockquote>\n</li>\n<li><p>总结：</p>\n<blockquote>\n<p>virtual memory == (clean memory + dirty memory) &gt; resident memory &gt;dirty memory</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"objective-c\">// clean memory\n- (IBAction)clickAction1{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@&quot;%p&quot;,buf);\n}\n\n// dirty memory\n- (IBAction)clickAction2{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@&quot;%p&quot;,buf);\n  for(int i=0; i &lt; 3*1024*1024; ++i){ //分配3M 物理内存，剩余97M 虚拟内存\n    buf[i] = rand();\n  }\n}\n\n- (void)cleanOrDirtyMemory{\n\n      NSString* str1 = [NSString stringWithString:@&quot;dirty&quot;];//dirty memory(堆上分配的内存都是 dirty的，不回收的话系统都会占用这个内存)\n    NSString* str2 = @&quot;w&quot;;//存在只读数据段里面 \n    char *buf = malloc(100*1024*1024); //100M 虚拟内存 (clean，因为我们没有访问到)\n    for(int i=0; i &lt; 3*1024*1024; ++i){ //分配3M 物理内存（dirty），剩余97M 虚拟内存(clean)\n    buf[i] = rand();//dirty\n  }\n}\n</code></pre>\n<h3 id=\"4、VMTracker：\"><a href=\"#4、VMTracker：\" class=\"headerlink\" title=\"4、VMTracker：\"></a>4、VMTracker：</h3><blockquote>\n<pre><code>官方解释：Adds the Allocations and VM Tracker instruments toyour document. Use this template to monitor memory and object-allocationpatterns in your program\n</code></pre></blockquote>\n<ul>\n<li>Dirty Size：</li>\n<li>Swapped Size：</li>\n<li>Resident Size：</li>\n</ul>\n<h3 id=\"5、参数：\"><a href=\"#5、参数：\" class=\"headerlink\" title=\"5、参数：\"></a>5、参数：</h3><ul>\n<li><p>图形列（Graph）：</p>\n<blockquote>\n<p>当指定类别的复选框被勾选时,instrument工具在跟踪面板里面显示特定类别的图形。 Instruments 应用通常给每个图形类别赋一个颜色。</p>\n</blockquote>\n</li>\n<li><p>类别(Category)：</p>\n<blockquote>\n<p>通常是一个 Core Foundation 对象、Objective-C 类、或者 malloc 出来的内存空间。</p>\n</blockquote>\n</li>\n<li><p>净分配字节数(Persistent Bytes)：</p>\n<blockquote>\n<p>当前已经分配内存但是仍然没有被释放的字节的总数。</p>\n</blockquote>\n</li>\n<li><p>净分配数(#Persistent)：</p>\n<blockquote>\n<p>当前已经分配内存但仍然没有被释放的对象或内存块的数量。</p>\n</blockquote>\n</li>\n<li><p>临时分配数(#Transient)：</p>\n<blockquote>\n<p>当前已经分配内存但仍然没有被释放的对象或内存块的数量。</p>\n</blockquote>\n</li>\n<li><p>总分配字节数(Total Bytes)：</p>\n<blockquote>\n<p>所有已经分配内存,而且包括已经被释放了的字节的总数。</p>\n</blockquote>\n</li>\n<li><p>总分配数(#Total)：</p>\n<blockquote>\n<p>所有当前已经分配内存,包括已经被释放了的对象或内存 块的总数。</p>\n</blockquote>\n</li>\n<li><p>临时分配/全部内存分配(Transient/Total Bytes)：</p>\n<blockquote>\n<p>当前和全部分配数的直方图。如上图所示当比例变化时,直方条会变颜色，Instruments 应用通常给它们标示不同的颜色来指出分配模式以便进行进一步的研究。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、Cocoa-Layout\"><a href=\"#四、Cocoa-Layout\" class=\"headerlink\" title=\"四、Cocoa Layout\"></a>四、Cocoa Layout</h2><h2 id=\"五、Core-Animation\"><a href=\"#五、Core-Animation\" class=\"headerlink\" title=\"五、Core Animation\"></a>五、Core Animation</h2><h2 id=\"六、Core-Data\"><a href=\"#六、Core-Data\" class=\"headerlink\" title=\"六、Core Data\"></a>六、Core Data</h2><h2 id=\"七、Counters（计数器）\"><a href=\"#七、Counters（计数器）\" class=\"headerlink\" title=\"七、Counters（计数器）\"></a>七、Counters（计数器）</h2><h2 id=\"八、Energy-Log\"><a href=\"#八、Energy-Log\" class=\"headerlink\" title=\"八、Energy Log\"></a>八、Energy Log</h2><h2 id=\"九、File-Activity\"><a href=\"#九、File-Activity\" class=\"headerlink\" title=\"九、File Activity\"></a>九、File Activity</h2><h2 id=\"十、Leaks（内存泄漏）\"><a href=\"#十、Leaks（内存泄漏）\" class=\"headerlink\" title=\"十、Leaks（内存泄漏）\"></a>十、Leaks（内存泄漏）</h2><h2 id=\"十一、Metal-System-Trace\"><a href=\"#十一、Metal-System-Trace\" class=\"headerlink\" title=\"十一、Metal System Trace\"></a>十一、Metal System Trace</h2><h2 id=\"十二、Network\"><a href=\"#十二、Network\" class=\"headerlink\" title=\"十二、Network\"></a>十二、Network</h2><h2 id=\"十三、SceneKit\"><a href=\"#十三、SceneKit\" class=\"headerlink\" title=\"十三、SceneKit\"></a>十三、SceneKit</h2><h2 id=\"十四、System-Trace（系统跟踪）\"><a href=\"#十四、System-Trace（系统跟踪）\" class=\"headerlink\" title=\"十四、System Trace（系统跟踪）\"></a>十四、System Trace（系统跟踪）</h2><h2 id=\"十五、System-Usage\"><a href=\"#十五、System-Usage\" class=\"headerlink\" title=\"十五、System Usage\"></a>十五、System Usage</h2><p> ios 模拟器暂不支持</p>\n<h2 id=\"十六、Time-profiler\"><a href=\"#十六、Time-profiler\" class=\"headerlink\" title=\"十六、Time profiler\"></a>十六、Time profiler</h2><h2 id=\"十七、Zombies（僵尸）\"><a href=\"#十七、Zombies（僵尸）\" class=\"headerlink\" title=\"十七、Zombies（僵尸）\"></a>十七、Zombies（僵尸）</h2>"},{"title":"ios HTTP请求","date":"2018-01-16T12:56:40.000Z","thumbnail":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3584732535,1447982096&fm=27&gp=0.jpg","_content":"\niOS9引入了新特性 [App Transport Security (ATS)](https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13)，所以需要在 Info.plist加入NSAppTransportSecurity 字典的 AllowsArbitraryLoads key的值为 BOOL。\n\n\n\n# POST 请求\n\n早期还有NSURLConnection方法，iOS 9 以后被淘汰了，有几个代理方法不能用了（同步请求，异步请求）\n\n\n\n原生方法：\n\n```objective-c\n    NSURL* url = [NSURL URLWithString:HomeUrl]; //url\n    NSURLRequest* request = [NSURLRequest requestWithURL:url];//请求\n    NSURLSession* session = [NSURLSession sharedSession]; //session\n    NSURLSessionDataTask* task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {\n        if(error){\n            \n            NSLog(@\"请求失败\");\n        }\n        else{\n            \n            NSLog(@\"请求成功\");\n            NSString *receiveStr = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];\n            \n            NSData * jsonData = [receiveStr dataUsingEncoding:NSUTF8StringEncoding];\n            \n            NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableLeaves error:nil];\n        }\n    }];\n    [task resume];\n```\n\n\n\n\n\n\n\n","source":"_posts/iOS开发/iOS 开发基础/ios-HTTP请求.md","raw":"---\ntitle: ios HTTP请求\ndate: 2018-01-16 20:56:40\ntags: 网络请求\ncategories: iOS开发\nthumbnail: https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3584732535,1447982096&fm=27&gp=0.jpg\n---\n\niOS9引入了新特性 [App Transport Security (ATS)](https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13)，所以需要在 Info.plist加入NSAppTransportSecurity 字典的 AllowsArbitraryLoads key的值为 BOOL。\n\n\n\n# POST 请求\n\n早期还有NSURLConnection方法，iOS 9 以后被淘汰了，有几个代理方法不能用了（同步请求，异步请求）\n\n\n\n原生方法：\n\n```objective-c\n    NSURL* url = [NSURL URLWithString:HomeUrl]; //url\n    NSURLRequest* request = [NSURLRequest requestWithURL:url];//请求\n    NSURLSession* session = [NSURLSession sharedSession]; //session\n    NSURLSessionDataTask* task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {\n        if(error){\n            \n            NSLog(@\"请求失败\");\n        }\n        else{\n            \n            NSLog(@\"请求成功\");\n            NSString *receiveStr = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];\n            \n            NSData * jsonData = [receiveStr dataUsingEncoding:NSUTF8StringEncoding];\n            \n            NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableLeaves error:nil];\n        }\n    }];\n    [task resume];\n```\n\n\n\n\n\n\n\n","slug":"iOS开发/iOS 开发基础/ios-HTTP请求","published":1,"updated":"2018-01-16T15:20:51.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb7x0018dc4mydq1nu59","content":"<p>iOS9引入了新特性 <a href=\"https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13\" target=\"_blank\" rel=\"noopener\">App Transport Security (ATS)</a>，所以需要在 Info.plist加入NSAppTransportSecurity 字典的 AllowsArbitraryLoads key的值为 BOOL。</p>\n<h1 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h1><p>早期还有NSURLConnection方法，iOS 9 以后被淘汰了，有几个代理方法不能用了（同步请求，异步请求）</p>\n<p>原生方法：</p>\n<pre><code class=\"objective-c\">    NSURL* url = [NSURL URLWithString:HomeUrl]; //url\n    NSURLRequest* request = [NSURLRequest requestWithURL:url];//请求\n    NSURLSession* session = [NSURLSession sharedSession]; //session\n    NSURLSessionDataTask* task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {\n        if(error){\n\n            NSLog(@&quot;请求失败&quot;);\n        }\n        else{\n\n            NSLog(@&quot;请求成功&quot;);\n            NSString *receiveStr = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];\n\n            NSData * jsonData = [receiveStr dataUsingEncoding:NSUTF8StringEncoding];\n\n            NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableLeaves error:nil];\n        }\n    }];\n    [task resume];\n</code></pre>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<p>iOS9引入了新特性 <a href=\"https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13\" target=\"_blank\" rel=\"noopener\">App Transport Security (ATS)</a>，所以需要在 Info.plist加入NSAppTransportSecurity 字典的 AllowsArbitraryLoads key的值为 BOOL。</p>\n<h1 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h1><p>早期还有NSURLConnection方法，iOS 9 以后被淘汰了，有几个代理方法不能用了（同步请求，异步请求）</p>\n<p>原生方法：</p>\n<pre><code class=\"objective-c\">    NSURL* url = [NSURL URLWithString:HomeUrl]; //url\n    NSURLRequest* request = [NSURLRequest requestWithURL:url];//请求\n    NSURLSession* session = [NSURLSession sharedSession]; //session\n    NSURLSessionDataTask* task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {\n        if(error){\n\n            NSLog(@&quot;请求失败&quot;);\n        }\n        else{\n\n            NSLog(@&quot;请求成功&quot;);\n            NSString *receiveStr = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];\n\n            NSData * jsonData = [receiveStr dataUsingEncoding:NSUTF8StringEncoding];\n\n            NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableLeaves error:nil];\n        }\n    }];\n    [task resume];\n</code></pre>\n"},{"title":" 闭包、lambda 计算、block","date":"2018-01-15T07:07:23.000Z","_content":"\n# block\n\n导读：\n\n* 什么是 block？\n* block 基本原理是什么？\n* 使用 block 需要避免哪些问题？\n\n\n\n##1、什么是 block\n\n###（1）Block\n\nblock 概念：block是带有**自动变量值**的**匿名函数**。也称为闭包（closure）、lambda 计算。\n\nC语言的标注不允许存在这样的函数，但是可以通过函数指针来直接调用函数。\n\n```c \n// 声明一个函数\nint func(int count);      \n\n// 声明一个函数指针，并取出 func 的地址赋给 *funcP\nint (*funcP)(int count) = &func;   //注：函数形参可有可无，视情况而定\n\n// 通过函数名访问这个函数\nint result1 = func(10);   \n\n// 通过函数的指针访问这个函数\nint result2 = (*funcP)(10);\n```\n\n\n\n### （2）函数指针的用途：\n\n函数指针的用途有两个：\n\n* 调用函数\n* 作为函数的参数\n\n>```c++\n>Class* a; // a 是个对象，类型是指针\n>Class *a; // a 是个指针，类型是类\n>\n>/* \n> *  虽然上述写法均表示声明一个指针型变量，但是着重点不同。\n> *  前者意在声明一个变量，后者意在声明一个指针。\n> *  这种自行体会就好，不要拘泥于写法。\n> */\n>```\n\n\n\n### （3）悬浮指针的出现及避免\n\n声明一个指针需要注意的问题：\n\n* 避免出现**悬浮指针**（也称迷途指针、失控指针）\n\n悬浮指针的出现：dealloc 一个指针后，没有把指针置空（nil）。\n\n*如果再次调用该指针并没有重新赋值，就会出现问题*。\n\n> 注意：空指针 ！= 迷途指针。空指针指向的地址为空。\n\n> 指针的指针即本身\n\n\n\n### （4）函数中可能使用的变量：\n\n* 函数的参数\n\n* 局部变量（自动变量）\n\n* 静态变量（静态局部变量）\n\n* 全局变量\n\n* 静态全局变量\n\n  > 使用全局变量会占用更多的内存（因为其生命期长），不过在计算机配置很高的今天，这个不应该算什么问题，除非使用的是巨大对象的全局变量，能避免就一定要避免。\n\n\n\n### （5）OC 中函数和方法的区别\n\n函数和对象无关，方法和对象有关。最主要的是，函数和方法写法不一样啊！\n\n> 函数是指把一个值通过一系列计算得到一个新的值。\n>\n> 而方法更多考虑的是事情。如让一个人通过一系列动作制造一个新的东西。\n\n\n\n### （6）为什么 Block 可以作为函数参数和返回值？\n\n函数的参数和返回值可以是 void、int，也可以是一个类对象，当然也可以是指针（int* char*）。而 block 为什么可以作为函数的参数甚至是返回值呢？\n\n**因为block的本质是 OC 对象。**（OC 的 层面）\n\nblock的实质是**栈**上 block 的结构体实例。（C 的层面）这里也可以理解为是一个函数指针。\n\n> ```objective-c\n> typedef int(^blk_t)(int); // 声明一个参数为 int 型、返回值为 int 型的 blk_t类型\n> blk_t blk = ^(int count){return count+1;};// 声明一个 blk 变量\n> int (^blk)(int) = ^(int count){return count+1;};// 等价于第二行\n>\n> blk_t *blkptr = &blk;// 声明一个名为 blkptr 的 blk_t型的指针，并指向 blk 的地址。\n>\n> (*blkptr)(10); // 利用指针调用这个 blk\n> blk(10); // 直接调用这个 blk\n> ```\n\n\n\n### （7）__block 说明符\n\n引入`__block`的目的是用来声明变量的作用域的，意思就是 block 外用`__block`声明的变量，block 内也能访问到。虽然这货和全局变量有些类似，但是老机器全局变量用多了会导致浪费内存啊！（因为全局变量生命周期比较长）。\n\n吐槽：乖乖用__block吧，特大的对象做全局变量的时候，也是会出现问题的。\n\n\n\n### （8）block 的实质\n\nblock的实质是**栈**上 block 的结构体实例。（吐槽，说白了就是通过指针访问的）\n\n（写一个代码用 clang rewrite 一下就明白了，因为有 Foundation 框架，一个5行的代码能重写成将近10万行。。不过核心代码在最后几行，翻到最后看就可以了）\n\n> 重写代码的时候会发现有三个结构体，一个是`__block_imp1 `另一个是`__main_block_imp1_0`还有一个是`__main_block_desc_0`\n>\n> 这里面引申一个概念就是 IMP 和SEL，具体以后再分析(runtime)，知道SEL 表示（选择器） IMP 表示*函数指针*就可以了。\n\n\n\n`__block`的实质是栈上`__block`变量的结构体实例。\n\n```objective-c\n// block的实质结构\ntypedef objc_class *Class; //Class 为 objc_class 结构体的指针类型\n\ntypedef struct objc_object{\n  Class isa;\n} *id; //id为 objc_objec 结构体的指针类型\n```\n\n\n\n将 block源码转换为 C++源码：`clang -rewrite-objc filename`\n\n| __block变量的配置存储域 | Block 从栈复制到堆是的影响  |\n| --------------- | ----------------- |\n| 栈（stack）        | 从栈复制到堆并被 Block 持有 |\n| 堆（heap/maclloc） | 被 Block 持有        |\n\n栈上的 block ：变量作用域结束时，栈上的 __block变量和 block 被废弃\n\n堆上的 block：变量作用域结束时不受影响，需要手动释放。 \n\n\n\n## block 循环引用的问题\n\n如果在 Block 中使用__strong修饰的对象和变量，那么当 Block 从栈复制到堆上的时候，该对象就会被 Block所持有。这样就会引起循环引用。\n\n> 循环引用这里有个重点，Block 是存储在栈上的，普通对象和变量是存储在堆上的。堆（malloc）上的内存需要我们手动管理（需要 dealloc），而栈上的内存顾名思义是按照数据结构中栈的方式管理，即由系统进行分配。\n\n\n\n**对象持有 block => block持有 self => self 持有对象，即形成循环引用。**（这里的 self 也包含当前类的其他属性，因为在调用属性的同时也截获了 self）。\n\n> 编译器能查出循环引用。\n\n## copy release\n\nARC 无效的时候，我们需要手动将 Block 从栈复制到堆。\n\n因为 ARC 无效，所以需要我们手动释放复制的 Block。\n\n这个时候我们用 copy 方法来复制，release 方法来释放。\n\n```objective-c\nvoid (^block_on_heap)(void) = [block_on_stack copy];//正常复制\n\n[block_on_heap release];//正常释放\n\n[block_on_heap retain]; // 因为block 在堆上，所以可以被 retain\n\n[block_on_stack retain];// 因为现在 block 在栈上，所以这个方法没用\n```\n\n\n\n> ARC 是苹果公司在iOS 5 以后推出的内存管理机制。。iOS 5以前是手动管理的。。如果还问我 ARC 的话，那我基本不考虑你们公司了。。。。\n\n\n\n## __block的作用\n\nARC 无效__block用来避免 Block 中出现的循环引用。\n\n栈——>堆时：__block修饰的变量不会被 retain。没用它修饰的就会被 retain。\n\n\n\n## ARC\n\n| 对象操作    | OC 方法                          |\n| ------- | ------------------------------ |\n| 生成并持有对象 | + alloc、+ new、copy、mutableCopy |\n| 持有对象    | - retain                       |\n| 释放对象    | - release                      |\n| 废弃对象    | - dealloc                      |\n\n\n\n## `__strong` 和 `__weak`\n\n__strong：表示对对象的强引用。即在超出其作用域被废弃时，随着强引用的释放，引用的对象也会被释放。\n\n\n\n## 内存泄露\n\n循环引用容易导致内存泄露。内存泄露就是应当废弃的对象在超出其生存周期后继续存在。","source":"_posts/iOS开发/iOS 开发基础/闭包、lambda-计算、block.md","raw":"---\ntitle: ' 闭包、lambda 计算、block'\ndate: 2018-01-15 15:07:23\ntags:\ncategories: iOS开发\n---\n\n# block\n\n导读：\n\n* 什么是 block？\n* block 基本原理是什么？\n* 使用 block 需要避免哪些问题？\n\n\n\n##1、什么是 block\n\n###（1）Block\n\nblock 概念：block是带有**自动变量值**的**匿名函数**。也称为闭包（closure）、lambda 计算。\n\nC语言的标注不允许存在这样的函数，但是可以通过函数指针来直接调用函数。\n\n```c \n// 声明一个函数\nint func(int count);      \n\n// 声明一个函数指针，并取出 func 的地址赋给 *funcP\nint (*funcP)(int count) = &func;   //注：函数形参可有可无，视情况而定\n\n// 通过函数名访问这个函数\nint result1 = func(10);   \n\n// 通过函数的指针访问这个函数\nint result2 = (*funcP)(10);\n```\n\n\n\n### （2）函数指针的用途：\n\n函数指针的用途有两个：\n\n* 调用函数\n* 作为函数的参数\n\n>```c++\n>Class* a; // a 是个对象，类型是指针\n>Class *a; // a 是个指针，类型是类\n>\n>/* \n> *  虽然上述写法均表示声明一个指针型变量，但是着重点不同。\n> *  前者意在声明一个变量，后者意在声明一个指针。\n> *  这种自行体会就好，不要拘泥于写法。\n> */\n>```\n\n\n\n### （3）悬浮指针的出现及避免\n\n声明一个指针需要注意的问题：\n\n* 避免出现**悬浮指针**（也称迷途指针、失控指针）\n\n悬浮指针的出现：dealloc 一个指针后，没有把指针置空（nil）。\n\n*如果再次调用该指针并没有重新赋值，就会出现问题*。\n\n> 注意：空指针 ！= 迷途指针。空指针指向的地址为空。\n\n> 指针的指针即本身\n\n\n\n### （4）函数中可能使用的变量：\n\n* 函数的参数\n\n* 局部变量（自动变量）\n\n* 静态变量（静态局部变量）\n\n* 全局变量\n\n* 静态全局变量\n\n  > 使用全局变量会占用更多的内存（因为其生命期长），不过在计算机配置很高的今天，这个不应该算什么问题，除非使用的是巨大对象的全局变量，能避免就一定要避免。\n\n\n\n### （5）OC 中函数和方法的区别\n\n函数和对象无关，方法和对象有关。最主要的是，函数和方法写法不一样啊！\n\n> 函数是指把一个值通过一系列计算得到一个新的值。\n>\n> 而方法更多考虑的是事情。如让一个人通过一系列动作制造一个新的东西。\n\n\n\n### （6）为什么 Block 可以作为函数参数和返回值？\n\n函数的参数和返回值可以是 void、int，也可以是一个类对象，当然也可以是指针（int* char*）。而 block 为什么可以作为函数的参数甚至是返回值呢？\n\n**因为block的本质是 OC 对象。**（OC 的 层面）\n\nblock的实质是**栈**上 block 的结构体实例。（C 的层面）这里也可以理解为是一个函数指针。\n\n> ```objective-c\n> typedef int(^blk_t)(int); // 声明一个参数为 int 型、返回值为 int 型的 blk_t类型\n> blk_t blk = ^(int count){return count+1;};// 声明一个 blk 变量\n> int (^blk)(int) = ^(int count){return count+1;};// 等价于第二行\n>\n> blk_t *blkptr = &blk;// 声明一个名为 blkptr 的 blk_t型的指针，并指向 blk 的地址。\n>\n> (*blkptr)(10); // 利用指针调用这个 blk\n> blk(10); // 直接调用这个 blk\n> ```\n\n\n\n### （7）__block 说明符\n\n引入`__block`的目的是用来声明变量的作用域的，意思就是 block 外用`__block`声明的变量，block 内也能访问到。虽然这货和全局变量有些类似，但是老机器全局变量用多了会导致浪费内存啊！（因为全局变量生命周期比较长）。\n\n吐槽：乖乖用__block吧，特大的对象做全局变量的时候，也是会出现问题的。\n\n\n\n### （8）block 的实质\n\nblock的实质是**栈**上 block 的结构体实例。（吐槽，说白了就是通过指针访问的）\n\n（写一个代码用 clang rewrite 一下就明白了，因为有 Foundation 框架，一个5行的代码能重写成将近10万行。。不过核心代码在最后几行，翻到最后看就可以了）\n\n> 重写代码的时候会发现有三个结构体，一个是`__block_imp1 `另一个是`__main_block_imp1_0`还有一个是`__main_block_desc_0`\n>\n> 这里面引申一个概念就是 IMP 和SEL，具体以后再分析(runtime)，知道SEL 表示（选择器） IMP 表示*函数指针*就可以了。\n\n\n\n`__block`的实质是栈上`__block`变量的结构体实例。\n\n```objective-c\n// block的实质结构\ntypedef objc_class *Class; //Class 为 objc_class 结构体的指针类型\n\ntypedef struct objc_object{\n  Class isa;\n} *id; //id为 objc_objec 结构体的指针类型\n```\n\n\n\n将 block源码转换为 C++源码：`clang -rewrite-objc filename`\n\n| __block变量的配置存储域 | Block 从栈复制到堆是的影响  |\n| --------------- | ----------------- |\n| 栈（stack）        | 从栈复制到堆并被 Block 持有 |\n| 堆（heap/maclloc） | 被 Block 持有        |\n\n栈上的 block ：变量作用域结束时，栈上的 __block变量和 block 被废弃\n\n堆上的 block：变量作用域结束时不受影响，需要手动释放。 \n\n\n\n## block 循环引用的问题\n\n如果在 Block 中使用__strong修饰的对象和变量，那么当 Block 从栈复制到堆上的时候，该对象就会被 Block所持有。这样就会引起循环引用。\n\n> 循环引用这里有个重点，Block 是存储在栈上的，普通对象和变量是存储在堆上的。堆（malloc）上的内存需要我们手动管理（需要 dealloc），而栈上的内存顾名思义是按照数据结构中栈的方式管理，即由系统进行分配。\n\n\n\n**对象持有 block => block持有 self => self 持有对象，即形成循环引用。**（这里的 self 也包含当前类的其他属性，因为在调用属性的同时也截获了 self）。\n\n> 编译器能查出循环引用。\n\n## copy release\n\nARC 无效的时候，我们需要手动将 Block 从栈复制到堆。\n\n因为 ARC 无效，所以需要我们手动释放复制的 Block。\n\n这个时候我们用 copy 方法来复制，release 方法来释放。\n\n```objective-c\nvoid (^block_on_heap)(void) = [block_on_stack copy];//正常复制\n\n[block_on_heap release];//正常释放\n\n[block_on_heap retain]; // 因为block 在堆上，所以可以被 retain\n\n[block_on_stack retain];// 因为现在 block 在栈上，所以这个方法没用\n```\n\n\n\n> ARC 是苹果公司在iOS 5 以后推出的内存管理机制。。iOS 5以前是手动管理的。。如果还问我 ARC 的话，那我基本不考虑你们公司了。。。。\n\n\n\n## __block的作用\n\nARC 无效__block用来避免 Block 中出现的循环引用。\n\n栈——>堆时：__block修饰的变量不会被 retain。没用它修饰的就会被 retain。\n\n\n\n## ARC\n\n| 对象操作    | OC 方法                          |\n| ------- | ------------------------------ |\n| 生成并持有对象 | + alloc、+ new、copy、mutableCopy |\n| 持有对象    | - retain                       |\n| 释放对象    | - release                      |\n| 废弃对象    | - dealloc                      |\n\n\n\n## `__strong` 和 `__weak`\n\n__strong：表示对对象的强引用。即在超出其作用域被废弃时，随着强引用的释放，引用的对象也会被释放。\n\n\n\n## 内存泄露\n\n循环引用容易导致内存泄露。内存泄露就是应当废弃的对象在超出其生存周期后继续存在。","slug":"iOS开发/iOS 开发基础/闭包、lambda-计算、block","published":1,"updated":"2018-01-17T09:53:42.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb7z001adc4mnonu1qcw","content":"<h1 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h1><p>导读：</p>\n<ul>\n<li>什么是 block？</li>\n<li>block 基本原理是什么？</li>\n<li>使用 block 需要避免哪些问题？</li>\n</ul>\n<p>##1、什么是 block</p>\n<p>###（1）Block</p>\n<p>block 概念：block是带有<strong>自动变量值</strong>的<strong>匿名函数</strong>。也称为闭包（closure）、lambda 计算。</p>\n<p>C语言的标注不允许存在这样的函数，但是可以通过函数指针来直接调用函数。</p>\n<pre><code class=\"c\">// 声明一个函数\nint func(int count);      \n\n// 声明一个函数指针，并取出 func 的地址赋给 *funcP\nint (*funcP)(int count) = &amp;func;   //注：函数形参可有可无，视情况而定\n\n// 通过函数名访问这个函数\nint result1 = func(10);   \n\n// 通过函数的指针访问这个函数\nint result2 = (*funcP)(10);\n</code></pre>\n<h3 id=\"（2）函数指针的用途：\"><a href=\"#（2）函数指针的用途：\" class=\"headerlink\" title=\"（2）函数指针的用途：\"></a>（2）函数指针的用途：</h3><p>函数指针的用途有两个：</p>\n<ul>\n<li>调用函数</li>\n<li>作为函数的参数</li>\n</ul>\n<blockquote>\n<pre><code class=\"c++\">Class* a; // a 是个对象，类型是指针\nClass *a; // a 是个指针，类型是类\n\n/* \n*  虽然上述写法均表示声明一个指针型变量，但是着重点不同。\n*  前者意在声明一个变量，后者意在声明一个指针。\n*  这种自行体会就好，不要拘泥于写法。\n*/\n</code></pre>\n</blockquote>\n<h3 id=\"（3）悬浮指针的出现及避免\"><a href=\"#（3）悬浮指针的出现及避免\" class=\"headerlink\" title=\"（3）悬浮指针的出现及避免\"></a>（3）悬浮指针的出现及避免</h3><p>声明一个指针需要注意的问题：</p>\n<ul>\n<li>避免出现<strong>悬浮指针</strong>（也称迷途指针、失控指针）</li>\n</ul>\n<p>悬浮指针的出现：dealloc 一个指针后，没有把指针置空（nil）。</p>\n<p><em>如果再次调用该指针并没有重新赋值，就会出现问题</em>。</p>\n<blockquote>\n<p>注意：空指针 ！= 迷途指针。空指针指向的地址为空。</p>\n<p>指针的指针即本身</p>\n</blockquote>\n<h3 id=\"（4）函数中可能使用的变量：\"><a href=\"#（4）函数中可能使用的变量：\" class=\"headerlink\" title=\"（4）函数中可能使用的变量：\"></a>（4）函数中可能使用的变量：</h3><ul>\n<li><p>函数的参数</p>\n</li>\n<li><p>局部变量（自动变量）</p>\n</li>\n<li><p>静态变量（静态局部变量）</p>\n</li>\n<li><p>全局变量</p>\n</li>\n<li><p>静态全局变量</p>\n<blockquote>\n<p>使用全局变量会占用更多的内存（因为其生命期长），不过在计算机配置很高的今天，这个不应该算什么问题，除非使用的是巨大对象的全局变量，能避免就一定要避免。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"（5）OC-中函数和方法的区别\"><a href=\"#（5）OC-中函数和方法的区别\" class=\"headerlink\" title=\"（5）OC 中函数和方法的区别\"></a>（5）OC 中函数和方法的区别</h3><p>函数和对象无关，方法和对象有关。最主要的是，函数和方法写法不一样啊！</p>\n<blockquote>\n<p>函数是指把一个值通过一系列计算得到一个新的值。</p>\n<p>而方法更多考虑的是事情。如让一个人通过一系列动作制造一个新的东西。</p>\n</blockquote>\n<h3 id=\"（6）为什么-Block-可以作为函数参数和返回值？\"><a href=\"#（6）为什么-Block-可以作为函数参数和返回值？\" class=\"headerlink\" title=\"（6）为什么 Block 可以作为函数参数和返回值？\"></a>（6）为什么 Block 可以作为函数参数和返回值？</h3><p>函数的参数和返回值可以是 void、int，也可以是一个类对象，当然也可以是指针（int<em> char</em>）。而 block 为什么可以作为函数的参数甚至是返回值呢？</p>\n<p><strong>因为block的本质是 OC 对象。</strong>（OC 的 层面）</p>\n<p>block的实质是<strong>栈</strong>上 block 的结构体实例。（C 的层面）这里也可以理解为是一个函数指针。</p>\n<blockquote>\n<pre><code class=\"objective-c\">typedef int(^blk_t)(int); // 声明一个参数为 int 型、返回值为 int 型的 blk_t类型\nblk_t blk = ^(int count){return count+1;};// 声明一个 blk 变量\nint (^blk)(int) = ^(int count){return count+1;};// 等价于第二行\n\nblk_t *blkptr = &amp;blk;// 声明一个名为 blkptr 的 blk_t型的指针，并指向 blk 的地址。\n\n(*blkptr)(10); // 利用指针调用这个 blk\nblk(10); // 直接调用这个 blk\n</code></pre>\n</blockquote>\n<h3 id=\"（7）-block-说明符\"><a href=\"#（7）-block-说明符\" class=\"headerlink\" title=\"（7）__block 说明符\"></a>（7）__block 说明符</h3><p>引入<code>__block</code>的目的是用来声明变量的作用域的，意思就是 block 外用<code>__block</code>声明的变量，block 内也能访问到。虽然这货和全局变量有些类似，但是老机器全局变量用多了会导致浪费内存啊！（因为全局变量生命周期比较长）。</p>\n<p>吐槽：乖乖用__block吧，特大的对象做全局变量的时候，也是会出现问题的。</p>\n<h3 id=\"（8）block-的实质\"><a href=\"#（8）block-的实质\" class=\"headerlink\" title=\"（8）block 的实质\"></a>（8）block 的实质</h3><p>block的实质是<strong>栈</strong>上 block 的结构体实例。（吐槽，说白了就是通过指针访问的）</p>\n<p>（写一个代码用 clang rewrite 一下就明白了，因为有 Foundation 框架，一个5行的代码能重写成将近10万行。。不过核心代码在最后几行，翻到最后看就可以了）</p>\n<blockquote>\n<p>重写代码的时候会发现有三个结构体，一个是<code>__block_imp1</code>另一个是<code>__main_block_imp1_0</code>还有一个是<code>__main_block_desc_0</code></p>\n<p>这里面引申一个概念就是 IMP 和SEL，具体以后再分析(runtime)，知道SEL 表示（选择器） IMP 表示<em>函数指针</em>就可以了。</p>\n</blockquote>\n<p><code>__block</code>的实质是栈上<code>__block</code>变量的结构体实例。</p>\n<pre><code class=\"objective-c\">// block的实质结构\ntypedef objc_class *Class; //Class 为 objc_class 结构体的指针类型\n\ntypedef struct objc_object{\n  Class isa;\n} *id; //id为 objc_objec 结构体的指针类型\n</code></pre>\n<p>将 block源码转换为 C++源码：<code>clang -rewrite-objc filename</code></p>\n<table>\n<thead>\n<tr>\n<th>__block变量的配置存储域</th>\n<th>Block 从栈复制到堆是的影响</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>栈（stack）</td>\n<td>从栈复制到堆并被 Block 持有</td>\n</tr>\n<tr>\n<td>堆（heap/maclloc）</td>\n<td>被 Block 持有</td>\n</tr>\n</tbody>\n</table>\n<p>栈上的 block ：变量作用域结束时，栈上的 __block变量和 block 被废弃</p>\n<p>堆上的 block：变量作用域结束时不受影响，需要手动释放。 </p>\n<h2 id=\"block-循环引用的问题\"><a href=\"#block-循环引用的问题\" class=\"headerlink\" title=\"block 循环引用的问题\"></a>block 循环引用的问题</h2><p>如果在 Block 中使用__strong修饰的对象和变量，那么当 Block 从栈复制到堆上的时候，该对象就会被 Block所持有。这样就会引起循环引用。</p>\n<blockquote>\n<p>循环引用这里有个重点，Block 是存储在栈上的，普通对象和变量是存储在堆上的。堆（malloc）上的内存需要我们手动管理（需要 dealloc），而栈上的内存顾名思义是按照数据结构中栈的方式管理，即由系统进行分配。</p>\n</blockquote>\n<p><strong>对象持有 block =&gt; block持有 self =&gt; self 持有对象，即形成循环引用。</strong>（这里的 self 也包含当前类的其他属性，因为在调用属性的同时也截获了 self）。</p>\n<blockquote>\n<p>编译器能查出循环引用。</p>\n</blockquote>\n<h2 id=\"copy-release\"><a href=\"#copy-release\" class=\"headerlink\" title=\"copy release\"></a>copy release</h2><p>ARC 无效的时候，我们需要手动将 Block 从栈复制到堆。</p>\n<p>因为 ARC 无效，所以需要我们手动释放复制的 Block。</p>\n<p>这个时候我们用 copy 方法来复制，release 方法来释放。</p>\n<pre><code class=\"objective-c\">void (^block_on_heap)(void) = [block_on_stack copy];//正常复制\n\n[block_on_heap release];//正常释放\n\n[block_on_heap retain]; // 因为block 在堆上，所以可以被 retain\n\n[block_on_stack retain];// 因为现在 block 在栈上，所以这个方法没用\n</code></pre>\n<blockquote>\n<p>ARC 是苹果公司在iOS 5 以后推出的内存管理机制。。iOS 5以前是手动管理的。。如果还问我 ARC 的话，那我基本不考虑你们公司了。。。。</p>\n</blockquote>\n<h2 id=\"block的作用\"><a href=\"#block的作用\" class=\"headerlink\" title=\"__block的作用\"></a>__block的作用</h2><p>ARC 无效__block用来避免 Block 中出现的循环引用。</p>\n<p>栈——&gt;堆时：__block修饰的变量不会被 retain。没用它修饰的就会被 retain。</p>\n<h2 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h2><table>\n<thead>\n<tr>\n<th>对象操作</th>\n<th>OC 方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>生成并持有对象</td>\n<td>+ alloc、+ new、copy、mutableCopy</td>\n</tr>\n<tr>\n<td>持有对象</td>\n<td>- retain</td>\n</tr>\n<tr>\n<td>释放对象</td>\n<td>- release</td>\n</tr>\n<tr>\n<td>废弃对象</td>\n<td>- dealloc</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"strong-和-weak\"><a href=\"#strong-和-weak\" class=\"headerlink\" title=\"__strong 和 __weak\"></a><code>__strong</code> 和 <code>__weak</code></h2><p>__strong：表示对对象的强引用。即在超出其作用域被废弃时，随着强引用的释放，引用的对象也会被释放。</p>\n<h2 id=\"内存泄露\"><a href=\"#内存泄露\" class=\"headerlink\" title=\"内存泄露\"></a>内存泄露</h2><p>循环引用容易导致内存泄露。内存泄露就是应当废弃的对象在超出其生存周期后继续存在。</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<h1 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h1><p>导读：</p>\n<ul>\n<li>什么是 block？</li>\n<li>block 基本原理是什么？</li>\n<li>使用 block 需要避免哪些问题？</li>\n</ul>\n<p>##1、什么是 block</p>\n<p>###（1）Block</p>\n<p>block 概念：block是带有<strong>自动变量值</strong>的<strong>匿名函数</strong>。也称为闭包（closure）、lambda 计算。</p>\n<p>C语言的标注不允许存在这样的函数，但是可以通过函数指针来直接调用函数。</p>\n<pre><code class=\"c\">// 声明一个函数\nint func(int count);      \n\n// 声明一个函数指针，并取出 func 的地址赋给 *funcP\nint (*funcP)(int count) = &amp;func;   //注：函数形参可有可无，视情况而定\n\n// 通过函数名访问这个函数\nint result1 = func(10);   \n\n// 通过函数的指针访问这个函数\nint result2 = (*funcP)(10);\n</code></pre>\n<h3 id=\"（2）函数指针的用途：\"><a href=\"#（2）函数指针的用途：\" class=\"headerlink\" title=\"（2）函数指针的用途：\"></a>（2）函数指针的用途：</h3><p>函数指针的用途有两个：</p>\n<ul>\n<li>调用函数</li>\n<li>作为函数的参数</li>\n</ul>\n<blockquote>\n<pre><code class=\"c++\">Class* a; // a 是个对象，类型是指针\nClass *a; // a 是个指针，类型是类\n\n/* \n*  虽然上述写法均表示声明一个指针型变量，但是着重点不同。\n*  前者意在声明一个变量，后者意在声明一个指针。\n*  这种自行体会就好，不要拘泥于写法。\n*/\n</code></pre>\n</blockquote>\n<h3 id=\"（3）悬浮指针的出现及避免\"><a href=\"#（3）悬浮指针的出现及避免\" class=\"headerlink\" title=\"（3）悬浮指针的出现及避免\"></a>（3）悬浮指针的出现及避免</h3><p>声明一个指针需要注意的问题：</p>\n<ul>\n<li>避免出现<strong>悬浮指针</strong>（也称迷途指针、失控指针）</li>\n</ul>\n<p>悬浮指针的出现：dealloc 一个指针后，没有把指针置空（nil）。</p>\n<p><em>如果再次调用该指针并没有重新赋值，就会出现问题</em>。</p>\n<blockquote>\n<p>注意：空指针 ！= 迷途指针。空指针指向的地址为空。</p>\n<p>指针的指针即本身</p>\n</blockquote>\n<h3 id=\"（4）函数中可能使用的变量：\"><a href=\"#（4）函数中可能使用的变量：\" class=\"headerlink\" title=\"（4）函数中可能使用的变量：\"></a>（4）函数中可能使用的变量：</h3><ul>\n<li><p>函数的参数</p>\n</li>\n<li><p>局部变量（自动变量）</p>\n</li>\n<li><p>静态变量（静态局部变量）</p>\n</li>\n<li><p>全局变量</p>\n</li>\n<li><p>静态全局变量</p>\n<blockquote>\n<p>使用全局变量会占用更多的内存（因为其生命期长），不过在计算机配置很高的今天，这个不应该算什么问题，除非使用的是巨大对象的全局变量，能避免就一定要避免。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"（5）OC-中函数和方法的区别\"><a href=\"#（5）OC-中函数和方法的区别\" class=\"headerlink\" title=\"（5）OC 中函数和方法的区别\"></a>（5）OC 中函数和方法的区别</h3><p>函数和对象无关，方法和对象有关。最主要的是，函数和方法写法不一样啊！</p>\n<blockquote>\n<p>函数是指把一个值通过一系列计算得到一个新的值。</p>\n<p>而方法更多考虑的是事情。如让一个人通过一系列动作制造一个新的东西。</p>\n</blockquote>\n<h3 id=\"（6）为什么-Block-可以作为函数参数和返回值？\"><a href=\"#（6）为什么-Block-可以作为函数参数和返回值？\" class=\"headerlink\" title=\"（6）为什么 Block 可以作为函数参数和返回值？\"></a>（6）为什么 Block 可以作为函数参数和返回值？</h3><p>函数的参数和返回值可以是 void、int，也可以是一个类对象，当然也可以是指针（int<em> char</em>）。而 block 为什么可以作为函数的参数甚至是返回值呢？</p>\n<p><strong>因为block的本质是 OC 对象。</strong>（OC 的 层面）</p>\n<p>block的实质是<strong>栈</strong>上 block 的结构体实例。（C 的层面）这里也可以理解为是一个函数指针。</p>\n<blockquote>\n<pre><code class=\"objective-c\">typedef int(^blk_t)(int); // 声明一个参数为 int 型、返回值为 int 型的 blk_t类型\nblk_t blk = ^(int count){return count+1;};// 声明一个 blk 变量\nint (^blk)(int) = ^(int count){return count+1;};// 等价于第二行\n\nblk_t *blkptr = &amp;blk;// 声明一个名为 blkptr 的 blk_t型的指针，并指向 blk 的地址。\n\n(*blkptr)(10); // 利用指针调用这个 blk\nblk(10); // 直接调用这个 blk\n</code></pre>\n</blockquote>\n<h3 id=\"（7）-block-说明符\"><a href=\"#（7）-block-说明符\" class=\"headerlink\" title=\"（7）__block 说明符\"></a>（7）__block 说明符</h3><p>引入<code>__block</code>的目的是用来声明变量的作用域的，意思就是 block 外用<code>__block</code>声明的变量，block 内也能访问到。虽然这货和全局变量有些类似，但是老机器全局变量用多了会导致浪费内存啊！（因为全局变量生命周期比较长）。</p>\n<p>吐槽：乖乖用__block吧，特大的对象做全局变量的时候，也是会出现问题的。</p>\n<h3 id=\"（8）block-的实质\"><a href=\"#（8）block-的实质\" class=\"headerlink\" title=\"（8）block 的实质\"></a>（8）block 的实质</h3><p>block的实质是<strong>栈</strong>上 block 的结构体实例。（吐槽，说白了就是通过指针访问的）</p>\n<p>（写一个代码用 clang rewrite 一下就明白了，因为有 Foundation 框架，一个5行的代码能重写成将近10万行。。不过核心代码在最后几行，翻到最后看就可以了）</p>\n<blockquote>\n<p>重写代码的时候会发现有三个结构体，一个是<code>__block_imp1</code>另一个是<code>__main_block_imp1_0</code>还有一个是<code>__main_block_desc_0</code></p>\n<p>这里面引申一个概念就是 IMP 和SEL，具体以后再分析(runtime)，知道SEL 表示（选择器） IMP 表示<em>函数指针</em>就可以了。</p>\n</blockquote>\n<p><code>__block</code>的实质是栈上<code>__block</code>变量的结构体实例。</p>\n<pre><code class=\"objective-c\">// block的实质结构\ntypedef objc_class *Class; //Class 为 objc_class 结构体的指针类型\n\ntypedef struct objc_object{\n  Class isa;\n} *id; //id为 objc_objec 结构体的指针类型\n</code></pre>\n<p>将 block源码转换为 C++源码：<code>clang -rewrite-objc filename</code></p>\n<table>\n<thead>\n<tr>\n<th>__block变量的配置存储域</th>\n<th>Block 从栈复制到堆是的影响</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>栈（stack）</td>\n<td>从栈复制到堆并被 Block 持有</td>\n</tr>\n<tr>\n<td>堆（heap/maclloc）</td>\n<td>被 Block 持有</td>\n</tr>\n</tbody>\n</table>\n<p>栈上的 block ：变量作用域结束时，栈上的 __block变量和 block 被废弃</p>\n<p>堆上的 block：变量作用域结束时不受影响，需要手动释放。 </p>\n<h2 id=\"block-循环引用的问题\"><a href=\"#block-循环引用的问题\" class=\"headerlink\" title=\"block 循环引用的问题\"></a>block 循环引用的问题</h2><p>如果在 Block 中使用__strong修饰的对象和变量，那么当 Block 从栈复制到堆上的时候，该对象就会被 Block所持有。这样就会引起循环引用。</p>\n<blockquote>\n<p>循环引用这里有个重点，Block 是存储在栈上的，普通对象和变量是存储在堆上的。堆（malloc）上的内存需要我们手动管理（需要 dealloc），而栈上的内存顾名思义是按照数据结构中栈的方式管理，即由系统进行分配。</p>\n</blockquote>\n<p><strong>对象持有 block =&gt; block持有 self =&gt; self 持有对象，即形成循环引用。</strong>（这里的 self 也包含当前类的其他属性，因为在调用属性的同时也截获了 self）。</p>\n<blockquote>\n<p>编译器能查出循环引用。</p>\n</blockquote>\n<h2 id=\"copy-release\"><a href=\"#copy-release\" class=\"headerlink\" title=\"copy release\"></a>copy release</h2><p>ARC 无效的时候，我们需要手动将 Block 从栈复制到堆。</p>\n<p>因为 ARC 无效，所以需要我们手动释放复制的 Block。</p>\n<p>这个时候我们用 copy 方法来复制，release 方法来释放。</p>\n<pre><code class=\"objective-c\">void (^block_on_heap)(void) = [block_on_stack copy];//正常复制\n\n[block_on_heap release];//正常释放\n\n[block_on_heap retain]; // 因为block 在堆上，所以可以被 retain\n\n[block_on_stack retain];// 因为现在 block 在栈上，所以这个方法没用\n</code></pre>\n<blockquote>\n<p>ARC 是苹果公司在iOS 5 以后推出的内存管理机制。。iOS 5以前是手动管理的。。如果还问我 ARC 的话，那我基本不考虑你们公司了。。。。</p>\n</blockquote>\n<h2 id=\"block的作用\"><a href=\"#block的作用\" class=\"headerlink\" title=\"__block的作用\"></a>__block的作用</h2><p>ARC 无效__block用来避免 Block 中出现的循环引用。</p>\n<p>栈——&gt;堆时：__block修饰的变量不会被 retain。没用它修饰的就会被 retain。</p>\n<h2 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h2><table>\n<thead>\n<tr>\n<th>对象操作</th>\n<th>OC 方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>生成并持有对象</td>\n<td>+ alloc、+ new、copy、mutableCopy</td>\n</tr>\n<tr>\n<td>持有对象</td>\n<td>- retain</td>\n</tr>\n<tr>\n<td>释放对象</td>\n<td>- release</td>\n</tr>\n<tr>\n<td>废弃对象</td>\n<td>- dealloc</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"strong-和-weak\"><a href=\"#strong-和-weak\" class=\"headerlink\" title=\"__strong 和 __weak\"></a><code>__strong</code> 和 <code>__weak</code></h2><p>__strong：表示对对象的强引用。即在超出其作用域被废弃时，随着强引用的释放，引用的对象也会被释放。</p>\n<h2 id=\"内存泄露\"><a href=\"#内存泄露\" class=\"headerlink\" title=\"内存泄露\"></a>内存泄露</h2><p>循环引用容易导致内存泄露。内存泄露就是应当废弃的对象在超出其生存周期后继续存在。</p>\n"},{"title":"从微信跳一跳学习逆向开发iOS","date":"2017-12-29T09:05:40.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515671098503&di=650c7f02a784008ee52200ccb1115324&imgtype=0&src=http%3A%2F%2Ff3.topitme.com%2F3%2Fb9%2F57%2F1132270460a9c57b93o.jpg","_content":"\n# 从微信跳一跳学习逆向开发 iOS\n\n[TOC]\n\n### 一、libimobiledevice与 adb\n\nlibimobiledevice：逆向出 iOS 与 Mac Windows 接口的通讯协议\n\nadb：安卓下调试工具\n\n\n\n### 二、安装libimobiledevice\n\n```\n$ brew update\n$ brew install libimobiledevice\n#libimobiledevice中并不包含ipa的安装命令，所以还需要安装\n$ brew install ideviceinstaller\n```\n\n\n\n","source":"_posts/iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS.md","raw":"---\ntitle: 从微信跳一跳学习逆向开发iOS\ndate: 2017-12-29 17:05:40\ncategories: iOS开发\t\ntags: libimobiledevice\nthumbnail: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515671098503&di=650c7f02a784008ee52200ccb1115324&imgtype=0&src=http%3A%2F%2Ff3.topitme.com%2F3%2Fb9%2F57%2F1132270460a9c57b93o.jpg\"\n---\n\n# 从微信跳一跳学习逆向开发 iOS\n\n[TOC]\n\n### 一、libimobiledevice与 adb\n\nlibimobiledevice：逆向出 iOS 与 Mac Windows 接口的通讯协议\n\nadb：安卓下调试工具\n\n\n\n### 二、安装libimobiledevice\n\n```\n$ brew update\n$ brew install libimobiledevice\n#libimobiledevice中并不包含ipa的安装命令，所以还需要安装\n$ brew install ideviceinstaller\n```\n\n\n\n","slug":"iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS","published":1,"updated":"2018-01-12T06:51:05.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb80001bdc4m6d8xkuny","content":"<h1 id=\"从微信跳一跳学习逆向开发-iOS\"><a href=\"#从微信跳一跳学习逆向开发-iOS\" class=\"headerlink\" title=\"从微信跳一跳学习逆向开发 iOS\"></a>从微信跳一跳学习逆向开发 iOS</h1><p>[TOC]</p>\n<h3 id=\"一、libimobiledevice与-adb\"><a href=\"#一、libimobiledevice与-adb\" class=\"headerlink\" title=\"一、libimobiledevice与 adb\"></a>一、libimobiledevice与 adb</h3><p>libimobiledevice：逆向出 iOS 与 Mac Windows 接口的通讯协议</p>\n<p>adb：安卓下调试工具</p>\n<h3 id=\"二、安装libimobiledevice\"><a href=\"#二、安装libimobiledevice\" class=\"headerlink\" title=\"二、安装libimobiledevice\"></a>二、安装libimobiledevice</h3><pre><code>$ brew update\n$ brew install libimobiledevice\n#libimobiledevice中并不包含ipa的安装命令，所以还需要安装\n$ brew install ideviceinstaller\n</code></pre>","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<h1 id=\"从微信跳一跳学习逆向开发-iOS\"><a href=\"#从微信跳一跳学习逆向开发-iOS\" class=\"headerlink\" title=\"从微信跳一跳学习逆向开发 iOS\"></a>从微信跳一跳学习逆向开发 iOS</h1><p>[TOC]</p>\n<h3 id=\"一、libimobiledevice与-adb\"><a href=\"#一、libimobiledevice与-adb\" class=\"headerlink\" title=\"一、libimobiledevice与 adb\"></a>一、libimobiledevice与 adb</h3><p>libimobiledevice：逆向出 iOS 与 Mac Windows 接口的通讯协议</p>\n<p>adb：安卓下调试工具</p>\n<h3 id=\"二、安装libimobiledevice\"><a href=\"#二、安装libimobiledevice\" class=\"headerlink\" title=\"二、安装libimobiledevice\"></a>二、安装libimobiledevice</h3><pre><code>$ brew update\n$ brew install libimobiledevice\n#libimobiledevice中并不包含ipa的安装命令，所以还需要安装\n$ brew install ideviceinstaller\n</code></pre>"},{"title":"ios知识脉络梳理","date":"2018-01-19T15:34:21.000Z","thumbnail":"https://i0.hdslb.com/bfs/drawyoo/71c32ae66719b070ef7b565cc7e3c6237915e385.jpg","_content":"\n目录\n\n[TOC]\n\n\n\n## （一）、Foundation 相关知识点\n\n### 一、内存管理的思考方式\n\n#### 1、内存管理的原则：\n\n* 自己生成的对象，自己持有\n\n* 不是自己生成的对象，自己也能持有 （需要手动 retain）\n\n  > ```objective-c\n  > id obj = [NSMutableArray array]; // 取得对象的存在，但自己并不持有\n  > [obj retain]; // 自己持有对象\n  > ```\n\n* 不是自己持有的对象，自己无法释放\n\n* 不在需要自己持有的对象时，就要释放\n\n| 对象操作  | OC 方法                          |\n| ----- | ------------------------------ |\n| 生成并持有 | +new/+alloc/-copy/-mutableCopy |\n| 持有对象  | -retain                        |\n| 释放对象  | - release                      |\n| 废弃对象  | - dealloc                      |\n\n#### 2、autorelease：（与 release 的区别）\n\n* autorelease 可以取得对象的存在，但是自己不持有对象；\n* autorelease 可以是对象在超出指定的生存空间时能够自动并正确的释放；\n* autorelease 不是立即释放对象的，而是将该对象注册到 autoreleasepool 中，pool 结束时（drain）自动调用 release\n\n\n\n#### 3、 所有权修饰符：（一共四种）\n\n* `__weak`（__weak修饰的变量所引用的对象被废弃时，会将 nil 赋给该变量）\n\n* `__strong`\n\n* `__unsafe_unretained`\n\n* `__autoreleasing`\n\n  ​\n\n#### 4、property声明的属性与所有权修饰符的对应关系\n\n| property 声明中的属性           | 所有权修饰符                 |\n| ------------------------- | ---------------------- |\n| `assign`                  | `__unsafe_unretained`  |\n| ``unsafe_unretained`copy` | `__unsafe_unretained`  |\n| `retain`                  | `__strong`             |\n| `strong`                  | `__strong`             |\n| `copy`                    | `__strong`(赋值的是被复制的对象) |\n| `weak`                    | `__weak`               |\n\n#### 5、objc使用什么机制管理对象内存？\n\n> 通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。\n\n6、ARC通过什么方式帮助开发者管理内存？\n\n7、不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\n\n8、苹果是如何实现autoreleasepool的？\n\n### 二、block 与内存管理\n\n#### 1、使用block时什么情况会发生引用循环，如何解决？\n\n#### 2、在block内如何修改block外部变量？\n\n#### 3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\n\n### 三、关于 Copy 的一些问题\n\n#### 1、如何让自己的类用 copy 修饰符？\n\n让自己的类用 copy 修饰符：\n\n* 声明该类遵循 NSCopying 协议或者遵循 NSMutableCopying 协议\n* 实现 -copyWithZone： 方法，该方法生成并持有该对象的副本。\n\n#### 2、如何重写带关键字的 setter？\n\n```objective-c\n_obj = [obj copy]; // 返回一个该对象的副本\n```\n\n#### 3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\n\n\n\n#### 4、深复制（内容复制）和浅复制（指针复制）\n\n为了弄清这个概念，我们先来弄清楚在 集合与非集合类的 可变和不可变对象分别执行 copy 和 mutableCopy 操作。\n\n```objective-c\n/*\n * 1、无论是集合类和非集合类，只有不可变对象进行 copy 操作是浅复制，其他情况均是深复制，因为副本的结果是不\n *    可变的。其他情况副本的结果是可变的。\n * \n * 2、集合对象的内容复制仅局限于本身，对于元素来说，仍然是指针复制（浅复制）。所以，集合对象的深复制是单层\n *    深复制。\n */\n\n[immutableObject copy] // 浅复制\n[immutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject copy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n```\n\n> 关于叫复制还是叫拷贝，我觉得叫复制更为准确些，这个过程有点像 OSX 复制一个文件的副本的感觉\n>\n> [1]: https://www.zybuluo.com/MicroCai/note/50592\t\"iOS 集合的深复制与浅复制\"\n\n\n\n### 四、关于@property\n\n#### 1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\n\n* 原子性：nonatomic、atomic （默认是 atomic）（atomic 需要消耗大量内存资源，故ios 不推荐使用）\n* 读写：readonly、readwrite （默认是readwrite）\n* 内存管理：strong、weak、assign、copy、unsafe_unretained（默认是 strong 或assign）\n* 重命名方法名：\n  * ~~setter=<#name#>~~不常用，也不推荐使用\n  * getter=<#name#>\n\n#### 2、 @protocol 和 category 中如何使用 @property\n\n* 在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性\n* category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：\n  * `objc_setAssociatedObject`\n  * `objc_getAssociatedObject`\n\n#### 3、weak属性需要在dealloc中置nil么？\n\n不需要。ARC 下无论是 strong 还是 weak 都不需要置nil，ARC 会自动帮我们做这件事情。\n\n#### 4、@synthesize和@dynamic分别有什么作用？\n\n一般情况下：成员变量 +  @synthesize = @property\n\n>1. @property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是`@syntheszie var = _var;`\n>2. @synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。\n>3. @dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 `instance.var = someVar`，由于缺 setter 方法会导致程序崩溃；或者当运行到 `someVar = var` 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。\n\n\n\n#### 5、什么情况需要@synthesize\n\n* **同时重写了 setter 和 getter 时**（这种情况访问下划线变量会报错）\n* 重写了*只读属性的 getter* 时\n* 使用了 @dynamic 时\n* 在 @protocol 中定义的所有属性\n* 在 category 中定义的所有属性\n* 重载的属性\n\n#### 6、IBOutlet连出来的视图属性为什么可以被设置成weak?\n\n\n\n### 五、关于运行时 Runtime\n\nObjective-C 是一门动态语言，主要就体现在Runtime 上。\n\n#### 1、向对象发送一个消息和` objc_sendMessage(receiver, SEL：MethodID) `函数有什么关系？\n\n> [obj foo];在objc编译时，会被转意为：`objc_msgSend(obj, @selector(foo));`。\n\n\n\n#### 2、什么时候会报unrecognized（未被承认的） selector的异常？\n\n\n\n#### 3、一个objc对象的isa的指针指向什么？有什么作用？\n\n指向该对象的类对象。\n\n> @interface Chinese : People\n>\n> Chinese isa People\n\n\n\n#### 4、super 和 self 有什么区别？\n\n> super的本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。\n\nsuper：先找父类的方法，没有在找子类；\n\nself：先从当前类的列表里开始找，如果没有在去父类那找。\n\n\n\n#### 5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\n\n> 每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现。\n\n```objective-c\nIMP methodIMP = [self methodForSelector:@selector(foo:)];\nmethodIMP(); // 所以 IMP 实际上是一个指针，此处 IMP 应该是Implementation的缩写\n```\n\n\n\n#### 6、objc中的类方法和实例方法有什么本质区别和联系？\n\n> 类方法：\n>\n> 1. 类方法是属于类对象的\n> 2. 类方法只能通过类对象调用\n> 3. 类方法中的self是类对象\n> 4. 类方法可以调用其他的类方法\n> 5. 类方法中不能访问成员变量\n> 6. 类方法中不能直接调用对象方法\n>\n> 实例方法：\n>\n> 1. 实例方法是属于实例对象的\n> 2. 实例方法只能通过实例对象调用\n> 3. 实例方法中的self是实例对象\n> 4. 实例方法中可以访问成员变量\n> 5. 实例方法中直接调用实例方法\n> 6. 实例方法中也可以调用类方法(通过类名\n\n#### 7、`_objc_msgForward`函数是做什么的，直接调用它将会发生什么？\n\n#### 8、 runtime如何实现weak变量的自动置nil？\n\n#### 9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\n\n#### 10、 IB中User Defined Runtime Attributes如何使用？\n\n\n\n\n\n### 六、RunLoop 和多线程\n\n#### 1、runloop和线程有什么关系？\n\n#### 2、runloop的mode作用是什么？\n\n#### 3、 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\n\n#### 4、猜想runloop内部是如何实现的？\n\n#### 5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\n\n#### 6、`dispatch_barrier_async`的作用是什么？\n\n#### 7、苹果为什么要废弃`dispatch_get_current_queue`？\n\n因为容易造成死锁\n\n#### 8、多线程原子性与非原子性、自旋锁与互斥锁的问题\n\n[1]: http://blog.csdn.net/yi_zz32/article/details/49952727\t\"多线程——原子、非原子，自旋锁和互斥锁\"\n[2]: http://blog.csdn.net/cg_lueng/article/details/50971465\t\"多线程：原子性与非原子性\"\n\n\n\n### 七、KVO、单例、代理\n\n#### 1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\n\n#### 2、如何手动触发一个value的KVO\n\n#### 3、 KVC的keyPath中的集合运算符如何使用？\n\n#### 4、 KVC和KVO的keyPath一定是属性么？\n\n#### 5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n\n#### 6、apple用什么方式实现对一个对象的KVO？\n\n\n\n### 八、调试与 LLDB\n\n#### 1、如何调试BAD_ACCESS错误\n\n#### 2、 lldb（gdb）常用的调试命令？\n\n#### 3、BAD_ACCESS在什么情况下出现？\n\n\n\n### 九、基础知识\n\n#### 1、iOS中self.和下划线的区别？\n\n[参考链接](https://www.jianshu.com/p/4295cd39604e?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation)\n\n#### 2、懒加载与单例模式的区别？\n\n懒加载是重写的 get 方法，懒加载也称延迟加载，即在使用的时候才加载，不用在 viewDidLoad 里就全部分配内存，保证了用的时候在分配内存\n\n单例模式指的是某个类的对象是系统的唯一实例。\n\n\n\n","source":"_posts/iOS开发/其他/ios知识脉络梳理.md","raw":"---\ntitle: ios知识脉络梳理\ndate: 2018-01-19 23:34:21\ntags: \ncategories: iOS开发\nthumbnail: https://i0.hdslb.com/bfs/drawyoo/71c32ae66719b070ef7b565cc7e3c6237915e385.jpg\n---\n\n目录\n\n[TOC]\n\n\n\n## （一）、Foundation 相关知识点\n\n### 一、内存管理的思考方式\n\n#### 1、内存管理的原则：\n\n* 自己生成的对象，自己持有\n\n* 不是自己生成的对象，自己也能持有 （需要手动 retain）\n\n  > ```objective-c\n  > id obj = [NSMutableArray array]; // 取得对象的存在，但自己并不持有\n  > [obj retain]; // 自己持有对象\n  > ```\n\n* 不是自己持有的对象，自己无法释放\n\n* 不在需要自己持有的对象时，就要释放\n\n| 对象操作  | OC 方法                          |\n| ----- | ------------------------------ |\n| 生成并持有 | +new/+alloc/-copy/-mutableCopy |\n| 持有对象  | -retain                        |\n| 释放对象  | - release                      |\n| 废弃对象  | - dealloc                      |\n\n#### 2、autorelease：（与 release 的区别）\n\n* autorelease 可以取得对象的存在，但是自己不持有对象；\n* autorelease 可以是对象在超出指定的生存空间时能够自动并正确的释放；\n* autorelease 不是立即释放对象的，而是将该对象注册到 autoreleasepool 中，pool 结束时（drain）自动调用 release\n\n\n\n#### 3、 所有权修饰符：（一共四种）\n\n* `__weak`（__weak修饰的变量所引用的对象被废弃时，会将 nil 赋给该变量）\n\n* `__strong`\n\n* `__unsafe_unretained`\n\n* `__autoreleasing`\n\n  ​\n\n#### 4、property声明的属性与所有权修饰符的对应关系\n\n| property 声明中的属性           | 所有权修饰符                 |\n| ------------------------- | ---------------------- |\n| `assign`                  | `__unsafe_unretained`  |\n| ``unsafe_unretained`copy` | `__unsafe_unretained`  |\n| `retain`                  | `__strong`             |\n| `strong`                  | `__strong`             |\n| `copy`                    | `__strong`(赋值的是被复制的对象) |\n| `weak`                    | `__weak`               |\n\n#### 5、objc使用什么机制管理对象内存？\n\n> 通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。\n\n6、ARC通过什么方式帮助开发者管理内存？\n\n7、不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\n\n8、苹果是如何实现autoreleasepool的？\n\n### 二、block 与内存管理\n\n#### 1、使用block时什么情况会发生引用循环，如何解决？\n\n#### 2、在block内如何修改block外部变量？\n\n#### 3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\n\n### 三、关于 Copy 的一些问题\n\n#### 1、如何让自己的类用 copy 修饰符？\n\n让自己的类用 copy 修饰符：\n\n* 声明该类遵循 NSCopying 协议或者遵循 NSMutableCopying 协议\n* 实现 -copyWithZone： 方法，该方法生成并持有该对象的副本。\n\n#### 2、如何重写带关键字的 setter？\n\n```objective-c\n_obj = [obj copy]; // 返回一个该对象的副本\n```\n\n#### 3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\n\n\n\n#### 4、深复制（内容复制）和浅复制（指针复制）\n\n为了弄清这个概念，我们先来弄清楚在 集合与非集合类的 可变和不可变对象分别执行 copy 和 mutableCopy 操作。\n\n```objective-c\n/*\n * 1、无论是集合类和非集合类，只有不可变对象进行 copy 操作是浅复制，其他情况均是深复制，因为副本的结果是不\n *    可变的。其他情况副本的结果是可变的。\n * \n * 2、集合对象的内容复制仅局限于本身，对于元素来说，仍然是指针复制（浅复制）。所以，集合对象的深复制是单层\n *    深复制。\n */\n\n[immutableObject copy] // 浅复制\n[immutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject copy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n```\n\n> 关于叫复制还是叫拷贝，我觉得叫复制更为准确些，这个过程有点像 OSX 复制一个文件的副本的感觉\n>\n> [1]: https://www.zybuluo.com/MicroCai/note/50592\t\"iOS 集合的深复制与浅复制\"\n\n\n\n### 四、关于@property\n\n#### 1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\n\n* 原子性：nonatomic、atomic （默认是 atomic）（atomic 需要消耗大量内存资源，故ios 不推荐使用）\n* 读写：readonly、readwrite （默认是readwrite）\n* 内存管理：strong、weak、assign、copy、unsafe_unretained（默认是 strong 或assign）\n* 重命名方法名：\n  * ~~setter=<#name#>~~不常用，也不推荐使用\n  * getter=<#name#>\n\n#### 2、 @protocol 和 category 中如何使用 @property\n\n* 在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性\n* category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：\n  * `objc_setAssociatedObject`\n  * `objc_getAssociatedObject`\n\n#### 3、weak属性需要在dealloc中置nil么？\n\n不需要。ARC 下无论是 strong 还是 weak 都不需要置nil，ARC 会自动帮我们做这件事情。\n\n#### 4、@synthesize和@dynamic分别有什么作用？\n\n一般情况下：成员变量 +  @synthesize = @property\n\n>1. @property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是`@syntheszie var = _var;`\n>2. @synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。\n>3. @dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 `instance.var = someVar`，由于缺 setter 方法会导致程序崩溃；或者当运行到 `someVar = var` 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。\n\n\n\n#### 5、什么情况需要@synthesize\n\n* **同时重写了 setter 和 getter 时**（这种情况访问下划线变量会报错）\n* 重写了*只读属性的 getter* 时\n* 使用了 @dynamic 时\n* 在 @protocol 中定义的所有属性\n* 在 category 中定义的所有属性\n* 重载的属性\n\n#### 6、IBOutlet连出来的视图属性为什么可以被设置成weak?\n\n\n\n### 五、关于运行时 Runtime\n\nObjective-C 是一门动态语言，主要就体现在Runtime 上。\n\n#### 1、向对象发送一个消息和` objc_sendMessage(receiver, SEL：MethodID) `函数有什么关系？\n\n> [obj foo];在objc编译时，会被转意为：`objc_msgSend(obj, @selector(foo));`。\n\n\n\n#### 2、什么时候会报unrecognized（未被承认的） selector的异常？\n\n\n\n#### 3、一个objc对象的isa的指针指向什么？有什么作用？\n\n指向该对象的类对象。\n\n> @interface Chinese : People\n>\n> Chinese isa People\n\n\n\n#### 4、super 和 self 有什么区别？\n\n> super的本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。\n\nsuper：先找父类的方法，没有在找子类；\n\nself：先从当前类的列表里开始找，如果没有在去父类那找。\n\n\n\n#### 5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\n\n> 每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现。\n\n```objective-c\nIMP methodIMP = [self methodForSelector:@selector(foo:)];\nmethodIMP(); // 所以 IMP 实际上是一个指针，此处 IMP 应该是Implementation的缩写\n```\n\n\n\n#### 6、objc中的类方法和实例方法有什么本质区别和联系？\n\n> 类方法：\n>\n> 1. 类方法是属于类对象的\n> 2. 类方法只能通过类对象调用\n> 3. 类方法中的self是类对象\n> 4. 类方法可以调用其他的类方法\n> 5. 类方法中不能访问成员变量\n> 6. 类方法中不能直接调用对象方法\n>\n> 实例方法：\n>\n> 1. 实例方法是属于实例对象的\n> 2. 实例方法只能通过实例对象调用\n> 3. 实例方法中的self是实例对象\n> 4. 实例方法中可以访问成员变量\n> 5. 实例方法中直接调用实例方法\n> 6. 实例方法中也可以调用类方法(通过类名\n\n#### 7、`_objc_msgForward`函数是做什么的，直接调用它将会发生什么？\n\n#### 8、 runtime如何实现weak变量的自动置nil？\n\n#### 9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\n\n#### 10、 IB中User Defined Runtime Attributes如何使用？\n\n\n\n\n\n### 六、RunLoop 和多线程\n\n#### 1、runloop和线程有什么关系？\n\n#### 2、runloop的mode作用是什么？\n\n#### 3、 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\n\n#### 4、猜想runloop内部是如何实现的？\n\n#### 5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\n\n#### 6、`dispatch_barrier_async`的作用是什么？\n\n#### 7、苹果为什么要废弃`dispatch_get_current_queue`？\n\n因为容易造成死锁\n\n#### 8、多线程原子性与非原子性、自旋锁与互斥锁的问题\n\n[1]: http://blog.csdn.net/yi_zz32/article/details/49952727\t\"多线程——原子、非原子，自旋锁和互斥锁\"\n[2]: http://blog.csdn.net/cg_lueng/article/details/50971465\t\"多线程：原子性与非原子性\"\n\n\n\n### 七、KVO、单例、代理\n\n#### 1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\n\n#### 2、如何手动触发一个value的KVO\n\n#### 3、 KVC的keyPath中的集合运算符如何使用？\n\n#### 4、 KVC和KVO的keyPath一定是属性么？\n\n#### 5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n\n#### 6、apple用什么方式实现对一个对象的KVO？\n\n\n\n### 八、调试与 LLDB\n\n#### 1、如何调试BAD_ACCESS错误\n\n#### 2、 lldb（gdb）常用的调试命令？\n\n#### 3、BAD_ACCESS在什么情况下出现？\n\n\n\n### 九、基础知识\n\n#### 1、iOS中self.和下划线的区别？\n\n[参考链接](https://www.jianshu.com/p/4295cd39604e?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation)\n\n#### 2、懒加载与单例模式的区别？\n\n懒加载是重写的 get 方法，懒加载也称延迟加载，即在使用的时候才加载，不用在 viewDidLoad 里就全部分配内存，保证了用的时候在分配内存\n\n单例模式指的是某个类的对象是系统的唯一实例。\n\n\n\n","slug":"iOS开发/其他/ios知识脉络梳理","published":1,"updated":"2018-01-22T02:29:52.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb85001ddc4m3wc3i4m1","content":"<p>目录</p>\n<p>[TOC]</p>\n<h2 id=\"（一）、Foundation-相关知识点\"><a href=\"#（一）、Foundation-相关知识点\" class=\"headerlink\" title=\"（一）、Foundation 相关知识点\"></a>（一）、Foundation 相关知识点</h2><h3 id=\"一、内存管理的思考方式\"><a href=\"#一、内存管理的思考方式\" class=\"headerlink\" title=\"一、内存管理的思考方式\"></a>一、内存管理的思考方式</h3><h4 id=\"1、内存管理的原则：\"><a href=\"#1、内存管理的原则：\" class=\"headerlink\" title=\"1、内存管理的原则：\"></a>1、内存管理的原则：</h4><ul>\n<li><p>自己生成的对象，自己持有</p>\n</li>\n<li><p>不是自己生成的对象，自己也能持有 （需要手动 retain）</p>\n<blockquote>\n<pre><code class=\"objective-c\">id obj = [NSMutableArray array]; // 取得对象的存在，但自己并不持有\n[obj retain]; // 自己持有对象\n</code></pre>\n</blockquote>\n</li>\n<li><p>不是自己持有的对象，自己无法释放</p>\n</li>\n<li><p>不在需要自己持有的对象时，就要释放</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>对象操作</th>\n<th>OC 方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>生成并持有</td>\n<td>+new/+alloc/-copy/-mutableCopy</td>\n</tr>\n<tr>\n<td>持有对象</td>\n<td>-retain</td>\n</tr>\n<tr>\n<td>释放对象</td>\n<td>- release</td>\n</tr>\n<tr>\n<td>废弃对象</td>\n<td>- dealloc</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2、autorelease：（与-release-的区别）\"><a href=\"#2、autorelease：（与-release-的区别）\" class=\"headerlink\" title=\"2、autorelease：（与 release 的区别）\"></a>2、autorelease：（与 release 的区别）</h4><ul>\n<li>autorelease 可以取得对象的存在，但是自己不持有对象；</li>\n<li>autorelease 可以是对象在超出指定的生存空间时能够自动并正确的释放；</li>\n<li>autorelease 不是立即释放对象的，而是将该对象注册到 autoreleasepool 中，pool 结束时（drain）自动调用 release</li>\n</ul>\n<h4 id=\"3、-所有权修饰符：（一共四种）\"><a href=\"#3、-所有权修饰符：（一共四种）\" class=\"headerlink\" title=\"3、 所有权修饰符：（一共四种）\"></a>3、 所有权修饰符：（一共四种）</h4><ul>\n<li><p><code>__weak</code>（__weak修饰的变量所引用的对象被废弃时，会将 nil 赋给该变量）</p>\n</li>\n<li><p><code>__strong</code></p>\n</li>\n<li><p><code>__unsafe_unretained</code></p>\n</li>\n<li><p><code>__autoreleasing</code></p>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"4、property声明的属性与所有权修饰符的对应关系\"><a href=\"#4、property声明的属性与所有权修饰符的对应关系\" class=\"headerlink\" title=\"4、property声明的属性与所有权修饰符的对应关系\"></a>4、property声明的属性与所有权修饰符的对应关系</h4><table>\n<thead>\n<tr>\n<th>property 声明中的属性</th>\n<th>所有权修饰符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assign</code></td>\n<td><code>__unsafe_unretained</code></td>\n</tr>\n<tr>\n<td><code>`unsafe_unretained</code>copy`</td>\n<td><code>__unsafe_unretained</code></td>\n</tr>\n<tr>\n<td><code>retain</code></td>\n<td><code>__strong</code></td>\n</tr>\n<tr>\n<td><code>strong</code></td>\n<td><code>__strong</code></td>\n</tr>\n<tr>\n<td><code>copy</code></td>\n<td><code>__strong</code>(赋值的是被复制的对象)</td>\n</tr>\n<tr>\n<td><code>weak</code></td>\n<td><code>__weak</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5、objc使用什么机制管理对象内存？\"><a href=\"#5、objc使用什么机制管理对象内存？\" class=\"headerlink\" title=\"5、objc使用什么机制管理对象内存？\"></a>5、objc使用什么机制管理对象内存？</h4><blockquote>\n<p>通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。</p>\n</blockquote>\n<p>6、ARC通过什么方式帮助开发者管理内存？</p>\n<p>7、不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</p>\n<p>8、苹果是如何实现autoreleasepool的？</p>\n<h3 id=\"二、block-与内存管理\"><a href=\"#二、block-与内存管理\" class=\"headerlink\" title=\"二、block 与内存管理\"></a>二、block 与内存管理</h3><h4 id=\"1、使用block时什么情况会发生引用循环，如何解决？\"><a href=\"#1、使用block时什么情况会发生引用循环，如何解决？\" class=\"headerlink\" title=\"1、使用block时什么情况会发生引用循环，如何解决？\"></a>1、使用block时什么情况会发生引用循环，如何解决？</h4><h4 id=\"2、在block内如何修改block外部变量？\"><a href=\"#2、在block内如何修改block外部变量？\" class=\"headerlink\" title=\"2、在block内如何修改block外部变量？\"></a>2、在block内如何修改block外部变量？</h4><h4 id=\"3、使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"><a href=\"#3、使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\" class=\"headerlink\" title=\"3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"></a>3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</h4><h3 id=\"三、关于-Copy-的一些问题\"><a href=\"#三、关于-Copy-的一些问题\" class=\"headerlink\" title=\"三、关于 Copy 的一些问题\"></a>三、关于 Copy 的一些问题</h3><h4 id=\"1、如何让自己的类用-copy-修饰符？\"><a href=\"#1、如何让自己的类用-copy-修饰符？\" class=\"headerlink\" title=\"1、如何让自己的类用 copy 修饰符？\"></a>1、如何让自己的类用 copy 修饰符？</h4><p>让自己的类用 copy 修饰符：</p>\n<ul>\n<li>声明该类遵循 NSCopying 协议或者遵循 NSMutableCopying 协议</li>\n<li>实现 -copyWithZone： 方法，该方法生成并持有该对象的副本。</li>\n</ul>\n<h4 id=\"2、如何重写带关键字的-setter？\"><a href=\"#2、如何重写带关键字的-setter？\" class=\"headerlink\" title=\"2、如何重写带关键字的 setter？\"></a>2、如何重写带关键字的 setter？</h4><pre><code class=\"objective-c\">_obj = [obj copy]; // 返回一个该对象的副本\n</code></pre>\n<h4 id=\"3、用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"><a href=\"#3、用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\" class=\"headerlink\" title=\"3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"></a>3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</h4><h4 id=\"4、深复制（内容复制）和浅复制（指针复制）\"><a href=\"#4、深复制（内容复制）和浅复制（指针复制）\" class=\"headerlink\" title=\"4、深复制（内容复制）和浅复制（指针复制）\"></a>4、深复制（内容复制）和浅复制（指针复制）</h4><p>为了弄清这个概念，我们先来弄清楚在 集合与非集合类的 可变和不可变对象分别执行 copy 和 mutableCopy 操作。</p>\n<pre><code class=\"objective-c\">/*\n * 1、无论是集合类和非集合类，只有不可变对象进行 copy 操作是浅复制，其他情况均是深复制，因为副本的结果是不\n *    可变的。其他情况副本的结果是可变的。\n * \n * 2、集合对象的内容复制仅局限于本身，对于元素来说，仍然是指针复制（浅复制）。所以，集合对象的深复制是单层\n *    深复制。\n */\n\n[immutableObject copy] // 浅复制\n[immutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject copy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n</code></pre>\n<blockquote>\n<p>关于叫复制还是叫拷贝，我觉得叫复制更为准确些，这个过程有点像 OSX 复制一个文件的副本的感觉</p>\n<p><a href=\"http://blog.csdn.net/yi_zz32/article/details/49952727\" title=\"多线程——原子、非原子，自旋锁和互斥锁\" target=\"_blank\" rel=\"noopener\">1</a>: <a href=\"https://www.zybuluo.com/MicroCai/note/50592\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/MicroCai/note/50592</a>    “iOS 集合的深复制与浅复制”</p>\n</blockquote>\n<h3 id=\"四、关于-property\"><a href=\"#四、关于-property\" class=\"headerlink\" title=\"四、关于@property\"></a>四、关于@property</h3><h4 id=\"1、-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\"><a href=\"#1、-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\" class=\"headerlink\" title=\"1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\"></a>1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？</h4><ul>\n<li>原子性：nonatomic、atomic （默认是 atomic）（atomic 需要消耗大量内存资源，故ios 不推荐使用）</li>\n<li>读写：readonly、readwrite （默认是readwrite）</li>\n<li>内存管理：strong、weak、assign、copy、unsafe_unretained（默认是 strong 或assign）</li>\n<li>重命名方法名：<ul>\n<li><del>setter=&lt;#name#&gt;</del>不常用，也不推荐使用</li>\n<li>getter=&lt;#name#&gt;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、-protocol-和-category-中如何使用-property\"><a href=\"#2、-protocol-和-category-中如何使用-property\" class=\"headerlink\" title=\"2、 @protocol 和 category 中如何使用 @property\"></a>2、 @protocol 和 category 中如何使用 @property</h4><ul>\n<li>在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性</li>\n<li>category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：<ul>\n<li><code>objc_setAssociatedObject</code></li>\n<li><code>objc_getAssociatedObject</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、weak属性需要在dealloc中置nil么？\"><a href=\"#3、weak属性需要在dealloc中置nil么？\" class=\"headerlink\" title=\"3、weak属性需要在dealloc中置nil么？\"></a>3、weak属性需要在dealloc中置nil么？</h4><p>不需要。ARC 下无论是 strong 还是 weak 都不需要置nil，ARC 会自动帮我们做这件事情。</p>\n<h4 id=\"4、-synthesize和-dynamic分别有什么作用？\"><a href=\"#4、-synthesize和-dynamic分别有什么作用？\" class=\"headerlink\" title=\"4、@synthesize和@dynamic分别有什么作用？\"></a>4、@synthesize和@dynamic分别有什么作用？</h4><p>一般情况下：成员变量 +  @synthesize = @property</p>\n<blockquote>\n<ol>\n<li>@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是<code>@syntheszie var = _var;</code></li>\n<li>@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。</li>\n<li>@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 <code>instance.var = someVar</code>，由于缺 setter 方法会导致程序崩溃；或者当运行到 <code>someVar = var</code> 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</li>\n</ol>\n</blockquote>\n<h4 id=\"5、什么情况需要-synthesize\"><a href=\"#5、什么情况需要-synthesize\" class=\"headerlink\" title=\"5、什么情况需要@synthesize\"></a>5、什么情况需要@synthesize</h4><ul>\n<li><strong>同时重写了 setter 和 getter 时</strong>（这种情况访问下划线变量会报错）</li>\n<li>重写了<em>只读属性的 getter</em> 时</li>\n<li>使用了 @dynamic 时</li>\n<li>在 @protocol 中定义的所有属性</li>\n<li>在 category 中定义的所有属性</li>\n<li>重载的属性</li>\n</ul>\n<h4 id=\"6、IBOutlet连出来的视图属性为什么可以被设置成weak\"><a href=\"#6、IBOutlet连出来的视图属性为什么可以被设置成weak\" class=\"headerlink\" title=\"6、IBOutlet连出来的视图属性为什么可以被设置成weak?\"></a>6、IBOutlet连出来的视图属性为什么可以被设置成weak?</h4><h3 id=\"五、关于运行时-Runtime\"><a href=\"#五、关于运行时-Runtime\" class=\"headerlink\" title=\"五、关于运行时 Runtime\"></a>五、关于运行时 Runtime</h3><p>Objective-C 是一门动态语言，主要就体现在Runtime 上。</p>\n<h4 id=\"1、向对象发送一个消息和objc-sendMessage-receiver-SEL：MethodID-函数有什么关系？\"><a href=\"#1、向对象发送一个消息和objc-sendMessage-receiver-SEL：MethodID-函数有什么关系？\" class=\"headerlink\" title=\"1、向对象发送一个消息和objc_sendMessage(receiver, SEL：MethodID)函数有什么关系？\"></a>1、向对象发送一个消息和<code>objc_sendMessage(receiver, SEL：MethodID)</code>函数有什么关系？</h4><blockquote>\n<p>[obj foo];在objc编译时，会被转意为：<code>objc_msgSend(obj, @selector(foo));</code>。</p>\n</blockquote>\n<h4 id=\"2、什么时候会报unrecognized（未被承认的）-selector的异常？\"><a href=\"#2、什么时候会报unrecognized（未被承认的）-selector的异常？\" class=\"headerlink\" title=\"2、什么时候会报unrecognized（未被承认的） selector的异常？\"></a>2、什么时候会报unrecognized（未被承认的） selector的异常？</h4><h4 id=\"3、一个objc对象的isa的指针指向什么？有什么作用？\"><a href=\"#3、一个objc对象的isa的指针指向什么？有什么作用？\" class=\"headerlink\" title=\"3、一个objc对象的isa的指针指向什么？有什么作用？\"></a>3、一个objc对象的isa的指针指向什么？有什么作用？</h4><p>指向该对象的类对象。</p>\n<blockquote>\n<p>@interface Chinese : People</p>\n<p>Chinese isa People</p>\n</blockquote>\n<h4 id=\"4、super-和-self-有什么区别？\"><a href=\"#4、super-和-self-有什么区别？\" class=\"headerlink\" title=\"4、super 和 self 有什么区别？\"></a>4、super 和 self 有什么区别？</h4><blockquote>\n<p>super的本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。</p>\n</blockquote>\n<p>super：先找父类的方法，没有在找子类；</p>\n<p>self：先从当前类的列表里开始找，如果没有在去父类那找。</p>\n<h4 id=\"5、-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"><a href=\"#5、-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\" class=\"headerlink\" title=\"5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"></a>5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）</h4><blockquote>\n<p>每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现。</p>\n</blockquote>\n<pre><code class=\"objective-c\">IMP methodIMP = [self methodForSelector:@selector(foo:)];\nmethodIMP(); // 所以 IMP 实际上是一个指针，此处 IMP 应该是Implementation的缩写\n</code></pre>\n<h4 id=\"6、objc中的类方法和实例方法有什么本质区别和联系？\"><a href=\"#6、objc中的类方法和实例方法有什么本质区别和联系？\" class=\"headerlink\" title=\"6、objc中的类方法和实例方法有什么本质区别和联系？\"></a>6、objc中的类方法和实例方法有什么本质区别和联系？</h4><blockquote>\n<p>类方法：</p>\n<ol>\n<li>类方法是属于类对象的</li>\n<li>类方法只能通过类对象调用</li>\n<li>类方法中的self是类对象</li>\n<li>类方法可以调用其他的类方法</li>\n<li>类方法中不能访问成员变量</li>\n<li>类方法中不能直接调用对象方法</li>\n</ol>\n<p>实例方法：</p>\n<ol>\n<li>实例方法是属于实例对象的</li>\n<li>实例方法只能通过实例对象调用</li>\n<li>实例方法中的self是实例对象</li>\n<li>实例方法中可以访问成员变量</li>\n<li>实例方法中直接调用实例方法</li>\n<li>实例方法中也可以调用类方法(通过类名</li>\n</ol>\n</blockquote>\n<h4 id=\"7、-objc-msgForward函数是做什么的，直接调用它将会发生什么？\"><a href=\"#7、-objc-msgForward函数是做什么的，直接调用它将会发生什么？\" class=\"headerlink\" title=\"7、_objc_msgForward函数是做什么的，直接调用它将会发生什么？\"></a>7、<code>_objc_msgForward</code>函数是做什么的，直接调用它将会发生什么？</h4><h4 id=\"8、-runtime如何实现weak变量的自动置nil？\"><a href=\"#8、-runtime如何实现weak变量的自动置nil？\" class=\"headerlink\" title=\"8、 runtime如何实现weak变量的自动置nil？\"></a>8、 runtime如何实现weak变量的自动置nil？</h4><h4 id=\"9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"><a href=\"#9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\" class=\"headerlink\" title=\"9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"></a>9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h4><h4 id=\"10、-IB中User-Defined-Runtime-Attributes如何使用？\"><a href=\"#10、-IB中User-Defined-Runtime-Attributes如何使用？\" class=\"headerlink\" title=\"10、 IB中User Defined Runtime Attributes如何使用？\"></a>10、 IB中User Defined Runtime Attributes如何使用？</h4><h3 id=\"六、RunLoop-和多线程\"><a href=\"#六、RunLoop-和多线程\" class=\"headerlink\" title=\"六、RunLoop 和多线程\"></a>六、RunLoop 和多线程</h3><h4 id=\"1、runloop和线程有什么关系？\"><a href=\"#1、runloop和线程有什么关系？\" class=\"headerlink\" title=\"1、runloop和线程有什么关系？\"></a>1、runloop和线程有什么关系？</h4><h4 id=\"2、runloop的mode作用是什么？\"><a href=\"#2、runloop的mode作用是什么？\" class=\"headerlink\" title=\"2、runloop的mode作用是什么？\"></a>2、runloop的mode作用是什么？</h4><h4 id=\"3、-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"><a href=\"#3、-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\" class=\"headerlink\" title=\"3、 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"></a>3、 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</h4><h4 id=\"4、猜想runloop内部是如何实现的？\"><a href=\"#4、猜想runloop内部是如何实现的？\" class=\"headerlink\" title=\"4、猜想runloop内部是如何实现的？\"></a>4、猜想runloop内部是如何实现的？</h4><h4 id=\"5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"><a href=\"#5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\" class=\"headerlink\" title=\"5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"></a>5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</h4><h4 id=\"6、dispatch-barrier-async的作用是什么？\"><a href=\"#6、dispatch-barrier-async的作用是什么？\" class=\"headerlink\" title=\"6、dispatch_barrier_async的作用是什么？\"></a>6、<code>dispatch_barrier_async</code>的作用是什么？</h4><h4 id=\"7、苹果为什么要废弃dispatch-get-current-queue？\"><a href=\"#7、苹果为什么要废弃dispatch-get-current-queue？\" class=\"headerlink\" title=\"7、苹果为什么要废弃dispatch_get_current_queue？\"></a>7、苹果为什么要废弃<code>dispatch_get_current_queue</code>？</h4><p>因为容易造成死锁</p>\n<h4 id=\"8、多线程原子性与非原子性、自旋锁与互斥锁的问题\"><a href=\"#8、多线程原子性与非原子性、自旋锁与互斥锁的问题\" class=\"headerlink\" title=\"8、多线程原子性与非原子性、自旋锁与互斥锁的问题\"></a>8、多线程原子性与非原子性、自旋锁与互斥锁的问题</h4><h3 id=\"七、KVO、单例、代理\"><a href=\"#七、KVO、单例、代理\" class=\"headerlink\" title=\"七、KVO、单例、代理\"></a>七、KVO、单例、代理</h3><h4 id=\"1、addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"><a href=\"#1、addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\" class=\"headerlink\" title=\"1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"></a>1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</h4><h4 id=\"2、如何手动触发一个value的KVO\"><a href=\"#2、如何手动触发一个value的KVO\" class=\"headerlink\" title=\"2、如何手动触发一个value的KVO\"></a>2、如何手动触发一个value的KVO</h4><h4 id=\"3、-KVC的keyPath中的集合运算符如何使用？\"><a href=\"#3、-KVC的keyPath中的集合运算符如何使用？\" class=\"headerlink\" title=\"3、 KVC的keyPath中的集合运算符如何使用？\"></a>3、 KVC的keyPath中的集合运算符如何使用？</h4><h4 id=\"4、-KVC和KVO的keyPath一定是属性么？\"><a href=\"#4、-KVC和KVO的keyPath一定是属性么？\" class=\"headerlink\" title=\"4、 KVC和KVO的keyPath一定是属性么？\"></a>4、 KVC和KVO的keyPath一定是属性么？</h4><h4 id=\"5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"><a href=\"#5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\" class=\"headerlink\" title=\"5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"></a>5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</h4><h4 id=\"6、apple用什么方式实现对一个对象的KVO？\"><a href=\"#6、apple用什么方式实现对一个对象的KVO？\" class=\"headerlink\" title=\"6、apple用什么方式实现对一个对象的KVO？\"></a>6、apple用什么方式实现对一个对象的KVO？</h4><h3 id=\"八、调试与-LLDB\"><a href=\"#八、调试与-LLDB\" class=\"headerlink\" title=\"八、调试与 LLDB\"></a>八、调试与 LLDB</h3><h4 id=\"1、如何调试BAD-ACCESS错误\"><a href=\"#1、如何调试BAD-ACCESS错误\" class=\"headerlink\" title=\"1、如何调试BAD_ACCESS错误\"></a>1、如何调试BAD_ACCESS错误</h4><h4 id=\"2、-lldb（gdb）常用的调试命令？\"><a href=\"#2、-lldb（gdb）常用的调试命令？\" class=\"headerlink\" title=\"2、 lldb（gdb）常用的调试命令？\"></a>2、 lldb（gdb）常用的调试命令？</h4><h4 id=\"3、BAD-ACCESS在什么情况下出现？\"><a href=\"#3、BAD-ACCESS在什么情况下出现？\" class=\"headerlink\" title=\"3、BAD_ACCESS在什么情况下出现？\"></a>3、BAD_ACCESS在什么情况下出现？</h4><h3 id=\"九、基础知识\"><a href=\"#九、基础知识\" class=\"headerlink\" title=\"九、基础知识\"></a>九、基础知识</h3><h4 id=\"1、iOS中self-和下划线的区别？\"><a href=\"#1、iOS中self-和下划线的区别？\" class=\"headerlink\" title=\"1、iOS中self.和下划线的区别？\"></a>1、iOS中self.和下划线的区别？</h4><p><a href=\"https://www.jianshu.com/p/4295cd39604e?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<h4 id=\"2、懒加载与单例模式的区别？\"><a href=\"#2、懒加载与单例模式的区别？\" class=\"headerlink\" title=\"2、懒加载与单例模式的区别？\"></a>2、懒加载与单例模式的区别？</h4><p>懒加载是重写的 get 方法，懒加载也称延迟加载，即在使用的时候才加载，不用在 viewDidLoad 里就全部分配内存，保证了用的时候在分配内存</p>\n<p>单例模式指的是某个类的对象是系统的唯一实例。</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<p>目录</p>\n<p>[TOC]</p>\n<h2 id=\"（一）、Foundation-相关知识点\"><a href=\"#（一）、Foundation-相关知识点\" class=\"headerlink\" title=\"（一）、Foundation 相关知识点\"></a>（一）、Foundation 相关知识点</h2><h3 id=\"一、内存管理的思考方式\"><a href=\"#一、内存管理的思考方式\" class=\"headerlink\" title=\"一、内存管理的思考方式\"></a>一、内存管理的思考方式</h3><h4 id=\"1、内存管理的原则：\"><a href=\"#1、内存管理的原则：\" class=\"headerlink\" title=\"1、内存管理的原则：\"></a>1、内存管理的原则：</h4><ul>\n<li><p>自己生成的对象，自己持有</p>\n</li>\n<li><p>不是自己生成的对象，自己也能持有 （需要手动 retain）</p>\n<blockquote>\n<pre><code class=\"objective-c\">id obj = [NSMutableArray array]; // 取得对象的存在，但自己并不持有\n[obj retain]; // 自己持有对象\n</code></pre>\n</blockquote>\n</li>\n<li><p>不是自己持有的对象，自己无法释放</p>\n</li>\n<li><p>不在需要自己持有的对象时，就要释放</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>对象操作</th>\n<th>OC 方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>生成并持有</td>\n<td>+new/+alloc/-copy/-mutableCopy</td>\n</tr>\n<tr>\n<td>持有对象</td>\n<td>-retain</td>\n</tr>\n<tr>\n<td>释放对象</td>\n<td>- release</td>\n</tr>\n<tr>\n<td>废弃对象</td>\n<td>- dealloc</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2、autorelease：（与-release-的区别）\"><a href=\"#2、autorelease：（与-release-的区别）\" class=\"headerlink\" title=\"2、autorelease：（与 release 的区别）\"></a>2、autorelease：（与 release 的区别）</h4><ul>\n<li>autorelease 可以取得对象的存在，但是自己不持有对象；</li>\n<li>autorelease 可以是对象在超出指定的生存空间时能够自动并正确的释放；</li>\n<li>autorelease 不是立即释放对象的，而是将该对象注册到 autoreleasepool 中，pool 结束时（drain）自动调用 release</li>\n</ul>\n<h4 id=\"3、-所有权修饰符：（一共四种）\"><a href=\"#3、-所有权修饰符：（一共四种）\" class=\"headerlink\" title=\"3、 所有权修饰符：（一共四种）\"></a>3、 所有权修饰符：（一共四种）</h4><ul>\n<li><p><code>__weak</code>（__weak修饰的变量所引用的对象被废弃时，会将 nil 赋给该变量）</p>\n</li>\n<li><p><code>__strong</code></p>\n</li>\n<li><p><code>__unsafe_unretained</code></p>\n</li>\n<li><p><code>__autoreleasing</code></p>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"4、property声明的属性与所有权修饰符的对应关系\"><a href=\"#4、property声明的属性与所有权修饰符的对应关系\" class=\"headerlink\" title=\"4、property声明的属性与所有权修饰符的对应关系\"></a>4、property声明的属性与所有权修饰符的对应关系</h4><table>\n<thead>\n<tr>\n<th>property 声明中的属性</th>\n<th>所有权修饰符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assign</code></td>\n<td><code>__unsafe_unretained</code></td>\n</tr>\n<tr>\n<td><code>`unsafe_unretained</code>copy`</td>\n<td><code>__unsafe_unretained</code></td>\n</tr>\n<tr>\n<td><code>retain</code></td>\n<td><code>__strong</code></td>\n</tr>\n<tr>\n<td><code>strong</code></td>\n<td><code>__strong</code></td>\n</tr>\n<tr>\n<td><code>copy</code></td>\n<td><code>__strong</code>(赋值的是被复制的对象)</td>\n</tr>\n<tr>\n<td><code>weak</code></td>\n<td><code>__weak</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5、objc使用什么机制管理对象内存？\"><a href=\"#5、objc使用什么机制管理对象内存？\" class=\"headerlink\" title=\"5、objc使用什么机制管理对象内存？\"></a>5、objc使用什么机制管理对象内存？</h4><blockquote>\n<p>通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。</p>\n</blockquote>\n<p>6、ARC通过什么方式帮助开发者管理内存？</p>\n<p>7、不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</p>\n<p>8、苹果是如何实现autoreleasepool的？</p>\n<h3 id=\"二、block-与内存管理\"><a href=\"#二、block-与内存管理\" class=\"headerlink\" title=\"二、block 与内存管理\"></a>二、block 与内存管理</h3><h4 id=\"1、使用block时什么情况会发生引用循环，如何解决？\"><a href=\"#1、使用block时什么情况会发生引用循环，如何解决？\" class=\"headerlink\" title=\"1、使用block时什么情况会发生引用循环，如何解决？\"></a>1、使用block时什么情况会发生引用循环，如何解决？</h4><h4 id=\"2、在block内如何修改block外部变量？\"><a href=\"#2、在block内如何修改block外部变量？\" class=\"headerlink\" title=\"2、在block内如何修改block外部变量？\"></a>2、在block内如何修改block外部变量？</h4><h4 id=\"3、使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"><a href=\"#3、使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\" class=\"headerlink\" title=\"3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"></a>3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</h4><h3 id=\"三、关于-Copy-的一些问题\"><a href=\"#三、关于-Copy-的一些问题\" class=\"headerlink\" title=\"三、关于 Copy 的一些问题\"></a>三、关于 Copy 的一些问题</h3><h4 id=\"1、如何让自己的类用-copy-修饰符？\"><a href=\"#1、如何让自己的类用-copy-修饰符？\" class=\"headerlink\" title=\"1、如何让自己的类用 copy 修饰符？\"></a>1、如何让自己的类用 copy 修饰符？</h4><p>让自己的类用 copy 修饰符：</p>\n<ul>\n<li>声明该类遵循 NSCopying 协议或者遵循 NSMutableCopying 协议</li>\n<li>实现 -copyWithZone： 方法，该方法生成并持有该对象的副本。</li>\n</ul>\n<h4 id=\"2、如何重写带关键字的-setter？\"><a href=\"#2、如何重写带关键字的-setter？\" class=\"headerlink\" title=\"2、如何重写带关键字的 setter？\"></a>2、如何重写带关键字的 setter？</h4><pre><code class=\"objective-c\">_obj = [obj copy]; // 返回一个该对象的副本\n</code></pre>\n<h4 id=\"3、用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"><a href=\"#3、用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\" class=\"headerlink\" title=\"3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"></a>3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</h4><h4 id=\"4、深复制（内容复制）和浅复制（指针复制）\"><a href=\"#4、深复制（内容复制）和浅复制（指针复制）\" class=\"headerlink\" title=\"4、深复制（内容复制）和浅复制（指针复制）\"></a>4、深复制（内容复制）和浅复制（指针复制）</h4><p>为了弄清这个概念，我们先来弄清楚在 集合与非集合类的 可变和不可变对象分别执行 copy 和 mutableCopy 操作。</p>\n<pre><code class=\"objective-c\">/*\n * 1、无论是集合类和非集合类，只有不可变对象进行 copy 操作是浅复制，其他情况均是深复制，因为副本的结果是不\n *    可变的。其他情况副本的结果是可变的。\n * \n * 2、集合对象的内容复制仅局限于本身，对于元素来说，仍然是指针复制（浅复制）。所以，集合对象的深复制是单层\n *    深复制。\n */\n\n[immutableObject copy] // 浅复制\n[immutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject copy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n</code></pre>\n<blockquote>\n<p>关于叫复制还是叫拷贝，我觉得叫复制更为准确些，这个过程有点像 OSX 复制一个文件的副本的感觉</p>\n<p><a href=\"http://blog.csdn.net/yi_zz32/article/details/49952727\" title=\"多线程——原子、非原子，自旋锁和互斥锁\" target=\"_blank\" rel=\"noopener\">1</a>: <a href=\"https://www.zybuluo.com/MicroCai/note/50592\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/MicroCai/note/50592</a>    “iOS 集合的深复制与浅复制”</p>\n</blockquote>\n<h3 id=\"四、关于-property\"><a href=\"#四、关于-property\" class=\"headerlink\" title=\"四、关于@property\"></a>四、关于@property</h3><h4 id=\"1、-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\"><a href=\"#1、-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\" class=\"headerlink\" title=\"1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\"></a>1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？</h4><ul>\n<li>原子性：nonatomic、atomic （默认是 atomic）（atomic 需要消耗大量内存资源，故ios 不推荐使用）</li>\n<li>读写：readonly、readwrite （默认是readwrite）</li>\n<li>内存管理：strong、weak、assign、copy、unsafe_unretained（默认是 strong 或assign）</li>\n<li>重命名方法名：<ul>\n<li><del>setter=&lt;#name#&gt;</del>不常用，也不推荐使用</li>\n<li>getter=&lt;#name#&gt;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、-protocol-和-category-中如何使用-property\"><a href=\"#2、-protocol-和-category-中如何使用-property\" class=\"headerlink\" title=\"2、 @protocol 和 category 中如何使用 @property\"></a>2、 @protocol 和 category 中如何使用 @property</h4><ul>\n<li>在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性</li>\n<li>category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：<ul>\n<li><code>objc_setAssociatedObject</code></li>\n<li><code>objc_getAssociatedObject</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、weak属性需要在dealloc中置nil么？\"><a href=\"#3、weak属性需要在dealloc中置nil么？\" class=\"headerlink\" title=\"3、weak属性需要在dealloc中置nil么？\"></a>3、weak属性需要在dealloc中置nil么？</h4><p>不需要。ARC 下无论是 strong 还是 weak 都不需要置nil，ARC 会自动帮我们做这件事情。</p>\n<h4 id=\"4、-synthesize和-dynamic分别有什么作用？\"><a href=\"#4、-synthesize和-dynamic分别有什么作用？\" class=\"headerlink\" title=\"4、@synthesize和@dynamic分别有什么作用？\"></a>4、@synthesize和@dynamic分别有什么作用？</h4><p>一般情况下：成员变量 +  @synthesize = @property</p>\n<blockquote>\n<ol>\n<li>@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是<code>@syntheszie var = _var;</code></li>\n<li>@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。</li>\n<li>@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 <code>instance.var = someVar</code>，由于缺 setter 方法会导致程序崩溃；或者当运行到 <code>someVar = var</code> 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</li>\n</ol>\n</blockquote>\n<h4 id=\"5、什么情况需要-synthesize\"><a href=\"#5、什么情况需要-synthesize\" class=\"headerlink\" title=\"5、什么情况需要@synthesize\"></a>5、什么情况需要@synthesize</h4><ul>\n<li><strong>同时重写了 setter 和 getter 时</strong>（这种情况访问下划线变量会报错）</li>\n<li>重写了<em>只读属性的 getter</em> 时</li>\n<li>使用了 @dynamic 时</li>\n<li>在 @protocol 中定义的所有属性</li>\n<li>在 category 中定义的所有属性</li>\n<li>重载的属性</li>\n</ul>\n<h4 id=\"6、IBOutlet连出来的视图属性为什么可以被设置成weak\"><a href=\"#6、IBOutlet连出来的视图属性为什么可以被设置成weak\" class=\"headerlink\" title=\"6、IBOutlet连出来的视图属性为什么可以被设置成weak?\"></a>6、IBOutlet连出来的视图属性为什么可以被设置成weak?</h4><h3 id=\"五、关于运行时-Runtime\"><a href=\"#五、关于运行时-Runtime\" class=\"headerlink\" title=\"五、关于运行时 Runtime\"></a>五、关于运行时 Runtime</h3><p>Objective-C 是一门动态语言，主要就体现在Runtime 上。</p>\n<h4 id=\"1、向对象发送一个消息和objc-sendMessage-receiver-SEL：MethodID-函数有什么关系？\"><a href=\"#1、向对象发送一个消息和objc-sendMessage-receiver-SEL：MethodID-函数有什么关系？\" class=\"headerlink\" title=\"1、向对象发送一个消息和objc_sendMessage(receiver, SEL：MethodID)函数有什么关系？\"></a>1、向对象发送一个消息和<code>objc_sendMessage(receiver, SEL：MethodID)</code>函数有什么关系？</h4><blockquote>\n<p>[obj foo];在objc编译时，会被转意为：<code>objc_msgSend(obj, @selector(foo));</code>。</p>\n</blockquote>\n<h4 id=\"2、什么时候会报unrecognized（未被承认的）-selector的异常？\"><a href=\"#2、什么时候会报unrecognized（未被承认的）-selector的异常？\" class=\"headerlink\" title=\"2、什么时候会报unrecognized（未被承认的） selector的异常？\"></a>2、什么时候会报unrecognized（未被承认的） selector的异常？</h4><h4 id=\"3、一个objc对象的isa的指针指向什么？有什么作用？\"><a href=\"#3、一个objc对象的isa的指针指向什么？有什么作用？\" class=\"headerlink\" title=\"3、一个objc对象的isa的指针指向什么？有什么作用？\"></a>3、一个objc对象的isa的指针指向什么？有什么作用？</h4><p>指向该对象的类对象。</p>\n<blockquote>\n<p>@interface Chinese : People</p>\n<p>Chinese isa People</p>\n</blockquote>\n<h4 id=\"4、super-和-self-有什么区别？\"><a href=\"#4、super-和-self-有什么区别？\" class=\"headerlink\" title=\"4、super 和 self 有什么区别？\"></a>4、super 和 self 有什么区别？</h4><blockquote>\n<p>super的本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。</p>\n</blockquote>\n<p>super：先找父类的方法，没有在找子类；</p>\n<p>self：先从当前类的列表里开始找，如果没有在去父类那找。</p>\n<h4 id=\"5、-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"><a href=\"#5、-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\" class=\"headerlink\" title=\"5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"></a>5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）</h4><blockquote>\n<p>每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现。</p>\n</blockquote>\n<pre><code class=\"objective-c\">IMP methodIMP = [self methodForSelector:@selector(foo:)];\nmethodIMP(); // 所以 IMP 实际上是一个指针，此处 IMP 应该是Implementation的缩写\n</code></pre>\n<h4 id=\"6、objc中的类方法和实例方法有什么本质区别和联系？\"><a href=\"#6、objc中的类方法和实例方法有什么本质区别和联系？\" class=\"headerlink\" title=\"6、objc中的类方法和实例方法有什么本质区别和联系？\"></a>6、objc中的类方法和实例方法有什么本质区别和联系？</h4><blockquote>\n<p>类方法：</p>\n<ol>\n<li>类方法是属于类对象的</li>\n<li>类方法只能通过类对象调用</li>\n<li>类方法中的self是类对象</li>\n<li>类方法可以调用其他的类方法</li>\n<li>类方法中不能访问成员变量</li>\n<li>类方法中不能直接调用对象方法</li>\n</ol>\n<p>实例方法：</p>\n<ol>\n<li>实例方法是属于实例对象的</li>\n<li>实例方法只能通过实例对象调用</li>\n<li>实例方法中的self是实例对象</li>\n<li>实例方法中可以访问成员变量</li>\n<li>实例方法中直接调用实例方法</li>\n<li>实例方法中也可以调用类方法(通过类名</li>\n</ol>\n</blockquote>\n<h4 id=\"7、-objc-msgForward函数是做什么的，直接调用它将会发生什么？\"><a href=\"#7、-objc-msgForward函数是做什么的，直接调用它将会发生什么？\" class=\"headerlink\" title=\"7、_objc_msgForward函数是做什么的，直接调用它将会发生什么？\"></a>7、<code>_objc_msgForward</code>函数是做什么的，直接调用它将会发生什么？</h4><h4 id=\"8、-runtime如何实现weak变量的自动置nil？\"><a href=\"#8、-runtime如何实现weak变量的自动置nil？\" class=\"headerlink\" title=\"8、 runtime如何实现weak变量的自动置nil？\"></a>8、 runtime如何实现weak变量的自动置nil？</h4><h4 id=\"9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"><a href=\"#9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\" class=\"headerlink\" title=\"9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"></a>9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h4><h4 id=\"10、-IB中User-Defined-Runtime-Attributes如何使用？\"><a href=\"#10、-IB中User-Defined-Runtime-Attributes如何使用？\" class=\"headerlink\" title=\"10、 IB中User Defined Runtime Attributes如何使用？\"></a>10、 IB中User Defined Runtime Attributes如何使用？</h4><h3 id=\"六、RunLoop-和多线程\"><a href=\"#六、RunLoop-和多线程\" class=\"headerlink\" title=\"六、RunLoop 和多线程\"></a>六、RunLoop 和多线程</h3><h4 id=\"1、runloop和线程有什么关系？\"><a href=\"#1、runloop和线程有什么关系？\" class=\"headerlink\" title=\"1、runloop和线程有什么关系？\"></a>1、runloop和线程有什么关系？</h4><h4 id=\"2、runloop的mode作用是什么？\"><a href=\"#2、runloop的mode作用是什么？\" class=\"headerlink\" title=\"2、runloop的mode作用是什么？\"></a>2、runloop的mode作用是什么？</h4><h4 id=\"3、-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"><a href=\"#3、-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\" class=\"headerlink\" title=\"3、 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"></a>3、 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</h4><h4 id=\"4、猜想runloop内部是如何实现的？\"><a href=\"#4、猜想runloop内部是如何实现的？\" class=\"headerlink\" title=\"4、猜想runloop内部是如何实现的？\"></a>4、猜想runloop内部是如何实现的？</h4><h4 id=\"5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"><a href=\"#5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\" class=\"headerlink\" title=\"5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"></a>5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</h4><h4 id=\"6、dispatch-barrier-async的作用是什么？\"><a href=\"#6、dispatch-barrier-async的作用是什么？\" class=\"headerlink\" title=\"6、dispatch_barrier_async的作用是什么？\"></a>6、<code>dispatch_barrier_async</code>的作用是什么？</h4><h4 id=\"7、苹果为什么要废弃dispatch-get-current-queue？\"><a href=\"#7、苹果为什么要废弃dispatch-get-current-queue？\" class=\"headerlink\" title=\"7、苹果为什么要废弃dispatch_get_current_queue？\"></a>7、苹果为什么要废弃<code>dispatch_get_current_queue</code>？</h4><p>因为容易造成死锁</p>\n<h4 id=\"8、多线程原子性与非原子性、自旋锁与互斥锁的问题\"><a href=\"#8、多线程原子性与非原子性、自旋锁与互斥锁的问题\" class=\"headerlink\" title=\"8、多线程原子性与非原子性、自旋锁与互斥锁的问题\"></a>8、多线程原子性与非原子性、自旋锁与互斥锁的问题</h4><h3 id=\"七、KVO、单例、代理\"><a href=\"#七、KVO、单例、代理\" class=\"headerlink\" title=\"七、KVO、单例、代理\"></a>七、KVO、单例、代理</h3><h4 id=\"1、addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"><a href=\"#1、addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\" class=\"headerlink\" title=\"1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"></a>1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</h4><h4 id=\"2、如何手动触发一个value的KVO\"><a href=\"#2、如何手动触发一个value的KVO\" class=\"headerlink\" title=\"2、如何手动触发一个value的KVO\"></a>2、如何手动触发一个value的KVO</h4><h4 id=\"3、-KVC的keyPath中的集合运算符如何使用？\"><a href=\"#3、-KVC的keyPath中的集合运算符如何使用？\" class=\"headerlink\" title=\"3、 KVC的keyPath中的集合运算符如何使用？\"></a>3、 KVC的keyPath中的集合运算符如何使用？</h4><h4 id=\"4、-KVC和KVO的keyPath一定是属性么？\"><a href=\"#4、-KVC和KVO的keyPath一定是属性么？\" class=\"headerlink\" title=\"4、 KVC和KVO的keyPath一定是属性么？\"></a>4、 KVC和KVO的keyPath一定是属性么？</h4><h4 id=\"5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"><a href=\"#5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\" class=\"headerlink\" title=\"5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"></a>5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</h4><h4 id=\"6、apple用什么方式实现对一个对象的KVO？\"><a href=\"#6、apple用什么方式实现对一个对象的KVO？\" class=\"headerlink\" title=\"6、apple用什么方式实现对一个对象的KVO？\"></a>6、apple用什么方式实现对一个对象的KVO？</h4><h3 id=\"八、调试与-LLDB\"><a href=\"#八、调试与-LLDB\" class=\"headerlink\" title=\"八、调试与 LLDB\"></a>八、调试与 LLDB</h3><h4 id=\"1、如何调试BAD-ACCESS错误\"><a href=\"#1、如何调试BAD-ACCESS错误\" class=\"headerlink\" title=\"1、如何调试BAD_ACCESS错误\"></a>1、如何调试BAD_ACCESS错误</h4><h4 id=\"2、-lldb（gdb）常用的调试命令？\"><a href=\"#2、-lldb（gdb）常用的调试命令？\" class=\"headerlink\" title=\"2、 lldb（gdb）常用的调试命令？\"></a>2、 lldb（gdb）常用的调试命令？</h4><h4 id=\"3、BAD-ACCESS在什么情况下出现？\"><a href=\"#3、BAD-ACCESS在什么情况下出现？\" class=\"headerlink\" title=\"3、BAD_ACCESS在什么情况下出现？\"></a>3、BAD_ACCESS在什么情况下出现？</h4><h3 id=\"九、基础知识\"><a href=\"#九、基础知识\" class=\"headerlink\" title=\"九、基础知识\"></a>九、基础知识</h3><h4 id=\"1、iOS中self-和下划线的区别？\"><a href=\"#1、iOS中self-和下划线的区别？\" class=\"headerlink\" title=\"1、iOS中self.和下划线的区别？\"></a>1、iOS中self.和下划线的区别？</h4><p><a href=\"https://www.jianshu.com/p/4295cd39604e?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<h4 id=\"2、懒加载与单例模式的区别？\"><a href=\"#2、懒加载与单例模式的区别？\" class=\"headerlink\" title=\"2、懒加载与单例模式的区别？\"></a>2、懒加载与单例模式的区别？</h4><p>懒加载是重写的 get 方法，懒加载也称延迟加载，即在使用的时候才加载，不用在 viewDidLoad 里就全部分配内存，保证了用的时候在分配内存</p>\n<p>单例模式指的是某个类的对象是系统的唯一实例。</p>\n"},{"title":"iOS开发笔记","date":"2014-01-10T12:58:02.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515665308&di=c47dba565aa9965eb524c6b306ffce50&src=http://img.zcool.cn/community/0144c457b4f79d0000018c1b26b075.jpg","_content":"\n如果设置LaunchImage，那么屏幕的启动范围由图片决定\n\n如果使用 LaunchImage，必须让美工提供各种尺寸的启动图片\n\nLaunchScreen > LaunchImage\n\nLaunchScreen可以自动识别尺寸\n\n\n\niOS 进阶之路\n\n1. 熟悉各种 UI 控件（达到快速布局）\n2. 多线程\n3. 熟悉各种常用的第三方库及原理（上手就用，不用百度）\n4. js 交互\n5. 直播、动画、视频、聊天\n\niOS 开发笔记\n\n* UI控件\n* 多线程、rac、Runtime、Runloop、block、通知、代理、缓存\n* 各种常用的第三方库\n* 基本原理\n  * weak strong 的区别\n  * —weak —strong —block\n* self.  和下划线的区别\n\n\n\n\n\n","source":"_posts/iOS开发/开发笔记/iOS开发笔记.md","raw":"---\ntitle: 'iOS开发笔记'\ndate: 2014-01-10 20:58:02\ncategories: iOS开发\ntags:\nthumbnail: \"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515665308&di=c47dba565aa9965eb524c6b306ffce50&src=http://img.zcool.cn/community/0144c457b4f79d0000018c1b26b075.jpg\"\n---\n\n如果设置LaunchImage，那么屏幕的启动范围由图片决定\n\n如果使用 LaunchImage，必须让美工提供各种尺寸的启动图片\n\nLaunchScreen > LaunchImage\n\nLaunchScreen可以自动识别尺寸\n\n\n\niOS 进阶之路\n\n1. 熟悉各种 UI 控件（达到快速布局）\n2. 多线程\n3. 熟悉各种常用的第三方库及原理（上手就用，不用百度）\n4. js 交互\n5. 直播、动画、视频、聊天\n\niOS 开发笔记\n\n* UI控件\n* 多线程、rac、Runtime、Runloop、block、通知、代理、缓存\n* 各种常用的第三方库\n* 基本原理\n  * weak strong 的区别\n  * —weak —strong —block\n* self.  和下划线的区别\n\n\n\n\n\n","slug":"iOS开发/开发笔记/iOS开发笔记","published":1,"updated":"2018-01-20T03:55:18.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb86001hdc4mmganr0od","content":"<p>如果设置LaunchImage，那么屏幕的启动范围由图片决定</p>\n<p>如果使用 LaunchImage，必须让美工提供各种尺寸的启动图片</p>\n<p>LaunchScreen &gt; LaunchImage</p>\n<p>LaunchScreen可以自动识别尺寸</p>\n<p>iOS 进阶之路</p>\n<ol>\n<li>熟悉各种 UI 控件（达到快速布局）</li>\n<li>多线程</li>\n<li>熟悉各种常用的第三方库及原理（上手就用，不用百度）</li>\n<li>js 交互</li>\n<li>直播、动画、视频、聊天</li>\n</ol>\n<p>iOS 开发笔记</p>\n<ul>\n<li>UI控件</li>\n<li>多线程、rac、Runtime、Runloop、block、通知、代理、缓存</li>\n<li>各种常用的第三方库</li>\n<li>基本原理<ul>\n<li>weak strong 的区别</li>\n<li>—weak —strong —block</li>\n</ul>\n</li>\n<li>self.  和下划线的区别</li>\n</ul>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<p>如果设置LaunchImage，那么屏幕的启动范围由图片决定</p>\n<p>如果使用 LaunchImage，必须让美工提供各种尺寸的启动图片</p>\n<p>LaunchScreen &gt; LaunchImage</p>\n<p>LaunchScreen可以自动识别尺寸</p>\n<p>iOS 进阶之路</p>\n<ol>\n<li>熟悉各种 UI 控件（达到快速布局）</li>\n<li>多线程</li>\n<li>熟悉各种常用的第三方库及原理（上手就用，不用百度）</li>\n<li>js 交互</li>\n<li>直播、动画、视频、聊天</li>\n</ol>\n<p>iOS 开发笔记</p>\n<ul>\n<li>UI控件</li>\n<li>多线程、rac、Runtime、Runloop、block、通知、代理、缓存</li>\n<li>各种常用的第三方库</li>\n<li>基本原理<ul>\n<li>weak strong 的区别</li>\n<li>—weak —strong —block</li>\n</ul>\n</li>\n<li>self.  和下划线的区别</li>\n</ul>\n"},{"title":"深入学习block","date":"2018-01-21T05:47:40.000Z","_content":"","source":"_posts/iOS开发/开发笔记/深入学习block.md","raw":"---\ntitle: 深入学习block\ndate: 2018-01-21 13:47:40\ntags:\n---\n","slug":"iOS开发/开发笔记/深入学习block","published":1,"updated":"2018-01-21T05:47:40.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb87001jdc4m530n8sbz","content":"","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":""},{"title":"深入学习内存管理","date":"2018-01-21T05:47:52.000Z","_content":"","source":"_posts/iOS开发/开发笔记/深入学习内存管理.md","raw":"---\ntitle: 深入学习内存管理\ndate: 2018-01-21 13:47:52\ntags:\n---\n","slug":"iOS开发/开发笔记/深入学习内存管理","published":1,"updated":"2018-01-21T05:47:52.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb89001mdc4mkjcwff8c","content":"","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":""},{"title":"深入学习多线程编程","date":"2018-01-21T05:47:32.000Z","_content":"\n\n\n共享数据时 \n\n@synchronize（self）{  // 括号内表示的是锁对象，需要全局只创建一次，所以一般用 self \n\n​    // 操作\n\n}\n\n\n\n## 一、NSThread\n\n### 1、创建线程\n\n```objective-c\nNSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(downloadWithURL:) object:@\"传入的参数\"];\n\n[thread start]; // 启动线程\n```\n\n### 2、分离线程（创建线程并启动）\n\n```objective-c\n [NSThread detachNewThreadSelector:@selector(downloadWithURL:) toTarget:self withObject:@\"thread3：detach\"];\n```\n\n### 3、隐式创建一个线程\n\n```objective-c\nperformSelectorInBackground:\n```\n\n### 4、常见方法：\n\n``` objective-c\n// 获取当前线程\n[NSThread currentThread];\n// 获取主线程\n[NSThread mainThread];\n```\n\n### 5、睡眠（暂停）线程；死亡\n\n```objective-c\n+ (void)sleepUntilDate:(NSDate):date;\n+ (void)sleepForTimeInterval(NSTimeInterVal)ti;\n\n+ (void)exit; // 线程死亡，并释放内存\n```\n\n### 6、互斥锁、同步锁（@synchronize）\n\n① 目的：为了防止多个线程访问同一块内存（数据），从而造成数据竞争的问题。\n\n②使用：\n\n```objective-c\n// 因为只需要一把锁，所以需要一个静态全局锁对象(保证只创建一次)，一般我们用 self 代替。\n@synchronize（LockObject）{  \n    // 操作\n}\n\n```\n\n③作用：一个线程获得锁以后，会阻塞其他想要访问此锁的线程，知道该锁被释放。\n\n④其他锁：\n\n> 1. NSLock\n> 2. NSRecursiveLock\n> 3. NSCondition\n> 4. NSConditionLock\n> 5. pthread_mutex\n> 6. pthread_rwlock\n> 7. POSIX Conditions\n> 8. OSSpinLock (自旋锁)\n> 9. os_unfair_lock\n> 10. dispatch_semaphore （信号量）\n> 11. @synchronized （互斥锁 ）\n\n[1]: http://www.cocoachina.com/ios/20161129/18216.html\t\" iOS 的各种锁\"\n\n### 7、线程通讯\n\n\n\n### 8、注意事项：\n\n① 不要同时开太多线程（1~3条即可，最好不要超过5条）\n\n② 主线程：UI 线程；（因为属性都是 非原子性的，为了线程安全，所以不要在子线程更新 UI ）\n\n​     子线程：后台线程；（执行耗时操作 ）\n\n\n\n## 二、GCD\n\n1、同步与异步：sync、async （执行）决定要不要开启多线程\n\n* 同步：只能在当前线程中执行任务，不具备开启新线程的能力；（不常用）\n* 异步：可以在新的线程中执行任务，具备开新线程的能力； （开发中一般只需要考虑异步串行队列和异步并行队列）\n\n2、队列：并发队列、串行队列（concurrent、serial）（队列）决定执行顺序 \n\n* 并发队列：可以让多个任务并发执行(同步执行)，自动开启多个线程执行任务。（所以并发队列异步执行才有效）。一般同时开多条线程 （取决于 CPU 调度）\n* 串行队列：让任务一个接一个执行。一般  只开一条线程。（取决于 CPU 调度     ）\n\n3、主队列和全局队列\n\n* main：全局串行队列\n* global：全局并发队列\n\n|      | 并发队列（global_queue） | 串行队列           | 主队列（串）     |\n| ---- | ------------------ | -------------- | ---------- |\n| 同步执行 | 不开启多线程，串行执行        | 不开多线程，串行执行     | 不开多线程，串行执行 |\n| 异步执行 | **开启多线程，并发执行**     | **开启多线程，串行执行** | 不开多线程，串行执行 |\n\n \n\n","source":"_posts/iOS开发/开发笔记/深入学习多线程编程.md","raw":"---\ntitle: 深入学习多线程编程\ndate: 2018-01-21 13:47:32\ntags:\n---\n\n\n\n共享数据时 \n\n@synchronize（self）{  // 括号内表示的是锁对象，需要全局只创建一次，所以一般用 self \n\n​    // 操作\n\n}\n\n\n\n## 一、NSThread\n\n### 1、创建线程\n\n```objective-c\nNSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(downloadWithURL:) object:@\"传入的参数\"];\n\n[thread start]; // 启动线程\n```\n\n### 2、分离线程（创建线程并启动）\n\n```objective-c\n [NSThread detachNewThreadSelector:@selector(downloadWithURL:) toTarget:self withObject:@\"thread3：detach\"];\n```\n\n### 3、隐式创建一个线程\n\n```objective-c\nperformSelectorInBackground:\n```\n\n### 4、常见方法：\n\n``` objective-c\n// 获取当前线程\n[NSThread currentThread];\n// 获取主线程\n[NSThread mainThread];\n```\n\n### 5、睡眠（暂停）线程；死亡\n\n```objective-c\n+ (void)sleepUntilDate:(NSDate):date;\n+ (void)sleepForTimeInterval(NSTimeInterVal)ti;\n\n+ (void)exit; // 线程死亡，并释放内存\n```\n\n### 6、互斥锁、同步锁（@synchronize）\n\n① 目的：为了防止多个线程访问同一块内存（数据），从而造成数据竞争的问题。\n\n②使用：\n\n```objective-c\n// 因为只需要一把锁，所以需要一个静态全局锁对象(保证只创建一次)，一般我们用 self 代替。\n@synchronize（LockObject）{  \n    // 操作\n}\n\n```\n\n③作用：一个线程获得锁以后，会阻塞其他想要访问此锁的线程，知道该锁被释放。\n\n④其他锁：\n\n> 1. NSLock\n> 2. NSRecursiveLock\n> 3. NSCondition\n> 4. NSConditionLock\n> 5. pthread_mutex\n> 6. pthread_rwlock\n> 7. POSIX Conditions\n> 8. OSSpinLock (自旋锁)\n> 9. os_unfair_lock\n> 10. dispatch_semaphore （信号量）\n> 11. @synchronized （互斥锁 ）\n\n[1]: http://www.cocoachina.com/ios/20161129/18216.html\t\" iOS 的各种锁\"\n\n### 7、线程通讯\n\n\n\n### 8、注意事项：\n\n① 不要同时开太多线程（1~3条即可，最好不要超过5条）\n\n② 主线程：UI 线程；（因为属性都是 非原子性的，为了线程安全，所以不要在子线程更新 UI ）\n\n​     子线程：后台线程；（执行耗时操作 ）\n\n\n\n## 二、GCD\n\n1、同步与异步：sync、async （执行）决定要不要开启多线程\n\n* 同步：只能在当前线程中执行任务，不具备开启新线程的能力；（不常用）\n* 异步：可以在新的线程中执行任务，具备开新线程的能力； （开发中一般只需要考虑异步串行队列和异步并行队列）\n\n2、队列：并发队列、串行队列（concurrent、serial）（队列）决定执行顺序 \n\n* 并发队列：可以让多个任务并发执行(同步执行)，自动开启多个线程执行任务。（所以并发队列异步执行才有效）。一般同时开多条线程 （取决于 CPU 调度）\n* 串行队列：让任务一个接一个执行。一般  只开一条线程。（取决于 CPU 调度     ）\n\n3、主队列和全局队列\n\n* main：全局串行队列\n* global：全局并发队列\n\n|      | 并发队列（global_queue） | 串行队列           | 主队列（串）     |\n| ---- | ------------------ | -------------- | ---------- |\n| 同步执行 | 不开启多线程，串行执行        | 不开多线程，串行执行     | 不开多线程，串行执行 |\n| 异步执行 | **开启多线程，并发执行**     | **开启多线程，串行执行** | 不开多线程，串行执行 |\n\n \n\n","slug":"iOS开发/开发笔记/深入学习多线程编程","published":1,"updated":"2018-01-21T12:24:34.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb8a001pdc4maa72rcfm","content":"<p>共享数据时 </p>\n<p>@synchronize（self）{  // 括号内表示的是锁对象，需要全局只创建一次，所以一般用 self </p>\n<p>​    // 操作</p>\n<p>}</p>\n<h2 id=\"一、NSThread\"><a href=\"#一、NSThread\" class=\"headerlink\" title=\"一、NSThread\"></a>一、NSThread</h2><h3 id=\"1、创建线程\"><a href=\"#1、创建线程\" class=\"headerlink\" title=\"1、创建线程\"></a>1、创建线程</h3><pre><code class=\"objective-c\">NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(downloadWithURL:) object:@&quot;传入的参数&quot;];\n\n[thread start]; // 启动线程\n</code></pre>\n<h3 id=\"2、分离线程（创建线程并启动）\"><a href=\"#2、分离线程（创建线程并启动）\" class=\"headerlink\" title=\"2、分离线程（创建线程并启动）\"></a>2、分离线程（创建线程并启动）</h3><pre><code class=\"objective-c\"> [NSThread detachNewThreadSelector:@selector(downloadWithURL:) toTarget:self withObject:@&quot;thread3：detach&quot;];\n</code></pre>\n<h3 id=\"3、隐式创建一个线程\"><a href=\"#3、隐式创建一个线程\" class=\"headerlink\" title=\"3、隐式创建一个线程\"></a>3、隐式创建一个线程</h3><pre><code class=\"objective-c\">performSelectorInBackground:\n</code></pre>\n<h3 id=\"4、常见方法：\"><a href=\"#4、常见方法：\" class=\"headerlink\" title=\"4、常见方法：\"></a>4、常见方法：</h3><pre><code class=\"objective-c\">// 获取当前线程\n[NSThread currentThread];\n// 获取主线程\n[NSThread mainThread];\n</code></pre>\n<h3 id=\"5、睡眠（暂停）线程；死亡\"><a href=\"#5、睡眠（暂停）线程；死亡\" class=\"headerlink\" title=\"5、睡眠（暂停）线程；死亡\"></a>5、睡眠（暂停）线程；死亡</h3><pre><code class=\"objective-c\">+ (void)sleepUntilDate:(NSDate):date;\n+ (void)sleepForTimeInterval(NSTimeInterVal)ti;\n\n+ (void)exit; // 线程死亡，并释放内存\n</code></pre>\n<h3 id=\"6、互斥锁、同步锁（-synchronize）\"><a href=\"#6、互斥锁、同步锁（-synchronize）\" class=\"headerlink\" title=\"6、互斥锁、同步锁（@synchronize）\"></a>6、互斥锁、同步锁（@synchronize）</h3><p>① 目的：为了防止多个线程访问同一块内存（数据），从而造成数据竞争的问题。</p>\n<p>②使用：</p>\n<pre><code class=\"objective-c\">// 因为只需要一把锁，所以需要一个静态全局锁对象(保证只创建一次)，一般我们用 self 代替。\n@synchronize（LockObject）{  \n    // 操作\n}\n</code></pre>\n<p>③作用：一个线程获得锁以后，会阻塞其他想要访问此锁的线程，知道该锁被释放。</p>\n<p>④其他锁：</p>\n<blockquote>\n<ol>\n<li>NSLock</li>\n<li>NSRecursiveLock</li>\n<li>NSCondition</li>\n<li>NSConditionLock</li>\n<li>pthread_mutex</li>\n<li>pthread_rwlock</li>\n<li>POSIX Conditions</li>\n<li>OSSpinLock (自旋锁)</li>\n<li>os_unfair_lock</li>\n<li>dispatch_semaphore （信号量）</li>\n<li>@synchronized （互斥锁 ）</li>\n</ol>\n</blockquote>\n<h3 id=\"7、线程通讯\"><a href=\"#7、线程通讯\" class=\"headerlink\" title=\"7、线程通讯\"></a>7、线程通讯</h3><h3 id=\"8、注意事项：\"><a href=\"#8、注意事项：\" class=\"headerlink\" title=\"8、注意事项：\"></a>8、注意事项：</h3><p>① 不要同时开太多线程（1~3条即可，最好不要超过5条）</p>\n<p>② 主线程：UI 线程；（因为属性都是 非原子性的，为了线程安全，所以不要在子线程更新 UI ）</p>\n<p>​     子线程：后台线程；（执行耗时操作 ）</p>\n<h2 id=\"二、GCD\"><a href=\"#二、GCD\" class=\"headerlink\" title=\"二、GCD\"></a>二、GCD</h2><p>1、同步与异步：sync、async （执行）决定要不要开启多线程</p>\n<ul>\n<li>同步：只能在当前线程中执行任务，不具备开启新线程的能力；（不常用）</li>\n<li>异步：可以在新的线程中执行任务，具备开新线程的能力； （开发中一般只需要考虑异步串行队列和异步并行队列）</li>\n</ul>\n<p>2、队列：并发队列、串行队列（concurrent、serial）（队列）决定执行顺序 </p>\n<ul>\n<li>并发队列：可以让多个任务并发执行(同步执行)，自动开启多个线程执行任务。（所以并发队列异步执行才有效）。一般同时开多条线程 （取决于 CPU 调度）</li>\n<li>串行队列：让任务一个接一个执行。一般  只开一条线程。（取决于 CPU 调度     ）</li>\n</ul>\n<p>3、主队列和全局队列</p>\n<ul>\n<li>main：全局串行队列</li>\n<li>global：全局并发队列</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>并发队列（global_queue）</th>\n<th>串行队列</th>\n<th>主队列（串）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>同步执行</td>\n<td>不开启多线程，串行执行</td>\n<td>不开多线程，串行执行</td>\n<td>不开多线程，串行执行</td>\n</tr>\n<tr>\n<td>异步执行</td>\n<td><strong>开启多线程，并发执行</strong></td>\n<td><strong>开启多线程，串行执行</strong></td>\n<td>不开多线程，串行执行</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<p>共享数据时 </p>\n<p>@synchronize（self）{  // 括号内表示的是锁对象，需要全局只创建一次，所以一般用 self </p>\n<p>​    // 操作</p>\n<p>}</p>\n<h2 id=\"一、NSThread\"><a href=\"#一、NSThread\" class=\"headerlink\" title=\"一、NSThread\"></a>一、NSThread</h2><h3 id=\"1、创建线程\"><a href=\"#1、创建线程\" class=\"headerlink\" title=\"1、创建线程\"></a>1、创建线程</h3><pre><code class=\"objective-c\">NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(downloadWithURL:) object:@&quot;传入的参数&quot;];\n\n[thread start]; // 启动线程\n</code></pre>\n<h3 id=\"2、分离线程（创建线程并启动）\"><a href=\"#2、分离线程（创建线程并启动）\" class=\"headerlink\" title=\"2、分离线程（创建线程并启动）\"></a>2、分离线程（创建线程并启动）</h3><pre><code class=\"objective-c\"> [NSThread detachNewThreadSelector:@selector(downloadWithURL:) toTarget:self withObject:@&quot;thread3：detach&quot;];\n</code></pre>\n<h3 id=\"3、隐式创建一个线程\"><a href=\"#3、隐式创建一个线程\" class=\"headerlink\" title=\"3、隐式创建一个线程\"></a>3、隐式创建一个线程</h3><pre><code class=\"objective-c\">performSelectorInBackground:\n</code></pre>\n<h3 id=\"4、常见方法：\"><a href=\"#4、常见方法：\" class=\"headerlink\" title=\"4、常见方法：\"></a>4、常见方法：</h3><pre><code class=\"objective-c\">// 获取当前线程\n[NSThread currentThread];\n// 获取主线程\n[NSThread mainThread];\n</code></pre>\n<h3 id=\"5、睡眠（暂停）线程；死亡\"><a href=\"#5、睡眠（暂停）线程；死亡\" class=\"headerlink\" title=\"5、睡眠（暂停）线程；死亡\"></a>5、睡眠（暂停）线程；死亡</h3><pre><code class=\"objective-c\">+ (void)sleepUntilDate:(NSDate):date;\n+ (void)sleepForTimeInterval(NSTimeInterVal)ti;\n\n+ (void)exit; // 线程死亡，并释放内存\n</code></pre>\n<h3 id=\"6、互斥锁、同步锁（-synchronize）\"><a href=\"#6、互斥锁、同步锁（-synchronize）\" class=\"headerlink\" title=\"6、互斥锁、同步锁（@synchronize）\"></a>6、互斥锁、同步锁（@synchronize）</h3><p>① 目的：为了防止多个线程访问同一块内存（数据），从而造成数据竞争的问题。</p>\n<p>②使用：</p>\n<pre><code class=\"objective-c\">// 因为只需要一把锁，所以需要一个静态全局锁对象(保证只创建一次)，一般我们用 self 代替。\n@synchronize（LockObject）{  \n    // 操作\n}\n</code></pre>\n<p>③作用：一个线程获得锁以后，会阻塞其他想要访问此锁的线程，知道该锁被释放。</p>\n<p>④其他锁：</p>\n<blockquote>\n<ol>\n<li>NSLock</li>\n<li>NSRecursiveLock</li>\n<li>NSCondition</li>\n<li>NSConditionLock</li>\n<li>pthread_mutex</li>\n<li>pthread_rwlock</li>\n<li>POSIX Conditions</li>\n<li>OSSpinLock (自旋锁)</li>\n<li>os_unfair_lock</li>\n<li>dispatch_semaphore （信号量）</li>\n<li>@synchronized （互斥锁 ）</li>\n</ol>\n</blockquote>\n<h3 id=\"7、线程通讯\"><a href=\"#7、线程通讯\" class=\"headerlink\" title=\"7、线程通讯\"></a>7、线程通讯</h3><h3 id=\"8、注意事项：\"><a href=\"#8、注意事项：\" class=\"headerlink\" title=\"8、注意事项：\"></a>8、注意事项：</h3><p>① 不要同时开太多线程（1~3条即可，最好不要超过5条）</p>\n<p>② 主线程：UI 线程；（因为属性都是 非原子性的，为了线程安全，所以不要在子线程更新 UI ）</p>\n<p>​     子线程：后台线程；（执行耗时操作 ）</p>\n<h2 id=\"二、GCD\"><a href=\"#二、GCD\" class=\"headerlink\" title=\"二、GCD\"></a>二、GCD</h2><p>1、同步与异步：sync、async （执行）决定要不要开启多线程</p>\n<ul>\n<li>同步：只能在当前线程中执行任务，不具备开启新线程的能力；（不常用）</li>\n<li>异步：可以在新的线程中执行任务，具备开新线程的能力； （开发中一般只需要考虑异步串行队列和异步并行队列）</li>\n</ul>\n<p>2、队列：并发队列、串行队列（concurrent、serial）（队列）决定执行顺序 </p>\n<ul>\n<li>并发队列：可以让多个任务并发执行(同步执行)，自动开启多个线程执行任务。（所以并发队列异步执行才有效）。一般同时开多条线程 （取决于 CPU 调度）</li>\n<li>串行队列：让任务一个接一个执行。一般  只开一条线程。（取决于 CPU 调度     ）</li>\n</ul>\n<p>3、主队列和全局队列</p>\n<ul>\n<li>main：全局串行队列</li>\n<li>global：全局并发队列</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>并发队列（global_queue）</th>\n<th>串行队列</th>\n<th>主队列（串）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>同步执行</td>\n<td>不开启多线程，串行执行</td>\n<td>不开多线程，串行执行</td>\n<td>不开多线程，串行执行</td>\n</tr>\n<tr>\n<td>异步执行</td>\n<td><strong>开启多线程，并发执行</strong></td>\n<td><strong>开启多线程，串行执行</strong></td>\n<td>不开多线程，串行执行</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"UITableView详解","date":"2018-01-14T00:32:25.000Z","thumbnail":null,"_content":"\n\n\n* UITableView**DataSource**\n  * 必要的\n    * 设置 tableview cell\n    * 设置行数\n  * 可选的\n    * ​\n* UITableView**Delegate**\n  * 可选的\n    * 设置行高\n\n\n\n\n\n* UITableView**DataSource**\n\n  * required\n    * UITableViewCell \n    * numberOfRowsInSection\n  * optional\n    * numberOfSectionsInTableView \n    * titleForHeaderViewOrFooterView\n    * index\n      * sectionForSectionIndexTitle\n      * sectionIndexTitlesForTableView\n\n* UITableView**Delegate**\n\n  * optional\n    * Display customization\n    * Variable (estimated) height support\n    * Section header & footer information.返回一个 view\n    * Accessories\n    * should or did (Un)HighlightRowAtIndexPath\n    * Called before the user changes the selection.\n    * Editing\n\n  ​","source":"_posts/iOS开发/控件/UITableView详解.md","raw":"---\ntitle: UITableView详解\ndate: 2018-01-14 08:32:25\ntags: UITableView\ncategories: iOS开发\nthumbnail:\n---\n\n\n\n* UITableView**DataSource**\n  * 必要的\n    * 设置 tableview cell\n    * 设置行数\n  * 可选的\n    * ​\n* UITableView**Delegate**\n  * 可选的\n    * 设置行高\n\n\n\n\n\n* UITableView**DataSource**\n\n  * required\n    * UITableViewCell \n    * numberOfRowsInSection\n  * optional\n    * numberOfSectionsInTableView \n    * titleForHeaderViewOrFooterView\n    * index\n      * sectionForSectionIndexTitle\n      * sectionIndexTitlesForTableView\n\n* UITableView**Delegate**\n\n  * optional\n    * Display customization\n    * Variable (estimated) height support\n    * Section header & footer information.返回一个 view\n    * Accessories\n    * should or did (Un)HighlightRowAtIndexPath\n    * Called before the user changes the selection.\n    * Editing\n\n  ​","slug":"iOS开发/控件/UITableView详解","published":1,"updated":"2018-01-14T01:05:10.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1edb8b001rdc4mfyga7exb","content":"<ul>\n<li>UITableView<strong>DataSource</strong><ul>\n<li>必要的<ul>\n<li>设置 tableview cell</li>\n<li>设置行数</li>\n</ul>\n</li>\n<li>可选的<ul>\n<li>​</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>UITableView<strong>Delegate</strong><ul>\n<li>可选的<ul>\n<li>设置行高</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>UITableView<strong>DataSource</strong></p>\n<ul>\n<li>required<ul>\n<li>UITableViewCell </li>\n<li>numberOfRowsInSection</li>\n</ul>\n</li>\n<li>optional<ul>\n<li>numberOfSectionsInTableView </li>\n<li>titleForHeaderViewOrFooterView</li>\n<li>index<ul>\n<li>sectionForSectionIndexTitle</li>\n<li>sectionIndexTitlesForTableView</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>UITableView<strong>Delegate</strong></p>\n<ul>\n<li>optional<ul>\n<li>Display customization</li>\n<li>Variable (estimated) height support</li>\n<li>Section header &amp; footer information.返回一个 view</li>\n<li>Accessories</li>\n<li>should or did (Un)HighlightRowAtIndexPath</li>\n<li>Called before the user changes the selection.</li>\n<li>Editing</li>\n</ul>\n</li>\n</ul>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}}},"excerpt":"","more":"<ul>\n<li>UITableView<strong>DataSource</strong><ul>\n<li>必要的<ul>\n<li>设置 tableview cell</li>\n<li>设置行数</li>\n</ul>\n</li>\n<li>可选的<ul>\n<li>​</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>UITableView<strong>Delegate</strong><ul>\n<li>可选的<ul>\n<li>设置行高</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>UITableView<strong>DataSource</strong></p>\n<ul>\n<li>required<ul>\n<li>UITableViewCell </li>\n<li>numberOfRowsInSection</li>\n</ul>\n</li>\n<li>optional<ul>\n<li>numberOfSectionsInTableView </li>\n<li>titleForHeaderViewOrFooterView</li>\n<li>index<ul>\n<li>sectionForSectionIndexTitle</li>\n<li>sectionIndexTitlesForTableView</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>UITableView<strong>Delegate</strong></p>\n<ul>\n<li>optional<ul>\n<li>Display customization</li>\n<li>Variable (estimated) height support</li>\n<li>Section header &amp; footer information.返回一个 view</li>\n<li>Accessories</li>\n<li>should or did (Un)HighlightRowAtIndexPath</li>\n<li>Called before the user changes the selection.</li>\n<li>Editing</li>\n</ul>\n</li>\n</ul>\n<p>​</p>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/HTTP/Http报文详解/响应报文首部.png","slug":"响应报文首部.png","post":"cjd1edb6t0009dc4m8ao3zb0v","modified":0,"renderable":0},{"_id":"source/_posts/Linux/gem、rvm使用心得/timg.jpeg","slug":"timg.jpeg","post":"cjd1edb6w000ddc4myzta63e3","modified":0,"renderable":0},{"_id":"source/_posts/Git & SVN/github-使用手册/timg.jpeg","slug":"timg.jpeg","post":"cjd1edb6u000adc4m2qxfwbx2","modified":0,"renderable":0},{"_id":"source/_posts/iOS开发/iOS 开发基础/instrument-详解/instrument.png","slug":"instrument.png","post":"cjd1edb7w0017dc4ma8nyc9nc","modified":0,"renderable":0},{"_id":"source/_posts/iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS/thum.jpg","slug":"thum.jpg","post":"cjd1edb80001bdc4m6d8xkuny","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjd1edb5j0000dc4mg56kaotr","category_id":"cjd1edb5q0003dc4m6x2w4114","_id":"cjd1edb5v0006dc4megfkqklg"},{"post_id":"cjd1edb6t0009dc4m8ao3zb0v","category_id":"cjd1edb6w000bdc4ml484xul1","_id":"cjd1edb79000jdc4mz13rb1f2"},{"post_id":"cjd1edb6u000adc4m2qxfwbx2","category_id":"cjd1edb78000gdc4mdd76smel","_id":"cjd1edb7a000odc4mtweaisp5"},{"post_id":"cjd1edb6w000ddc4myzta63e3","category_id":"cjd1edb7a000kdc4m65ngonvn","_id":"cjd1edb7c000tdc4mzbg135o3"},{"post_id":"cjd1edb71000edc4mpho1qfdb","category_id":"cjd1edb7a000kdc4m65ngonvn","_id":"cjd1edb7d000wdc4mjir390nx"},{"post_id":"cjd1edb77000fdc4m8o3r2yvy","category_id":"cjd1edb7a000kdc4m65ngonvn","_id":"cjd1edb7d000zdc4mn8x1q4wm"},{"post_id":"cjd1edb78000idc4mmf2rnnf1","category_id":"cjd1edb7d000vdc4mju8j7rv7","_id":"cjd1edb7e0012dc4msvpcv5oj"},{"post_id":"cjd1edb7w0017dc4ma8nyc9nc","category_id":"cjd1edb5q0003dc4m6x2w4114","_id":"cjd1edb80001cdc4mtdpyb3lw"},{"post_id":"cjd1edb7x0018dc4mydq1nu59","category_id":"cjd1edb5q0003dc4m6x2w4114","_id":"cjd1edb86001edc4m4wi0y6qb"},{"post_id":"cjd1edb7z001adc4mnonu1qcw","category_id":"cjd1edb5q0003dc4m6x2w4114","_id":"cjd1edb87001idc4mredkse4g"},{"post_id":"cjd1edb80001bdc4m6d8xkuny","category_id":"cjd1edb5q0003dc4m6x2w4114","_id":"cjd1edb88001kdc4m4ofmlcyr"},{"post_id":"cjd1edb85001ddc4m3wc3i4m1","category_id":"cjd1edb5q0003dc4m6x2w4114","_id":"cjd1edb89001ndc4mf193ji5g"},{"post_id":"cjd1edb86001hdc4mmganr0od","category_id":"cjd1edb5q0003dc4m6x2w4114","_id":"cjd1edb8a001qdc4mcodjqytc"},{"post_id":"cjd1edb8b001rdc4mfyga7exb","category_id":"cjd1edb5q0003dc4m6x2w4114","_id":"cjd1edb8c001udc4mcqjruy5t"}],"PostTag":[{"post_id":"cjd1edb5j0000dc4mg56kaotr","tag_id":"cjd1edb5r0004dc4m7e9hoxhj","_id":"cjd1edb5t0005dc4m4f2i7zy5"},{"post_id":"cjd1edb6t0009dc4m8ao3zb0v","tag_id":"cjd1edb6w000cdc4m1j80592h","_id":"cjd1edb7a000mdc4mf2ruschb"},{"post_id":"cjd1edb6t0009dc4m8ao3zb0v","tag_id":"cjd1edb78000hdc4mzhqnrh4s","_id":"cjd1edb7a000ndc4mqnu5hf0t"},{"post_id":"cjd1edb6u000adc4m2qxfwbx2","tag_id":"cjd1edb7a000ldc4mgs9e9d5j","_id":"cjd1edb7c000rdc4mlr7r7dad"},{"post_id":"cjd1edb6w000ddc4myzta63e3","tag_id":"cjd1edb7a000qdc4mg4hmq5ia","_id":"cjd1edb7d000ydc4mokzvor86"},{"post_id":"cjd1edb6w000ddc4myzta63e3","tag_id":"cjd1edb7c000udc4mgs0wxqbv","_id":"cjd1edb7d0010dc4mxk7ci6y3"},{"post_id":"cjd1edb71000edc4mpho1qfdb","tag_id":"cjd1edb7d000xdc4mq9l72hg2","_id":"cjd1edb7f0014dc4mft990zhn"},{"post_id":"cjd1edb71000edc4mpho1qfdb","tag_id":"cjd1edb7d0011dc4m0fw856sc","_id":"cjd1edb7f0015dc4micf7vck1"},{"post_id":"cjd1edb77000fdc4m8o3r2yvy","tag_id":"cjd1edb7e0013dc4mgd54h8z1","_id":"cjd1edb7f0016dc4m2ai6fhyk"},{"post_id":"cjd1edb7w0017dc4ma8nyc9nc","tag_id":"cjd1edb7y0019dc4m21wo3t3e","_id":"cjd1edb86001gdc4mez71pfvs"},{"post_id":"cjd1edb7x0018dc4mydq1nu59","tag_id":"cjd1edb86001fdc4mqnznevbq","_id":"cjd1edb89001odc4mucj4hpwg"},{"post_id":"cjd1edb80001bdc4m6d8xkuny","tag_id":"cjd1edb88001ldc4m8qvwc2c9","_id":"cjd1edb8b001sdc4mvlqphryj"},{"post_id":"cjd1edb8b001rdc4mfyga7exb","tag_id":"cjd1edb8c001tdc4mn85zvm4l","_id":"cjd1edb8c001vdc4mlirg6r4h"}],"Tag":[{"name":"weak&strong","_id":"cjd1edb5r0004dc4m7e9hoxhj"},{"name":"Http 报文","_id":"cjd1edb6w000cdc4m1j80592h"},{"name":"URL","_id":"cjd1edb78000hdc4mzhqnrh4s"},{"name":"github","_id":"cjd1edb7a000ldc4mgs9e9d5j"},{"name":"gem","_id":"cjd1edb7a000qdc4mg4hmq5ia"},{"name":"rvm","_id":"cjd1edb7c000udc4mgs0wxqbv"},{"name":"tools","_id":"cjd1edb7d000xdc4mq9l72hg2"},{"name":"plugins","_id":"cjd1edb7d0011dc4m0fw856sc"},{"name":"cUrl","_id":"cjd1edb7e0013dc4mgd54h8z1"},{"name":"instrument","_id":"cjd1edb7y0019dc4m21wo3t3e"},{"name":"网络请求","_id":"cjd1edb86001fdc4mqnznevbq"},{"name":"libimobiledevice","_id":"cjd1edb88001ldc4m8qvwc2c9"},{"name":"UITableView","_id":"cjd1edb8c001tdc4mn85zvm4l"}]}}