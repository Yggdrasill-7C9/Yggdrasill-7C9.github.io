{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/fireworks.js","path":"js/src/fireworks.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"0db3c21183c8cf645d58a3863ff1f889426825e6","modified":1523584086000},{"_id":"themes/next/.DS_Store","hash":"28e4a490d19f751cc1cb2b8e1fc57d7898e832ae","modified":1523450018000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"0e2c8b96d6a092edcef23cb90c3c7a5d461fb6dd","modified":1523549633000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"source/_posts/.DS_Store","hash":"16cc30eeb0afebc96d2491e8b782422ae779a549","modified":1523523511000},{"_id":"source/gallery/index.md","hash":"5fa1bf19732844af5cc1eaf832708c92a9420d58","modified":1515651900000},{"_id":"source/_data/_links.yml","hash":"49d585246485cc86abdd91f23cda9416fb961c10","modified":1515653257000},{"_id":"source/_data/gallery.yml","hash":"b7663435c7a8eccb9ad385081c23662653af0428","modified":1515653057000},{"_id":"source/_data/links.yml","hash":"49d585246485cc86abdd91f23cda9416fb961c10","modified":1515653135000},{"_id":"source/about/index.md","hash":"22a81c38dec4480c3b4d118dafa8ce677426f519","modified":1517369739000},{"_id":"source/tag/index.md","hash":"e86e136e1db84e83d13f91f572292fd75d05c8ef","modified":1523431488000},{"_id":"source/group/index.md","hash":"441eadb0ba84574d92cb0d93f2b510207e87e531","modified":1515653610000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514806389000},{"_id":"source/categories/index.md","hash":"1ae9bd2f05488ba214983d94a3f90a6be4ff488c","modified":1523431735000},{"_id":"source/uploads/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1523540198000},{"_id":"themes/next/layout/_layout.swig","hash":"01adf5c124f40c2d8f625410a3b3c5de1388c023","modified":1523541380000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1523458562000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/languages/.DS_Store","hash":"ae1f770b568d2eec50297fc34570de853bd318c4","modified":1523444286000},{"_id":"themes/next/languages/zh-CN.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"source/_posts/Git & SVN/.DS_Store","hash":"8206939ecfc95185c2803d138637dcf5abda373d","modified":1517366889000},{"_id":"source/_posts/Git & SVN/github-使用手册.md","hash":"56850d7f86451487fb5d017dd50516a32f2f1a62","modified":1516072490000},{"_id":"source/_posts/股票投资/股票术语.md","hash":"6447fef161e130c993746a9354036cd72d919fa9","modified":1523523596000},{"_id":"source/_posts/HTTP/.DS_Store","hash":"491b8524e38f2908eaf1633833219156b2082f9d","modified":1516072225000},{"_id":"source/_posts/HTTP/Http报文详解.md","hash":"5840f9198f88b91e7f270cc41795b484c5045392","modified":1517388346000},{"_id":"source/_posts/股票投资/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517366894000},{"_id":"source/_posts/Linux/.DS_Store","hash":"8530b944896698532bc35691421eb0d5a097567f","modified":1517366877000},{"_id":"source/_posts/Linux/cUrl使用心得.md","hash":"b450b61543bec51a52d0f5a20d47a60a992bef1e","modified":1517388421000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"source/_posts/Linux/gem、rvm使用心得.md","hash":"facc96554ef40a3dedd93d255f08e8ea48d3727a","modified":1516072605000},{"_id":"source/_posts/Linux/分享几个常用的插件工具.md","hash":"aaf58923ac578222e055e0b20ba3851792a089e3","modified":1517388440000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"source/_posts/iOS开发/.DS_Store","hash":"83927ace222ecbe2ac07c7fc0b715eebb104ac84","modified":1517366990000},{"_id":"themes/next/source/js/.DS_Store","hash":"4e2c6d9ce95358c3ef9990e46afb1d5a1ebeb7fc","modified":1523541925000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"ede707069a56549018849b4f0547c2ea5d297fae","modified":1523458621000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/languages/bak/.DS_Store","hash":"7eebdef9747839b9ae81432a0c7c4a52d89a8bcc","modified":1523444286000},{"_id":"themes/next/languages/bak/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/bak/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/bak/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/bak/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/bak/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/bak/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/bak/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/bak/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/bak/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/bak/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/bak/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/bak/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/bak/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/languages/bak/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/languages/bak/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"source/_posts/iOS开发/iOS 开发基础/instrument-详解.md","hash":"dad2c8974835e39d55221038dbee0cd97d25a07d","modified":1517388387000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"source/_posts/iOS开发/iOS 开发基础/.DS_Store","hash":"bc78a6a6f99a66e4ed0cb87f1cd6c19476470056","modified":1517366995000},{"_id":"source/_posts/iOS开发/iOS 开发基础/ios-HTTP请求.md","hash":"8fd59bc7aa83c0f02e06e3932cab1bff35564230","modified":1517388393000},{"_id":"source/_posts/iOS开发/iOS 开发基础/weak和-strong.md","hash":"e0c5e2562955d545bc2301f4f4db8f445f14e0d7","modified":1517388399000},{"_id":"source/_posts/iOS开发/iOS 开发基础/闭包、lambda-计算、block.md","hash":"7c9c1af926737a568d8063eb1d31028d7ace6576","modified":1517388376000},{"_id":"source/_posts/iOS开发/iOS 逆向开发/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517366846000},{"_id":"source/_posts/iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS.md","hash":"4565db7e76b6d2c83b71e246c89e4dca612bc571","modified":1515739865000},{"_id":"source/_posts/iOS开发/其他/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517366851000},{"_id":"source/_posts/iOS开发/其他/ios知识脉络梳理.md","hash":"4c9a9ca8260ce1c3a4ba597266b152231e3b4cee","modified":1517388369000},{"_id":"source/_posts/iOS开发/开发笔记/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517366771000},{"_id":"source/_posts/iOS开发/开发笔记/iOS开发笔记.md","hash":"8a864a4125f8f490adf802a207cb7889ebe13f02","modified":1517673906000},{"_id":"source/_posts/iOS开发/控件/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517366856000},{"_id":"source/_posts/iOS开发/控件/UITableView详解.md","hash":"0fb8da0c89e3eaf5d4061e7222c615322cc82b99","modified":1517388661000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"5c27d604bc18cebf94c72806899f6c178918c49b","modified":1523460377000},{"_id":"themes/next/source/js/src/.DS_Store","hash":"b53b9da76dc203c367ee14f5e1d5a996c8e1cb49","modified":1523541191000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/fireworks.js","hash":"d2762f441995e28ae8ca3500548e3d084f65054e","modified":1523541304000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"source/_posts/HTTP/Http报文详解/响应报文首部.png","hash":"2a4c0a9b868def4daed483d1976347ea85be52f0","modified":1515835143000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"source/_posts/iOS开发/iOS 开发基础/instrument-详解/instrument.png","hash":"74ded96ccc7883a576e55c8c1bf1b3f852329b83","modified":1516030039000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bcab6cb6c5d2f0824131851bbfdc6852b5b542ef","modified":1523536906000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"source/uploads/avatar.jpg","hash":"4535f5c3f19d817c558619017c6ad9b912289a40","modified":1523540181000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"public/atom.xml","hash":"470e3f9a94de611e8bca6c3ba70f37444623d2ef","modified":1523585688341},{"_id":"public/gallery/index.html","hash":"29e77d23fbe9de56d81221e3be7e6b55e61820c5","modified":1523585688366},{"_id":"public/about/index.html","hash":"4cfeff9952c5576559f50673fc2b2ee761392eb9","modified":1523585688366},{"_id":"public/tag/index.html","hash":"a41bfb478840959c5d3fb9fec6387e27afb17e1e","modified":1523585688366},{"_id":"public/group/index.html","hash":"2db75573d44fa032d3d8be554d958e0af62a03d3","modified":1523585688366},{"_id":"public/categories/index.html","hash":"4c16dc763104905c7b509d96f50d891436314dd4","modified":1523585688366},{"_id":"public/2018/01/18/股票投资/股票术语/index.html","hash":"b52eaad19731e03933d42ab333449d2c65370ec7","modified":1523585688366},{"_id":"public/2017/12/29/iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS/index.html","hash":"c50674cb13b7d4e50c4a4b26c2b597da3cdddb44","modified":1523585688366},{"_id":"public/2016/06/12/Linux/分享几个常用的插件工具/index.html","hash":"54e8c888df94e4ed3912fe922756a7718f0e0321","modified":1523585688367},{"_id":"public/2014/05/20/iOS开发/iOS 开发基础/weak和-strong/index.html","hash":"9fc69cfc89fc8f131f8407eaae2803c0d4dcf8a3","modified":1523585688367},{"_id":"public/2014/05/19/iOS开发/其他/ios知识脉络梳理/index.html","hash":"deb583e4aacd45f531515b668b95c2b55ac5cd2f","modified":1523585688367},{"_id":"public/2014/05/16/iOS开发/iOS 开发基础/ios-HTTP请求/index.html","hash":"9d743f6fab1a7cf0f80aa92801de186830d08c76","modified":1523585688367},{"_id":"public/2014/05/15/iOS开发/iOS 开发基础/instrument-详解/index.html","hash":"976a990b8c900a262f0b576409c754a137c6b171","modified":1523585688367},{"_id":"public/2014/05/15/iOS开发/iOS 开发基础/闭包、lambda-计算、block/index.html","hash":"b979289deeaa5b41474e299f68109238b1368b4d","modified":1523585688367},{"_id":"public/2014/05/14/iOS开发/控件/UITableView详解/index.html","hash":"a6a2c1e8964488514e0bb301f0536612cbc87c90","modified":1523585688367},{"_id":"public/2014/01/10/iOS开发/开发笔记/iOS开发笔记/index.html","hash":"eded4dbc0f6f068dc263565430c7ed7288976e9b","modified":1523585688367},{"_id":"public/2013/05/13/HTTP/Http报文详解/index.html","hash":"965a5643fc41120bab243344783e203fdfc3e682","modified":1523585688367},{"_id":"public/2013/04/25/Linux/gem、rvm使用心得/index.html","hash":"4feee81877d082787c07a1e287ab3911aaca6141","modified":1523585688367},{"_id":"public/2013/04/24/Git & SVN/github-使用手册/index.html","hash":"fb866c452122e16ad84464f3ce950558f2b18b53","modified":1523585688367},{"_id":"public/2013/01/13/Linux/cUrl使用心得/index.html","hash":"f1009d6109c23660e8da27fc9bb8342bcde76d92","modified":1523585688368},{"_id":"public/categories/git-svn/index.html","hash":"23c00948959891c01b33081af3a9bab9ae143260","modified":1523585688368},{"_id":"public/categories/股票投资/index.html","hash":"0c433ff83e4560a991b95e8b9f3779dec4ca7f6f","modified":1523585688368},{"_id":"public/categories/Http/index.html","hash":"6216bf6b939fc579a12d47969ea7414c61ded90f","modified":1523585688368},{"_id":"public/categories/Linux/index.html","hash":"eb024261235c171f1f18e636de7c6c0954b72e5b","modified":1523585688368},{"_id":"public/categories/iOS开发/index.html","hash":"a75843d96bd2f68f3c68f603393939e4c506351a","modified":1523585688368},{"_id":"public/archives/index.html","hash":"ca1b55f6919dcaea1527bad624b7510924482c83","modified":1523585688368},{"_id":"public/archives/page/2/index.html","hash":"1d2afb70aa655f7818f96eac1fe7b93d8bd78c6e","modified":1523585688368},{"_id":"public/archives/2013/index.html","hash":"6fafcb81bf3c433c7825fac8458f4cc355cfffff","modified":1523585688368},{"_id":"public/archives/2013/01/index.html","hash":"de48547489418d9779151a1fae44ad10a316bd69","modified":1523585688368},{"_id":"public/archives/2013/04/index.html","hash":"f89f9145d5523678bc5da7db37c40b924c3f8149","modified":1523585688368},{"_id":"public/archives/2013/05/index.html","hash":"084b8f64401772ab7808aa875ca8f22d213af37c","modified":1523585688368},{"_id":"public/archives/2014/index.html","hash":"ce72400d012346e2b1bc4e37a892af2e4eb303f1","modified":1523585688369},{"_id":"public/archives/2014/01/index.html","hash":"bad170ebe471a27020dfb80a35266d7fb55ce92d","modified":1523585688369},{"_id":"public/archives/2014/05/index.html","hash":"603da9bc996923c362703b6b6d0b6c101349908d","modified":1523585688369},{"_id":"public/archives/2016/index.html","hash":"11ae62af4c643bbe868aa6de827a5caa97fd90bd","modified":1523585688369},{"_id":"public/archives/2016/06/index.html","hash":"809aab8abc443d46b688781a2c8a25b48978dc4e","modified":1523585688369},{"_id":"public/archives/2017/index.html","hash":"acb09368c07ba0eac2340273d4bc20f1b4e69dbf","modified":1523585688369},{"_id":"public/archives/2017/12/index.html","hash":"31b36b8f7f2b83b64b114b21f465fba9df8018d7","modified":1523585688369},{"_id":"public/archives/2018/index.html","hash":"fbeb31791d0c84ac59e36be747e3f53197af1b96","modified":1523585688369},{"_id":"public/archives/2018/01/index.html","hash":"e6cafd3ad42bbee4acc1a815b08966a4c0f6858a","modified":1523585688369},{"_id":"public/index.html","hash":"86eb8cd4d3790e5214b703177e0ded4521e0cb84","modified":1523585688369},{"_id":"public/page/2/index.html","hash":"6310af280f663af08f898e2901827572ef9d586d","modified":1523585688369},{"_id":"public/tags/github/index.html","hash":"d0f1d1f66f4ad697581377d08bc5829462118f57","modified":1523585688370},{"_id":"public/tags/Http-报文/index.html","hash":"62de5b38466b7f07a9d232e454052a2785f18a25","modified":1523585688370},{"_id":"public/tags/URL/index.html","hash":"8c0e8f3383b16325fc4c981fa512ca74930f652d","modified":1523585688370},{"_id":"public/tags/cUrl/index.html","hash":"0550eab5b514722fbdc9d8ce0843955b47a4cb68","modified":1523585688370},{"_id":"public/tags/tools/index.html","hash":"1f4d31c0b9b4fc2de15bca9d5d8ad2e92835ea15","modified":1523585688370},{"_id":"public/tags/plugins/index.html","hash":"b07634510998c55f5e16fe45c10ead451d734e23","modified":1523585688370},{"_id":"public/tags/gem/index.html","hash":"e3b3d1d18b4ec7f5e2e76765ec39f29d7815198f","modified":1523585688370},{"_id":"public/tags/rvm/index.html","hash":"0783acab8be985d6be7eece2f5b15e5193071fdc","modified":1523585688370},{"_id":"public/tags/instrument/index.html","hash":"dbc8a1332d371017de8b38609c3e031c60d39acd","modified":1523585688370},{"_id":"public/tags/网络请求/index.html","hash":"990232970a4b9e42964235e27d53792526d0327a","modified":1523585688370},{"_id":"public/tags/weak-strong/index.html","hash":"8c4ccb6f82044dc9630092eac91dbfc99e478978","modified":1523585688370},{"_id":"public/tags/libimobiledevice/index.html","hash":"4a06ea4886336179809c0a802bd89cbd2d269e3c","modified":1523585688371},{"_id":"public/tags/UITableView/index.html","hash":"4f9537059117a202e2e7b0d5f5674157633991ec","modified":1523585688371},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1523585688380},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1523585688380},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1523585688380},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1523585688380},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1523585688380},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1523585688380},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1523585688380},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1523585688381},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1523585688381},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1523585688381},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1523585688381},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1523585688381},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523585688381},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1523585688381},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523585688381},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1523585688381},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1523585688381},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1523585688381},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1523585688381},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1523585688381},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523585688381},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523585688381},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523585688381},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523585688381},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523585688381},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523585688382},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1523585688382},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1523585688382},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1523585688382},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1523585688382},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1523585688382},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1523585688382},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523585688382},{"_id":"public/live2dw/assets/.DS_Store","hash":"84ec6486fb7f37681ce27f139db39da65ad3d647","modified":1523585688382},{"_id":"public/live2dw/assets/miku.model.json","hash":"32e49dfc6cb4d9c537453bb083aab39ed708c476","modified":1523585688382},{"_id":"public/live2dw/assets/miku.physics.json","hash":"d5ca7f215044ba5bf1cdb8045a5c99b64ec258ce","modified":1523585688382},{"_id":"public/live2dw/assets/moc/.DS_Store","hash":"006a38b3f1ed8a549b14f53552437811553c0725","modified":1523585688382},{"_id":"public/live2dw/assets/mtn/miku_idle_01.mtn","hash":"5633f73601cf8b0a318e7a7265f71cc782683251","modified":1523585688382},{"_id":"public/live2dw/assets/mtn/miku_m_01.mtn","hash":"bd0ea5f2f0528b21c4e5632838b69e478b652e88","modified":1523585688382},{"_id":"public/live2dw/assets/mtn/miku_m_02.mtn","hash":"2eda9602d626d89285e0c0c5f564383964516cc8","modified":1523585688382},{"_id":"public/live2dw/assets/mtn/miku_m_03.mtn","hash":"94ef9d31a78f7f90d3fb213c4353afbdb3462cff","modified":1523585688382},{"_id":"public/live2dw/assets/mtn/miku_m_04.mtn","hash":"5c440e8f4cd45e73a7c8044ea0e2ea11234f9fd9","modified":1523585688382},{"_id":"public/live2dw/assets/mtn/miku_m_05.mtn","hash":"73b9b162c1dbf9a6747364ae47b12cba9da0bbec","modified":1523585688383},{"_id":"public/live2dw/assets/mtn/miku_m_06.mtn","hash":"0bfd6ad29e5e171a1ce03a7acb8ffcca9f463902","modified":1523585688383},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"6e013af9c502b2e63ac5e42944e3244f8f515eb7","modified":1523585688383},{"_id":"public/live2dw/assets/mtn/miku_shake_01.mtn","hash":"190875ab6cdeee7ae87c4c296429b848c942dd8a","modified":1523585688383},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1523585689261},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1523585689269},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1523585689343},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1523585689343},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1523585689343},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1523585689343},{"_id":"public/js/src/fireworks.js","hash":"d2762f441995e28ae8ca3500548e3d084f65054e","modified":1523585689343},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1523585689343},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1523585689344},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1523585689344},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1523585689344},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1523585689344},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1523585689344},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1523585689344},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1523585689344},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1523585689344},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1523585689344},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1523585689345},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1523585689345},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1523585689345},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1523585689345},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1523585689345},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1523585689345},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1523585689345},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1523585689345},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1523585689345},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1523585689345},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1523585689345},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1523585689346},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1523585689346},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1523585689346},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1523585689346},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1523585689346},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1523585689346},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1523585689346},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1523585689346},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1523585689346},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1523585689346},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1523585689346},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1523585689346},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1523585689346},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1523585689347},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1523585689347},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1523585689347},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523585689347},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1523585689347},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523585689347},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1523585689347},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1523585689348},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1523585689348},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1523585689348},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1523585689348},{"_id":"public/css/main.css","hash":"162b774c87a3c2368398ec52690751a6b620855b","modified":1523585689348},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1523585689349},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1523585689349},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1523585689349},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1523585689349},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1523585689349},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1523585689349},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1523585689349},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1523585689349},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1523585689349},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1523585689349},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1523585689349},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1523585689349},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1523585689349},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1523585689349},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1523585689351},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1523585689351},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1523585689351},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1523585689351},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1523585689351},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1523585689351},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1523585689351},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1523585689351},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1523585689352},{"_id":"public/2013/05/13/HTTP/Http报文详解/响应报文首部.png","hash":"2a4c0a9b868def4daed483d1976347ea85be52f0","modified":1523585689352},{"_id":"public/2014/05/15/iOS开发/iOS 开发基础/instrument-详解/instrument.png","hash":"74ded96ccc7883a576e55c8c1bf1b3f852329b83","modified":1523585689352},{"_id":"public/live2dw/assets/moc/miku.moc","hash":"a57e92e12f1fcb21d4d3a9ac34f01badbeff3671","modified":1523585689352},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"7d3a9c937317b9c15f2c3a872f0e26607a729458","modified":1523585689352},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"5e7669733ecd0b1bc3881d2cf7fcc01e2990a07d","modified":1523585689363},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1523585689383},{"_id":"public/uploads/avatar.jpg","hash":"4535f5c3f19d817c558619017c6ad9b912289a40","modified":1523585690042},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"09521263ecc625a246b3406c385300e99e966a2e","modified":1523585690043},{"_id":"public/live2dw/assets/moc/miku.2048/texture_00.png","hash":"26fe101720ab8e55fb62c87b563d0dbb903c5eaf","modified":1523585690633}],"Category":[{"name":"git&svn","_id":"cjfxbkubv0007074mho61bx8k"},{"name":"股票投资","_id":"cjfxbkuc3000a074mbrgh843v"},{"name":"Http","_id":"cjfxbkuc5000e074mij1nvhbb"},{"name":"Linux","_id":"cjfxbkuf0000m074mgktfjqup"},{"name":"iOS开发","_id":"cjfxbkufi0015074momuv07i5"}],"Data":[{"_id":"_links","data":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}},{"_id":"gallery","data":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}}},{"_id":"links","data":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}],"Page":[{"title":"gallery","date":"2018-01-11T06:24:43.000Z","layout":"gallery","_content":"","source":"gallery/index.md","raw":"---\ntitle: gallery\ndate: 2018-01-11 14:24:43\nlayout: gallery\n---\n","updated":"2018-01-11T06:25:00.000Z","path":"gallery/index.html","comments":1,"_id":"cjfxbku5v0000074mcrgj8i5d","content":"","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":""},{"title":"about me","date":"2018-01-09T08:25:51.000Z","thumbnail":"http://acg.bakayun.cn/randbg.php?t=dfproject","_content":"\n# about \n| 参数           | 描述         | 默认值    |\n| ------------ | ---------- | ------ |\n| `thumbnail`  | 缩略图        |        |\n| `layout`     | 布局         |        |\n| `title`      | 标题         |        |\n| `date`       | 建立日期       | 文件建立日期 |\n| `updated`    | 更新日期       | 文件更新日期 |\n| `comments`   | 开启文章的评论功能  | true   |\n| `tags`       | 标签（不适用于分页） |        |\n| `categories` | 分类（不适用于分页） |        |\n| `permalink`  | 覆盖文章网址     |        |\n\n\n\n掌握的技能：\n\n* 能熟练使用 UML、思维导图、流程图、网络拓扑图\n* lldb\n* ​","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2018-01-09 16:25:51\nthumbnail: \"http://acg.bakayun.cn/randbg.php?t=dfproject\"\n---\n\n# about \n| 参数           | 描述         | 默认值    |\n| ------------ | ---------- | ------ |\n| `thumbnail`  | 缩略图        |        |\n| `layout`     | 布局         |        |\n| `title`      | 标题         |        |\n| `date`       | 建立日期       | 文件建立日期 |\n| `updated`    | 更新日期       | 文件更新日期 |\n| `comments`   | 开启文章的评论功能  | true   |\n| `tags`       | 标签（不适用于分页） |        |\n| `categories` | 分类（不适用于分页） |        |\n| `permalink`  | 覆盖文章网址     |        |\n\n\n\n掌握的技能：\n\n* 能熟练使用 UML、思维导图、流程图、网络拓扑图\n* lldb\n* ​","updated":"2018-01-31T03:35:39.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjfxbku5x0001074mlr4q1yn0","content":"<h1 id=\"about\"><a href=\"#about\" class=\"headerlink\" title=\"about\"></a>about</h1><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>thumbnail</code></td>\n<td>缩略图</td>\n<td></td>\n</tr>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td><code>comments</code></td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<p>掌握的技能：</p>\n<ul>\n<li>能熟练使用 UML、思维导图、流程图、网络拓扑图</li>\n<li>lldb</li>\n<li>​</li>\n</ul>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<h1 id=\"about\"><a href=\"#about\" class=\"headerlink\" title=\"about\"></a>about</h1><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>thumbnail</code></td>\n<td>缩略图</td>\n<td></td>\n</tr>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td><code>comments</code></td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<p>掌握的技能：</p>\n<ul>\n<li>能熟练使用 UML、思维导图、流程图、网络拓扑图</li>\n<li>lldb</li>\n<li>​</li>\n</ul>\n"},{"title":"tag","date":"2013-01-11T06:11:49.000Z","layout":"tags","type":"tags","_content":"","source":"tag/index.md","raw":"---\ntitle: tag\ndate: 2013-01-11 14:11:49\nlayout: tags\ntype: \"tags\"\n---\n","updated":"2018-04-11T07:24:48.000Z","path":"tag/index.html","comments":1,"_id":"cjfxbku5y0002074mbmlajlfb","content":"","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":""},{"title":"group","date":"2018-01-11T06:25:18.000Z","layout":"links","_content":"","source":"group/index.md","raw":"---\ntitle: group\ndate: 2018-01-11 14:25:18\nlayout: links\n---\n","updated":"2018-01-11T06:53:30.000Z","path":"group/index.html","comments":1,"_id":"cjfxbku610003074mwkytw2m6","content":"","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":""},{"title":"All categories","date":"2013-01-11T04:39:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\n  title: All categories\n  date: 2013-1-11 12:39:04\n  type: \"categories\"\n---\n","updated":"2018-04-11T07:28:55.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjfxbku620004074ml7wri12p","content":"","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":""}],"Post":[{"title":"git 深入学习","date":"2013-04-24T09:07:16.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515664615&di=e299224babfec2bfc85a87315fc28e89&src=http://a3.topitme.com/3/af/64/1128834126ba564af3o.jpg","_content":"\n# （一）git深入学习\n\n\n\n### 一、官方说明\n\n##### start a working area (see also: git help tutorial)\n\n- clone      Clone a repository into a new directory\n\n  > 克隆一个 repo 到一个新的目录\n\n- init       Create an empty Git repository or reinitialize（重置） an existing one\n\n  > 创建一个空的 git repo 或者重置一个\n\n  ​\n\n##### work on the current change (see also: git help everyday)\n\n- add        Add file contents to the index\n\n  > add all\n  >\n  > ```\n  > git add .\n  > ```\n\n- mv         Move or rename a file, a directory, or a symlink\n\n- reset      Reset current HEAD to the specified state\n\n  > 重置当前 HEAD 区到指定的状态\n\n- rm         Remove files from the working tree and from the index\n\n##### examine the history and state (see also: git help revisions)\n\n- bisect     Use binary search to find the commit that introduced a bug\n\n  > 使用二分法查找\n\n- grep       Print lines matching a pattern\n\n  > *grep* (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)\n\n- log        Show commit logs\n\n- show       Show various types of objects\n\n- status     Show the working tree status\n\n  > 显示当前工作树的状态\n\n  ​\n\n  ##### grow, mark and tweak your common history\n\n- branch     List, create, or delete branches（分支）\n\n- checkout   Switch branches or restore working tree files（检出）\n\n- commit     Record changes to the repository（提交到版本库）\n\n- diff       Show changes between commits, commit and working tree, etc\n\n- merge      Join two or more development histories together（合并）\n\n  > 多人开发\n\n- rebase     Reapply commits on top of another base tip\n\n- tag        Create, list, delete or verify a tag object signed with GPG\n\n##### collaborate (see also: git help workflows)\n\n- fetch      Download objects and refs from another repository\n\n  > 从远程的分支获取最新版本到本地，不会自动 merge\n  >\n  > ```\n  > #从远程的origin 的 master主分支下载最新的版本到 origin/master分支上 \n  > git fetch origin master:tmp \n  >\n  > #比较本地的 master 分支和 origin/master 分支的区别\n  > git diff tmp \n  >\n  > #合并\n  > git merge tmp\n  > ```\n  >\n  >  git fetch 相对比 git pull 安全些\n\n- pull       Fetch from and integrate with another repository or a local branch\n\n  > 从远程的分支获取最新的版本，并 merge 到本地\n  >\n  > ```\n  > git pull origin master\n  > ```\n  >\n  > **fetch + merge = pull**\n\n- push       Update remote refs along with associated objects\n\n### 二、其他用法\n\n- remote \n\n  > ```\n  > git remote    #列出已经存在的分支\n  > ```\n  >\n  > ```\n  > git remote -v #列出详细信息，每个名字后面加上地址\n  > ```\n\n### 三、具体步骤\n\n```\n$cd yourRepoDict\n$git init \n$git add .\n$git commit -m \"xxxxx\"\n$git remote add origin https://github.com/Yggdrasill-7C9/blog.git\n$git push -u origin master\n```\n\n\n\n# （二）git深入学习\n\n## 一、常见概念\n\n1、**Git 的核心是一个对象数据库。**所有提交的文件、目录、以及相关的元数据都被储存在该数据库中。\n\n* Blob 对象：储存文件内容。\n* Tree 对象：储存目录数据。\n\n2、提交图：`git log --graph`\n\n3、Git 主要有两个层面构成：\n\n* 瓷质命令（porcelain command）\n* 管道（plumbing）\n\n4、快速合并：\n\n* 有两个分支 a 和 b。其中 b 并未对内容做任何修改。所以合并 ab的时候，实际就是将指针指向了a\t。\n* 非快进操作：`--no-ff`：强制产生一次新的提交\n\na —— b —— c ——d \\\n\n​             \\ ——————e\n\n\n\n创建并切换新分支`git checkout -b newbranch`\n\n强制切换新分支`git checkout --force newbranch` \n\n删除分支 `git branch -d nowbranch`\n\n强制删除当前分支 `git branch -D nowbranch` \n\n\n\n## 二、储藏\n\n希望在不提交的情况下修改当前版本的其他内容\n\n### 1、git stash\n\ngit shash 可以将工作区和暂存区中修改 保存在***储藏栈（stash stack）**\n\n### 2、git shash pop\n\n回复栈顶的被储存修改到*工作区*中\n\n### 3、git shash list\n\n查看储藏的修改内容\n\n\n\n## 三、\n\npush\n\npull\n\nmerge\n\nfetch\n\n","source":"_posts/Git & SVN/github-使用手册.md","raw":"---\ntitle: git 深入学习\ndate: 2013-04-24 17:07:16\ncategories: git&svn\ntags: github\nthumbnail: \"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515664615&di=e299224babfec2bfc85a87315fc28e89&src=http://a3.topitme.com/3/af/64/1128834126ba564af3o.jpg\"\n---\n\n# （一）git深入学习\n\n\n\n### 一、官方说明\n\n##### start a working area (see also: git help tutorial)\n\n- clone      Clone a repository into a new directory\n\n  > 克隆一个 repo 到一个新的目录\n\n- init       Create an empty Git repository or reinitialize（重置） an existing one\n\n  > 创建一个空的 git repo 或者重置一个\n\n  ​\n\n##### work on the current change (see also: git help everyday)\n\n- add        Add file contents to the index\n\n  > add all\n  >\n  > ```\n  > git add .\n  > ```\n\n- mv         Move or rename a file, a directory, or a symlink\n\n- reset      Reset current HEAD to the specified state\n\n  > 重置当前 HEAD 区到指定的状态\n\n- rm         Remove files from the working tree and from the index\n\n##### examine the history and state (see also: git help revisions)\n\n- bisect     Use binary search to find the commit that introduced a bug\n\n  > 使用二分法查找\n\n- grep       Print lines matching a pattern\n\n  > *grep* (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)\n\n- log        Show commit logs\n\n- show       Show various types of objects\n\n- status     Show the working tree status\n\n  > 显示当前工作树的状态\n\n  ​\n\n  ##### grow, mark and tweak your common history\n\n- branch     List, create, or delete branches（分支）\n\n- checkout   Switch branches or restore working tree files（检出）\n\n- commit     Record changes to the repository（提交到版本库）\n\n- diff       Show changes between commits, commit and working tree, etc\n\n- merge      Join two or more development histories together（合并）\n\n  > 多人开发\n\n- rebase     Reapply commits on top of another base tip\n\n- tag        Create, list, delete or verify a tag object signed with GPG\n\n##### collaborate (see also: git help workflows)\n\n- fetch      Download objects and refs from another repository\n\n  > 从远程的分支获取最新版本到本地，不会自动 merge\n  >\n  > ```\n  > #从远程的origin 的 master主分支下载最新的版本到 origin/master分支上 \n  > git fetch origin master:tmp \n  >\n  > #比较本地的 master 分支和 origin/master 分支的区别\n  > git diff tmp \n  >\n  > #合并\n  > git merge tmp\n  > ```\n  >\n  >  git fetch 相对比 git pull 安全些\n\n- pull       Fetch from and integrate with another repository or a local branch\n\n  > 从远程的分支获取最新的版本，并 merge 到本地\n  >\n  > ```\n  > git pull origin master\n  > ```\n  >\n  > **fetch + merge = pull**\n\n- push       Update remote refs along with associated objects\n\n### 二、其他用法\n\n- remote \n\n  > ```\n  > git remote    #列出已经存在的分支\n  > ```\n  >\n  > ```\n  > git remote -v #列出详细信息，每个名字后面加上地址\n  > ```\n\n### 三、具体步骤\n\n```\n$cd yourRepoDict\n$git init \n$git add .\n$git commit -m \"xxxxx\"\n$git remote add origin https://github.com/Yggdrasill-7C9/blog.git\n$git push -u origin master\n```\n\n\n\n# （二）git深入学习\n\n## 一、常见概念\n\n1、**Git 的核心是一个对象数据库。**所有提交的文件、目录、以及相关的元数据都被储存在该数据库中。\n\n* Blob 对象：储存文件内容。\n* Tree 对象：储存目录数据。\n\n2、提交图：`git log --graph`\n\n3、Git 主要有两个层面构成：\n\n* 瓷质命令（porcelain command）\n* 管道（plumbing）\n\n4、快速合并：\n\n* 有两个分支 a 和 b。其中 b 并未对内容做任何修改。所以合并 ab的时候，实际就是将指针指向了a\t。\n* 非快进操作：`--no-ff`：强制产生一次新的提交\n\na —— b —— c ——d \\\n\n​             \\ ——————e\n\n\n\n创建并切换新分支`git checkout -b newbranch`\n\n强制切换新分支`git checkout --force newbranch` \n\n删除分支 `git branch -d nowbranch`\n\n强制删除当前分支 `git branch -D nowbranch` \n\n\n\n## 二、储藏\n\n希望在不提交的情况下修改当前版本的其他内容\n\n### 1、git stash\n\ngit shash 可以将工作区和暂存区中修改 保存在***储藏栈（stash stack）**\n\n### 2、git shash pop\n\n回复栈顶的被储存修改到*工作区*中\n\n### 3、git shash list\n\n查看储藏的修改内容\n\n\n\n## 三、\n\npush\n\npull\n\nmerge\n\nfetch\n\n","slug":"Git & SVN/github-使用手册","published":1,"updated":"2018-01-16T03:14:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkubo0005074m0aw1io10","content":"<h1 id=\"（一）git深入学习\"><a href=\"#（一）git深入学习\" class=\"headerlink\" title=\"（一）git深入学习\"></a>（一）git深入学习</h1><h3 id=\"一、官方说明\"><a href=\"#一、官方说明\" class=\"headerlink\" title=\"一、官方说明\"></a>一、官方说明</h3><h5 id=\"start-a-working-area-see-also-git-help-tutorial\"><a href=\"#start-a-working-area-see-also-git-help-tutorial\" class=\"headerlink\" title=\"start a working area (see also: git help tutorial)\"></a>start a working area (see also: git help tutorial)</h5><ul>\n<li><p>clone      Clone a repository into a new directory</p>\n<blockquote>\n<p>克隆一个 repo 到一个新的目录</p>\n</blockquote>\n</li>\n<li><p>init       Create an empty Git repository or reinitialize（重置） an existing one</p>\n<blockquote>\n<p>创建一个空的 git repo 或者重置一个</p>\n</blockquote>\n<p>​</p>\n</li>\n</ul>\n<h5 id=\"work-on-the-current-change-see-also-git-help-everyday\"><a href=\"#work-on-the-current-change-see-also-git-help-everyday\" class=\"headerlink\" title=\"work on the current change (see also: git help everyday)\"></a>work on the current change (see also: git help everyday)</h5><ul>\n<li><p>add        Add file contents to the index</p>\n<blockquote>\n<p>add all</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; git add .</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>mv         Move or rename a file, a directory, or a symlink</p>\n</li>\n<li><p>reset      Reset current HEAD to the specified state</p>\n<blockquote>\n<p>重置当前 HEAD 区到指定的状态</p>\n</blockquote>\n</li>\n<li><p>rm         Remove files from the working tree and from the index</p>\n</li>\n</ul>\n<h5 id=\"examine-the-history-and-state-see-also-git-help-revisions\"><a href=\"#examine-the-history-and-state-see-also-git-help-revisions\" class=\"headerlink\" title=\"examine the history and state (see also: git help revisions)\"></a>examine the history and state (see also: git help revisions)</h5><ul>\n<li><p>bisect     Use binary search to find the commit that introduced a bug</p>\n<blockquote>\n<p>使用二分法查找</p>\n</blockquote>\n</li>\n<li><p>grep       Print lines matching a pattern</p>\n<blockquote>\n<p><em>grep</em> (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)</p>\n</blockquote>\n</li>\n<li><p>log        Show commit logs</p>\n</li>\n<li><p>show       Show various types of objects</p>\n</li>\n<li><p>status     Show the working tree status</p>\n<blockquote>\n<p>显示当前工作树的状态</p>\n</blockquote>\n<p>​</p>\n<h5 id=\"grow-mark-and-tweak-your-common-history\"><a href=\"#grow-mark-and-tweak-your-common-history\" class=\"headerlink\" title=\"grow, mark and tweak your common history\"></a>grow, mark and tweak your common history</h5></li>\n<li><p>branch     List, create, or delete branches（分支）</p>\n</li>\n<li><p>checkout   Switch branches or restore working tree files（检出）</p>\n</li>\n<li><p>commit     Record changes to the repository（提交到版本库）</p>\n</li>\n<li><p>diff       Show changes between commits, commit and working tree, etc</p>\n</li>\n<li><p>merge      Join two or more development histories together（合并）</p>\n<blockquote>\n<p>多人开发</p>\n</blockquote>\n</li>\n<li><p>rebase     Reapply commits on top of another base tip</p>\n</li>\n<li><p>tag        Create, list, delete or verify a tag object signed with GPG</p>\n</li>\n</ul>\n<h5 id=\"collaborate-see-also-git-help-workflows\"><a href=\"#collaborate-see-also-git-help-workflows\" class=\"headerlink\" title=\"collaborate (see also: git help workflows)\"></a>collaborate (see also: git help workflows)</h5><ul>\n<li><p>fetch      Download objects and refs from another repository</p>\n<blockquote>\n<p>从远程的分支获取最新版本到本地，不会自动 merge</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; #从远程的origin 的 master主分支下载最新的版本到 origin/master分支上 </span><br><span class=\"line\">&gt; git fetch origin master:tmp </span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; #比较本地的 master 分支和 origin/master 分支的区别</span><br><span class=\"line\">&gt; git diff tmp </span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; #合并</span><br><span class=\"line\">&gt; git merge tmp</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p> git fetch 相对比 git pull 安全些</p>\n</blockquote>\n</li>\n<li><p>pull       Fetch from and integrate with another repository or a local branch</p>\n<blockquote>\n<p>从远程的分支获取最新的版本，并 merge 到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; git pull origin master</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>fetch + merge = pull</strong></p>\n</blockquote>\n</li>\n<li><p>push       Update remote refs along with associated objects</p>\n</li>\n</ul>\n<h3 id=\"二、其他用法\"><a href=\"#二、其他用法\" class=\"headerlink\" title=\"二、其他用法\"></a>二、其他用法</h3><ul>\n<li><p>remote </p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; git remote    #列出已经存在的分支</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; git remote -v #列出详细信息，每个名字后面加上地址</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"三、具体步骤\"><a href=\"#三、具体步骤\" class=\"headerlink\" title=\"三、具体步骤\"></a>三、具体步骤</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$cd yourRepoDict</span><br><span class=\"line\">$git init </span><br><span class=\"line\">$git add .</span><br><span class=\"line\">$git commit -m &quot;xxxxx&quot;</span><br><span class=\"line\">$git remote add origin https://github.com/Yggdrasill-7C9/blog.git</span><br><span class=\"line\">$git push -u origin master</span><br></pre></td></tr></table></figure>\n<h1 id=\"（二）git深入学习\"><a href=\"#（二）git深入学习\" class=\"headerlink\" title=\"（二）git深入学习\"></a>（二）git深入学习</h1><h2 id=\"一、常见概念\"><a href=\"#一、常见概念\" class=\"headerlink\" title=\"一、常见概念\"></a>一、常见概念</h2><p>1、<strong>Git 的核心是一个对象数据库。</strong>所有提交的文件、目录、以及相关的元数据都被储存在该数据库中。</p>\n<ul>\n<li>Blob 对象：储存文件内容。</li>\n<li>Tree 对象：储存目录数据。</li>\n</ul>\n<p>2、提交图：<code>git log --graph</code></p>\n<p>3、Git 主要有两个层面构成：</p>\n<ul>\n<li>瓷质命令（porcelain command）</li>\n<li>管道（plumbing）</li>\n</ul>\n<p>4、快速合并：</p>\n<ul>\n<li>有两个分支 a 和 b。其中 b 并未对内容做任何修改。所以合并 ab的时候，实际就是将指针指向了a    。</li>\n<li>非快进操作：<code>--no-ff</code>：强制产生一次新的提交</li>\n</ul>\n<p>a —— b —— c ——d \\</p>\n<p>​             \\ ——————e</p>\n<p>创建并切换新分支<code>git checkout -b newbranch</code></p>\n<p>强制切换新分支<code>git checkout --force newbranch</code> </p>\n<p>删除分支 <code>git branch -d nowbranch</code></p>\n<p>强制删除当前分支 <code>git branch -D nowbranch</code> </p>\n<h2 id=\"二、储藏\"><a href=\"#二、储藏\" class=\"headerlink\" title=\"二、储藏\"></a>二、储藏</h2><p>希望在不提交的情况下修改当前版本的其他内容</p>\n<h3 id=\"1、git-stash\"><a href=\"#1、git-stash\" class=\"headerlink\" title=\"1、git stash\"></a>1、git stash</h3><p>git shash 可以将工作区和暂存区中修改 保存在<strong>*储藏栈（stash stack）</strong></p>\n<h3 id=\"2、git-shash-pop\"><a href=\"#2、git-shash-pop\" class=\"headerlink\" title=\"2、git shash pop\"></a>2、git shash pop</h3><p>回复栈顶的被储存修改到<em>工作区</em>中</p>\n<h3 id=\"3、git-shash-list\"><a href=\"#3、git-shash-list\" class=\"headerlink\" title=\"3、git shash list\"></a>3、git shash list</h3><p>查看储藏的修改内容</p>\n<h2 id=\"三、\"><a href=\"#三、\" class=\"headerlink\" title=\"三、\"></a>三、</h2><p>push</p>\n<p>pull</p>\n<p>merge</p>\n<p>fetch</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<h1 id=\"（一）git深入学习\"><a href=\"#（一）git深入学习\" class=\"headerlink\" title=\"（一）git深入学习\"></a>（一）git深入学习</h1><h3 id=\"一、官方说明\"><a href=\"#一、官方说明\" class=\"headerlink\" title=\"一、官方说明\"></a>一、官方说明</h3><h5 id=\"start-a-working-area-see-also-git-help-tutorial\"><a href=\"#start-a-working-area-see-also-git-help-tutorial\" class=\"headerlink\" title=\"start a working area (see also: git help tutorial)\"></a>start a working area (see also: git help tutorial)</h5><ul>\n<li><p>clone      Clone a repository into a new directory</p>\n<blockquote>\n<p>克隆一个 repo 到一个新的目录</p>\n</blockquote>\n</li>\n<li><p>init       Create an empty Git repository or reinitialize（重置） an existing one</p>\n<blockquote>\n<p>创建一个空的 git repo 或者重置一个</p>\n</blockquote>\n<p>​</p>\n</li>\n</ul>\n<h5 id=\"work-on-the-current-change-see-also-git-help-everyday\"><a href=\"#work-on-the-current-change-see-also-git-help-everyday\" class=\"headerlink\" title=\"work on the current change (see also: git help everyday)\"></a>work on the current change (see also: git help everyday)</h5><ul>\n<li><p>add        Add file contents to the index</p>\n<blockquote>\n<p>add all</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; git add .</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>mv         Move or rename a file, a directory, or a symlink</p>\n</li>\n<li><p>reset      Reset current HEAD to the specified state</p>\n<blockquote>\n<p>重置当前 HEAD 区到指定的状态</p>\n</blockquote>\n</li>\n<li><p>rm         Remove files from the working tree and from the index</p>\n</li>\n</ul>\n<h5 id=\"examine-the-history-and-state-see-also-git-help-revisions\"><a href=\"#examine-the-history-and-state-see-also-git-help-revisions\" class=\"headerlink\" title=\"examine the history and state (see also: git help revisions)\"></a>examine the history and state (see also: git help revisions)</h5><ul>\n<li><p>bisect     Use binary search to find the commit that introduced a bug</p>\n<blockquote>\n<p>使用二分法查找</p>\n</blockquote>\n</li>\n<li><p>grep       Print lines matching a pattern</p>\n<blockquote>\n<p><em>grep</em> (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)</p>\n</blockquote>\n</li>\n<li><p>log        Show commit logs</p>\n</li>\n<li><p>show       Show various types of objects</p>\n</li>\n<li><p>status     Show the working tree status</p>\n<blockquote>\n<p>显示当前工作树的状态</p>\n</blockquote>\n<p>​</p>\n<h5 id=\"grow-mark-and-tweak-your-common-history\"><a href=\"#grow-mark-and-tweak-your-common-history\" class=\"headerlink\" title=\"grow, mark and tweak your common history\"></a>grow, mark and tweak your common history</h5></li>\n<li><p>branch     List, create, or delete branches（分支）</p>\n</li>\n<li><p>checkout   Switch branches or restore working tree files（检出）</p>\n</li>\n<li><p>commit     Record changes to the repository（提交到版本库）</p>\n</li>\n<li><p>diff       Show changes between commits, commit and working tree, etc</p>\n</li>\n<li><p>merge      Join two or more development histories together（合并）</p>\n<blockquote>\n<p>多人开发</p>\n</blockquote>\n</li>\n<li><p>rebase     Reapply commits on top of another base tip</p>\n</li>\n<li><p>tag        Create, list, delete or verify a tag object signed with GPG</p>\n</li>\n</ul>\n<h5 id=\"collaborate-see-also-git-help-workflows\"><a href=\"#collaborate-see-also-git-help-workflows\" class=\"headerlink\" title=\"collaborate (see also: git help workflows)\"></a>collaborate (see also: git help workflows)</h5><ul>\n<li><p>fetch      Download objects and refs from another repository</p>\n<blockquote>\n<p>从远程的分支获取最新版本到本地，不会自动 merge</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; #从远程的origin 的 master主分支下载最新的版本到 origin/master分支上 </span><br><span class=\"line\">&gt; git fetch origin master:tmp </span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; #比较本地的 master 分支和 origin/master 分支的区别</span><br><span class=\"line\">&gt; git diff tmp </span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; #合并</span><br><span class=\"line\">&gt; git merge tmp</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p> git fetch 相对比 git pull 安全些</p>\n</blockquote>\n</li>\n<li><p>pull       Fetch from and integrate with another repository or a local branch</p>\n<blockquote>\n<p>从远程的分支获取最新的版本，并 merge 到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; git pull origin master</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>fetch + merge = pull</strong></p>\n</blockquote>\n</li>\n<li><p>push       Update remote refs along with associated objects</p>\n</li>\n</ul>\n<h3 id=\"二、其他用法\"><a href=\"#二、其他用法\" class=\"headerlink\" title=\"二、其他用法\"></a>二、其他用法</h3><ul>\n<li><p>remote </p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; git remote    #列出已经存在的分支</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; git remote -v #列出详细信息，每个名字后面加上地址</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"三、具体步骤\"><a href=\"#三、具体步骤\" class=\"headerlink\" title=\"三、具体步骤\"></a>三、具体步骤</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$cd yourRepoDict</span><br><span class=\"line\">$git init </span><br><span class=\"line\">$git add .</span><br><span class=\"line\">$git commit -m &quot;xxxxx&quot;</span><br><span class=\"line\">$git remote add origin https://github.com/Yggdrasill-7C9/blog.git</span><br><span class=\"line\">$git push -u origin master</span><br></pre></td></tr></table></figure>\n<h1 id=\"（二）git深入学习\"><a href=\"#（二）git深入学习\" class=\"headerlink\" title=\"（二）git深入学习\"></a>（二）git深入学习</h1><h2 id=\"一、常见概念\"><a href=\"#一、常见概念\" class=\"headerlink\" title=\"一、常见概念\"></a>一、常见概念</h2><p>1、<strong>Git 的核心是一个对象数据库。</strong>所有提交的文件、目录、以及相关的元数据都被储存在该数据库中。</p>\n<ul>\n<li>Blob 对象：储存文件内容。</li>\n<li>Tree 对象：储存目录数据。</li>\n</ul>\n<p>2、提交图：<code>git log --graph</code></p>\n<p>3、Git 主要有两个层面构成：</p>\n<ul>\n<li>瓷质命令（porcelain command）</li>\n<li>管道（plumbing）</li>\n</ul>\n<p>4、快速合并：</p>\n<ul>\n<li>有两个分支 a 和 b。其中 b 并未对内容做任何修改。所以合并 ab的时候，实际就是将指针指向了a    。</li>\n<li>非快进操作：<code>--no-ff</code>：强制产生一次新的提交</li>\n</ul>\n<p>a —— b —— c ——d \\</p>\n<p>​             \\ ——————e</p>\n<p>创建并切换新分支<code>git checkout -b newbranch</code></p>\n<p>强制切换新分支<code>git checkout --force newbranch</code> </p>\n<p>删除分支 <code>git branch -d nowbranch</code></p>\n<p>强制删除当前分支 <code>git branch -D nowbranch</code> </p>\n<h2 id=\"二、储藏\"><a href=\"#二、储藏\" class=\"headerlink\" title=\"二、储藏\"></a>二、储藏</h2><p>希望在不提交的情况下修改当前版本的其他内容</p>\n<h3 id=\"1、git-stash\"><a href=\"#1、git-stash\" class=\"headerlink\" title=\"1、git stash\"></a>1、git stash</h3><p>git shash 可以将工作区和暂存区中修改 保存在<strong>*储藏栈（stash stack）</strong></p>\n<h3 id=\"2、git-shash-pop\"><a href=\"#2、git-shash-pop\" class=\"headerlink\" title=\"2、git shash pop\"></a>2、git shash pop</h3><p>回复栈顶的被储存修改到<em>工作区</em>中</p>\n<h3 id=\"3、git-shash-list\"><a href=\"#3、git-shash-list\" class=\"headerlink\" title=\"3、git shash list\"></a>3、git shash list</h3><p>查看储藏的修改内容</p>\n<h2 id=\"三、\"><a href=\"#三、\" class=\"headerlink\" title=\"三、\"></a>三、</h2><p>push</p>\n<p>pull</p>\n<p>merge</p>\n<p>fetch</p>\n"},{"title":"股票术语","date":"2018-01-18T15:34:23.000Z","thumbnail":"https://i0.hdslb.com/bfs/drawyoo/9e9287e1e69f8489cbb9031afb090e1bc893311e.jpg","_content":"\n股票术语\n\n1、市盈率（P/E ratio）\n\n市盈率 = （当前每股市场价格）÷ （每股税后利润）\n\n动态市盈率：还没有真正实现的下一年度预测利润的市盈率。\n\n\n\n<!-- more -->\n\n\n\n2、市净率：\n\n市净率 = （每股市价 P）÷ （每股净资产 Book Value）\n\n股票净值主要包括公司资本金、资本公积金、法定公积金、任意公积金、为分配盈余等项目的合计，它代表全体股东共同享有的权益，也称净资产。\n\n\n\n3、[公积金](https://baike.baidu.com/item/%E5%85%AC%E7%A7%AF%E9%87%91/1329924?fr=aladdin):公积金分为住房公积金和公司公积金，上文特指公司公积金\n\n","source":"_posts/股票投资/股票术语.md","raw":"---\ntitle: 股票术语\ndate: 2018-01-18 23:34:23\ntags: \ncategories: 股票投资\nthumbnail: https://i0.hdslb.com/bfs/drawyoo/9e9287e1e69f8489cbb9031afb090e1bc893311e.jpg\n---\n\n股票术语\n\n1、市盈率（P/E ratio）\n\n市盈率 = （当前每股市场价格）÷ （每股税后利润）\n\n动态市盈率：还没有真正实现的下一年度预测利润的市盈率。\n\n\n\n<!-- more -->\n\n\n\n2、市净率：\n\n市净率 = （每股市价 P）÷ （每股净资产 Book Value）\n\n股票净值主要包括公司资本金、资本公积金、法定公积金、任意公积金、为分配盈余等项目的合计，它代表全体股东共同享有的权益，也称净资产。\n\n\n\n3、[公积金](https://baike.baidu.com/item/%E5%85%AC%E7%A7%AF%E9%87%91/1329924?fr=aladdin):公积金分为住房公积金和公司公积金，上文特指公司公积金\n\n","slug":"股票投资/股票术语","published":1,"updated":"2018-04-12T08:59:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkubt0006074m8z1c2pzv","content":"<p>股票术语</p>\n<p>1、市盈率（P/E ratio）</p>\n<p>市盈率 = （当前每股市场价格）÷ （每股税后利润）</p>\n<p>动态市盈率：还没有真正实现的下一年度预测利润的市盈率。</p>\n<a id=\"more\"></a>\n<p>2、市净率：</p>\n<p>市净率 = （每股市价 P）÷ （每股净资产 Book Value）</p>\n<p>股票净值主要包括公司资本金、资本公积金、法定公积金、任意公积金、为分配盈余等项目的合计，它代表全体股东共同享有的权益，也称净资产。</p>\n<p>3、<a href=\"https://baike.baidu.com/item/%E5%85%AC%E7%A7%AF%E9%87%91/1329924?fr=aladdin\" target=\"_blank\" rel=\"noopener\">公积金</a>:公积金分为住房公积金和公司公积金，上文特指公司公积金</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"<p>股票术语</p>\n<p>1、市盈率（P/E ratio）</p>\n<p>市盈率 = （当前每股市场价格）÷ （每股税后利润）</p>\n<p>动态市盈率：还没有真正实现的下一年度预测利润的市盈率。</p>","more":"<p>2、市净率：</p>\n<p>市净率 = （每股市价 P）÷ （每股净资产 Book Value）</p>\n<p>股票净值主要包括公司资本金、资本公积金、法定公积金、任意公积金、为分配盈余等项目的合计，它代表全体股东共同享有的权益，也称净资产。</p>\n<p>3、<a href=\"https://baike.baidu.com/item/%E5%85%AC%E7%A7%AF%E9%87%91/1329924?fr=aladdin\" target=\"_blank\" rel=\"noopener\">公积金</a>:公积金分为住房公积金和公司公积金，上文特指公司公积金</p>"},{"title":"Http - Web 基础概述","date":"2013-05-13T08:58:34.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515845822875&di=5c5ed7e816115333fa10af3a5d2e12dd&imgtype=0&src=http%3A%2F%2Fattach.bbs.miui.com%2Fforum%2F201708%2F02%2F162015g8shss8wbwb8w193.jpg","_content":"\n[TOC]\n\n# 一、HTTP报文\n\n![](https://images0.cnblogs.com/blog2015/776887/201507/241034588189239.png)\n\nHttp 报文分为请求报文（request）和响应报文（response），主要分三部分：\n\n- ## 1、起始行\n\n  - 请求行：**包含了一个方法和 URL（路径） 以及 HTTP 版本**\n\n  - 响应行：包含了 HTTP 版本，状态码和原因短语\n\n  - 方法：\n\n    > 分为常用的7种 HTTP 方法和对 HTTP 规范的扩展方法。\n\n  - 状态码：\n\n    > 状态码位于响应的起始行中；\n    >\n    > 状态码数在每条响应报文的起始行中返回的；\n\n  - 原因短语：\n\n    > 通常与状态码成对出现，如200 OK（描述操作状态的、文本的形式的原因短语）\n\n  - 版本号：\n\n    > **注意，版本号不会被当做小数处理，2.22要比2.3要大** \n\n- ## 2、首部（请求头、响应头、head）\n\n  - 通用首部\n  - 请求首部\n    - Accept 首部\n    - 条件请求首部\n    - 安全请求首部\n    - 代理请求首部\n  - 响应首部\n    - 协商首部\n    - 安全响应首部\n  - 实体首部\n    - 内容首部（Content）\n    - 实体缓存首部\n\n- ## 3、主体（请求体、响应体、body）\n\n![响应报文首部](响应报文首部.png)\n\n#二、URL \n\n##1、URL 语法\n\n<scheme>://<user>:<password>@<host>:<port>/<path>;<params1>;<params2>?<query>&<query2>#<flag>\n\n方案://用户名:密码@主机:端口/路径;参数1;参数2？查询字符串#片段\n\n> URI方案：http（80）、ftp（21）、https（443）、mailto、rtsp、rtmp（1935）、file、telnet（23）、ssh（22），以上为常用的，远不止这些\n\n> rtsp：Real Time Streaming Protocol：实时流传输协议\n>\n> rtmp：Real Time Message Protocol ：实时信息传输协议\n\n## 2、一些常见的概念\n\n### （1） URI \n\nURI（统一资源标识符）\n\n* URL（统一资源定位符）\n* URN（统一资源名）\n\n### （1）RFC\n\n​         Request For Comments（RFC），是一系列以编号排定的文件。说白了就是 Internet标准定制文件。\n\n​        一个RFC文件在成为官方标准前一般至少要经历4个阶段【RFC2026】：因特网草案、建议标准、草案标准、因特网标准。\n\n### （3）事物\n\n一个 HTTP 事物有一条请求命令和一条响应结果组成。\n\n事物 = 请求 + 响应\n\n### （4）TCP\n\nTCP：传输控制协议，是把东西从一个地方传到另一个地方用的。***转发 HTTP 报文***。\n\nTCP 客户端与服务器是通过套接字（socket）通信的。\n\nHTTP 是**应用**层的，TCP 是**传输**层的。一个侧重应用，一个侧重传输。\n\n作用：\n\n* 无差错的数据传输\n* 按序传输（数据总是按照发送的顺序到达目的地）\n* 未分段的数据流（可以在任意时刻以任意尺寸发送数据）（尺寸就是 Content-Length）\n\n### （5）隧道（tunnel）\n\n定义：对 HTTP 报文进行**盲转**发的特殊代理。（ 之所以敢盲转还是不因为加了一层 SSL）\n\n### （6）SSL\n\nSSL（安全套接字层，）在 HTTPS 网络协议栈同 TSL 一样，属于安全层\n\n![](https://upload-images.jianshu.io/upload_images/3588755-cca8c7cf776db6ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/644)\n\n### （7）代理与 Agent 代理\n\n这俩货其实不一样，前者指 proxy，用于在客户端和服务器之间转发流量；\n\n后者是代表用户发起 HTTP 请求的客户端程序。（就是 web 机器人、爬虫）。\n\n### （8）报文流\n\n不管报文是从客户端流入服务器，还是从服务器流入客户端，所有的报文都是像河水一样，**下游**流动。\n\nHTTP 使用流入和流出描述***事务处理***的方向。\n\n客服端\\\n\n​           服务器\n\n客户端/\n\n# 三、连接管理\n\n###1、OSI 七层协议和 TCP/IP 五层网络协议\n\n总结为一句话：应表会、传网数物（五层协议中应表会为一层）。\n\n###2、TCP 协议中的三次握手\n\n总结为一句话：“船~来~了！船~来~了~吗？船~来~了。”之后服务器把船开往客服端。\n\n![](http://img.blog.csdn.net/20170104214009596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2h1c2xlaQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n### 3、TCP 慢启动（slow shtar）\n\nTCP 会通过时间进行自我调谐。开始会限制连接的最大速度，如果数据传输成功，再慢慢提速。这种调谐被称为 TCP 慢启动。\n\n>  新建了一座桥。汽车为了试试这个桥能不能走，先慢慢开过去，如果发现没问题，其他汽车再提速过去。\n\n\n\n在提速的过程中，有个概念叫***打开拥塞窗口***。\n\n> 有一个车队要过一座桥。一开始先派一辆车过去，确认没事的话派两个车试试，如果还没事的话派四辆车过去，这个过程就叫打开拥塞窗口。","source":"_posts/HTTP/Http报文详解.md","raw":"---\ntitle: Http - Web 基础概述\ndate: 2013-05-13 16:58:34\ntags: \n- Http 报文\n- URL\ncategories: Http\nthumbnail: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515845822875&di=5c5ed7e816115333fa10af3a5d2e12dd&imgtype=0&src=http%3A%2F%2Fattach.bbs.miui.com%2Fforum%2F201708%2F02%2F162015g8shss8wbwb8w193.jpg\"\n---\n\n[TOC]\n\n# 一、HTTP报文\n\n![](https://images0.cnblogs.com/blog2015/776887/201507/241034588189239.png)\n\nHttp 报文分为请求报文（request）和响应报文（response），主要分三部分：\n\n- ## 1、起始行\n\n  - 请求行：**包含了一个方法和 URL（路径） 以及 HTTP 版本**\n\n  - 响应行：包含了 HTTP 版本，状态码和原因短语\n\n  - 方法：\n\n    > 分为常用的7种 HTTP 方法和对 HTTP 规范的扩展方法。\n\n  - 状态码：\n\n    > 状态码位于响应的起始行中；\n    >\n    > 状态码数在每条响应报文的起始行中返回的；\n\n  - 原因短语：\n\n    > 通常与状态码成对出现，如200 OK（描述操作状态的、文本的形式的原因短语）\n\n  - 版本号：\n\n    > **注意，版本号不会被当做小数处理，2.22要比2.3要大** \n\n- ## 2、首部（请求头、响应头、head）\n\n  - 通用首部\n  - 请求首部\n    - Accept 首部\n    - 条件请求首部\n    - 安全请求首部\n    - 代理请求首部\n  - 响应首部\n    - 协商首部\n    - 安全响应首部\n  - 实体首部\n    - 内容首部（Content）\n    - 实体缓存首部\n\n- ## 3、主体（请求体、响应体、body）\n\n![响应报文首部](响应报文首部.png)\n\n#二、URL \n\n##1、URL 语法\n\n<scheme>://<user>:<password>@<host>:<port>/<path>;<params1>;<params2>?<query>&<query2>#<flag>\n\n方案://用户名:密码@主机:端口/路径;参数1;参数2？查询字符串#片段\n\n> URI方案：http（80）、ftp（21）、https（443）、mailto、rtsp、rtmp（1935）、file、telnet（23）、ssh（22），以上为常用的，远不止这些\n\n> rtsp：Real Time Streaming Protocol：实时流传输协议\n>\n> rtmp：Real Time Message Protocol ：实时信息传输协议\n\n## 2、一些常见的概念\n\n### （1） URI \n\nURI（统一资源标识符）\n\n* URL（统一资源定位符）\n* URN（统一资源名）\n\n### （1）RFC\n\n​         Request For Comments（RFC），是一系列以编号排定的文件。说白了就是 Internet标准定制文件。\n\n​        一个RFC文件在成为官方标准前一般至少要经历4个阶段【RFC2026】：因特网草案、建议标准、草案标准、因特网标准。\n\n### （3）事物\n\n一个 HTTP 事物有一条请求命令和一条响应结果组成。\n\n事物 = 请求 + 响应\n\n### （4）TCP\n\nTCP：传输控制协议，是把东西从一个地方传到另一个地方用的。***转发 HTTP 报文***。\n\nTCP 客户端与服务器是通过套接字（socket）通信的。\n\nHTTP 是**应用**层的，TCP 是**传输**层的。一个侧重应用，一个侧重传输。\n\n作用：\n\n* 无差错的数据传输\n* 按序传输（数据总是按照发送的顺序到达目的地）\n* 未分段的数据流（可以在任意时刻以任意尺寸发送数据）（尺寸就是 Content-Length）\n\n### （5）隧道（tunnel）\n\n定义：对 HTTP 报文进行**盲转**发的特殊代理。（ 之所以敢盲转还是不因为加了一层 SSL）\n\n### （6）SSL\n\nSSL（安全套接字层，）在 HTTPS 网络协议栈同 TSL 一样，属于安全层\n\n![](https://upload-images.jianshu.io/upload_images/3588755-cca8c7cf776db6ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/644)\n\n### （7）代理与 Agent 代理\n\n这俩货其实不一样，前者指 proxy，用于在客户端和服务器之间转发流量；\n\n后者是代表用户发起 HTTP 请求的客户端程序。（就是 web 机器人、爬虫）。\n\n### （8）报文流\n\n不管报文是从客户端流入服务器，还是从服务器流入客户端，所有的报文都是像河水一样，**下游**流动。\n\nHTTP 使用流入和流出描述***事务处理***的方向。\n\n客服端\\\n\n​           服务器\n\n客户端/\n\n# 三、连接管理\n\n###1、OSI 七层协议和 TCP/IP 五层网络协议\n\n总结为一句话：应表会、传网数物（五层协议中应表会为一层）。\n\n###2、TCP 协议中的三次握手\n\n总结为一句话：“船~来~了！船~来~了~吗？船~来~了。”之后服务器把船开往客服端。\n\n![](http://img.blog.csdn.net/20170104214009596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2h1c2xlaQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n### 3、TCP 慢启动（slow shtar）\n\nTCP 会通过时间进行自我调谐。开始会限制连接的最大速度，如果数据传输成功，再慢慢提速。这种调谐被称为 TCP 慢启动。\n\n>  新建了一座桥。汽车为了试试这个桥能不能走，先慢慢开过去，如果发现没问题，其他汽车再提速过去。\n\n\n\n在提速的过程中，有个概念叫***打开拥塞窗口***。\n\n> 有一个车队要过一座桥。一开始先派一辆车过去，确认没事的话派两个车试试，如果还没事的话派四辆车过去，这个过程就叫打开拥塞窗口。","slug":"HTTP/Http报文详解","published":1,"updated":"2018-01-31T08:45:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkuby0009074mrig5fc9q","content":"<p>[TOC]</p>\n<h1 id=\"一、HTTP报文\"><a href=\"#一、HTTP报文\" class=\"headerlink\" title=\"一、HTTP报文\"></a>一、HTTP报文</h1><p><img src=\"https://images0.cnblogs.com/blog2015/776887/201507/241034588189239.png\" alt=\"\"></p>\n<p>Http 报文分为请求报文（request）和响应报文（response），主要分三部分：</p>\n<ul>\n<li><h2 id=\"1、起始行\"><a href=\"#1、起始行\" class=\"headerlink\" title=\"1、起始行\"></a>1、起始行</h2><ul>\n<li><p>请求行：<strong>包含了一个方法和 URL（路径） 以及 HTTP 版本</strong></p>\n</li>\n<li><p>响应行：包含了 HTTP 版本，状态码和原因短语</p>\n</li>\n<li><p>方法：</p>\n<blockquote>\n<p>分为常用的7种 HTTP 方法和对 HTTP 规范的扩展方法。</p>\n</blockquote>\n</li>\n<li><p>状态码：</p>\n<blockquote>\n<p>状态码位于响应的起始行中；</p>\n<p>状态码数在每条响应报文的起始行中返回的；</p>\n</blockquote>\n</li>\n<li><p>原因短语：</p>\n<blockquote>\n<p>通常与状态码成对出现，如200 OK（描述操作状态的、文本的形式的原因短语）</p>\n</blockquote>\n</li>\n<li><p>版本号：</p>\n<blockquote>\n<p><strong>注意，版本号不会被当做小数处理，2.22要比2.3要大</strong> </p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><h2 id=\"2、首部（请求头、响应头、head）\"><a href=\"#2、首部（请求头、响应头、head）\" class=\"headerlink\" title=\"2、首部（请求头、响应头、head）\"></a>2、首部（请求头、响应头、head）</h2><ul>\n<li>通用首部</li>\n<li>请求首部<ul>\n<li>Accept 首部</li>\n<li>条件请求首部</li>\n<li>安全请求首部</li>\n<li>代理请求首部</li>\n</ul>\n</li>\n<li>响应首部<ul>\n<li>协商首部</li>\n<li>安全响应首部</li>\n</ul>\n</li>\n<li>实体首部<ul>\n<li>内容首部（Content）</li>\n<li>实体缓存首部</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"3、主体（请求体、响应体、body）\"><a href=\"#3、主体（请求体、响应体、body）\" class=\"headerlink\" title=\"3、主体（请求体、响应体、body）\"></a>3、主体（请求体、响应体、body）</h2></li>\n</ul>\n<p><img src=\"响应报文首部.png\" alt=\"响应报文首部\"></p>\n<p>#二、URL </p>\n<p>##1、URL 语法</p>\n<p><scheme>://<user>:<password>@<host>:<port>/<path></path>;<params1>;<params2>?<query>&amp;<query2>#<flag></flag></query2></query></params2></params1></port></host></password></user></scheme></p>\n<p>方案://用户名:密码@主机:端口/路径;参数1;参数2？查询字符串#片段</p>\n<blockquote>\n<p>URI方案：http（80）、ftp（21）、https（443）、mailto、rtsp、rtmp（1935）、file、telnet（23）、ssh（22），以上为常用的，远不止这些</p>\n<p>rtsp：Real Time Streaming Protocol：实时流传输协议</p>\n<p>rtmp：Real Time Message Protocol ：实时信息传输协议</p>\n</blockquote>\n<h2 id=\"2、一些常见的概念\"><a href=\"#2、一些常见的概念\" class=\"headerlink\" title=\"2、一些常见的概念\"></a>2、一些常见的概念</h2><h3 id=\"（1）-URI\"><a href=\"#（1）-URI\" class=\"headerlink\" title=\"（1） URI\"></a>（1） URI</h3><p>URI（统一资源标识符）</p>\n<ul>\n<li>URL（统一资源定位符）</li>\n<li>URN（统一资源名）</li>\n</ul>\n<h3 id=\"（1）RFC\"><a href=\"#（1）RFC\" class=\"headerlink\" title=\"（1）RFC\"></a>（1）RFC</h3><p>​         Request For Comments（RFC），是一系列以编号排定的文件。说白了就是 Internet标准定制文件。</p>\n<p>​        一个RFC文件在成为官方标准前一般至少要经历4个阶段【RFC2026】：因特网草案、建议标准、草案标准、因特网标准。</p>\n<h3 id=\"（3）事物\"><a href=\"#（3）事物\" class=\"headerlink\" title=\"（3）事物\"></a>（3）事物</h3><p>一个 HTTP 事物有一条请求命令和一条响应结果组成。</p>\n<p>事物 = 请求 + 响应</p>\n<h3 id=\"（4）TCP\"><a href=\"#（4）TCP\" class=\"headerlink\" title=\"（4）TCP\"></a>（4）TCP</h3><p>TCP：传输控制协议，是把东西从一个地方传到另一个地方用的。<strong><em>转发 HTTP 报文</em></strong>。</p>\n<p>TCP 客户端与服务器是通过套接字（socket）通信的。</p>\n<p>HTTP 是<strong>应用</strong>层的，TCP 是<strong>传输</strong>层的。一个侧重应用，一个侧重传输。</p>\n<p>作用：</p>\n<ul>\n<li>无差错的数据传输</li>\n<li>按序传输（数据总是按照发送的顺序到达目的地）</li>\n<li>未分段的数据流（可以在任意时刻以任意尺寸发送数据）（尺寸就是 Content-Length）</li>\n</ul>\n<h3 id=\"（5）隧道（tunnel）\"><a href=\"#（5）隧道（tunnel）\" class=\"headerlink\" title=\"（5）隧道（tunnel）\"></a>（5）隧道（tunnel）</h3><p>定义：对 HTTP 报文进行<strong>盲转</strong>发的特殊代理。（ 之所以敢盲转还是不因为加了一层 SSL）</p>\n<h3 id=\"（6）SSL\"><a href=\"#（6）SSL\" class=\"headerlink\" title=\"（6）SSL\"></a>（6）SSL</h3><p>SSL（安全套接字层，）在 HTTPS 网络协议栈同 TSL 一样，属于安全层</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3588755-cca8c7cf776db6ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/644\" alt=\"\"></p>\n<h3 id=\"（7）代理与-Agent-代理\"><a href=\"#（7）代理与-Agent-代理\" class=\"headerlink\" title=\"（7）代理与 Agent 代理\"></a>（7）代理与 Agent 代理</h3><p>这俩货其实不一样，前者指 proxy，用于在客户端和服务器之间转发流量；</p>\n<p>后者是代表用户发起 HTTP 请求的客户端程序。（就是 web 机器人、爬虫）。</p>\n<h3 id=\"（8）报文流\"><a href=\"#（8）报文流\" class=\"headerlink\" title=\"（8）报文流\"></a>（8）报文流</h3><p>不管报文是从客户端流入服务器，还是从服务器流入客户端，所有的报文都是像河水一样，<strong>下游</strong>流动。</p>\n<p>HTTP 使用流入和流出描述<strong><em>事务处理</em></strong>的方向。</p>\n<p>客服端\\</p>\n<p>​           服务器</p>\n<p>客户端/</p>\n<h1 id=\"三、连接管理\"><a href=\"#三、连接管理\" class=\"headerlink\" title=\"三、连接管理\"></a>三、连接管理</h1><p>###1、OSI 七层协议和 TCP/IP 五层网络协议</p>\n<p>总结为一句话：应表会、传网数物（五层协议中应表会为一层）。</p>\n<p>###2、TCP 协议中的三次握手</p>\n<p>总结为一句话：“船~来~了！船~来~了~吗？船~来~了。”之后服务器把船开往客服端。</p>\n<p><img src=\"http://img.blog.csdn.net/20170104214009596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2h1c2xlaQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h3 id=\"3、TCP-慢启动（slow-shtar）\"><a href=\"#3、TCP-慢启动（slow-shtar）\" class=\"headerlink\" title=\"3、TCP 慢启动（slow shtar）\"></a>3、TCP 慢启动（slow shtar）</h3><p>TCP 会通过时间进行自我调谐。开始会限制连接的最大速度，如果数据传输成功，再慢慢提速。这种调谐被称为 TCP 慢启动。</p>\n<blockquote>\n<p> 新建了一座桥。汽车为了试试这个桥能不能走，先慢慢开过去，如果发现没问题，其他汽车再提速过去。</p>\n</blockquote>\n<p>在提速的过程中，有个概念叫<strong><em>打开拥塞窗口</em></strong>。</p>\n<blockquote>\n<p>有一个车队要过一座桥。一开始先派一辆车过去，确认没事的话派两个车试试，如果还没事的话派四辆车过去，这个过程就叫打开拥塞窗口。</p>\n</blockquote>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"一、HTTP报文\"><a href=\"#一、HTTP报文\" class=\"headerlink\" title=\"一、HTTP报文\"></a>一、HTTP报文</h1><p><img src=\"https://images0.cnblogs.com/blog2015/776887/201507/241034588189239.png\" alt=\"\"></p>\n<p>Http 报文分为请求报文（request）和响应报文（response），主要分三部分：</p>\n<ul>\n<li><h2 id=\"1、起始行\"><a href=\"#1、起始行\" class=\"headerlink\" title=\"1、起始行\"></a>1、起始行</h2><ul>\n<li><p>请求行：<strong>包含了一个方法和 URL（路径） 以及 HTTP 版本</strong></p>\n</li>\n<li><p>响应行：包含了 HTTP 版本，状态码和原因短语</p>\n</li>\n<li><p>方法：</p>\n<blockquote>\n<p>分为常用的7种 HTTP 方法和对 HTTP 规范的扩展方法。</p>\n</blockquote>\n</li>\n<li><p>状态码：</p>\n<blockquote>\n<p>状态码位于响应的起始行中；</p>\n<p>状态码数在每条响应报文的起始行中返回的；</p>\n</blockquote>\n</li>\n<li><p>原因短语：</p>\n<blockquote>\n<p>通常与状态码成对出现，如200 OK（描述操作状态的、文本的形式的原因短语）</p>\n</blockquote>\n</li>\n<li><p>版本号：</p>\n<blockquote>\n<p><strong>注意，版本号不会被当做小数处理，2.22要比2.3要大</strong> </p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><h2 id=\"2、首部（请求头、响应头、head）\"><a href=\"#2、首部（请求头、响应头、head）\" class=\"headerlink\" title=\"2、首部（请求头、响应头、head）\"></a>2、首部（请求头、响应头、head）</h2><ul>\n<li>通用首部</li>\n<li>请求首部<ul>\n<li>Accept 首部</li>\n<li>条件请求首部</li>\n<li>安全请求首部</li>\n<li>代理请求首部</li>\n</ul>\n</li>\n<li>响应首部<ul>\n<li>协商首部</li>\n<li>安全响应首部</li>\n</ul>\n</li>\n<li>实体首部<ul>\n<li>内容首部（Content）</li>\n<li>实体缓存首部</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"3、主体（请求体、响应体、body）\"><a href=\"#3、主体（请求体、响应体、body）\" class=\"headerlink\" title=\"3、主体（请求体、响应体、body）\"></a>3、主体（请求体、响应体、body）</h2></li>\n</ul>\n<p><img src=\"响应报文首部.png\" alt=\"响应报文首部\"></p>\n<p>#二、URL </p>\n<p>##1、URL 语法</p>\n<p><scheme>://<user>:<password>@<host>:<port>/<path></path>;<params1>;<params2>?<query>&amp;<query2>#<flag></flag></query2></query></params2></params1></port></host></password></user></scheme></p>\n<p>方案://用户名:密码@主机:端口/路径;参数1;参数2？查询字符串#片段</p>\n<blockquote>\n<p>URI方案：http（80）、ftp（21）、https（443）、mailto、rtsp、rtmp（1935）、file、telnet（23）、ssh（22），以上为常用的，远不止这些</p>\n<p>rtsp：Real Time Streaming Protocol：实时流传输协议</p>\n<p>rtmp：Real Time Message Protocol ：实时信息传输协议</p>\n</blockquote>\n<h2 id=\"2、一些常见的概念\"><a href=\"#2、一些常见的概念\" class=\"headerlink\" title=\"2、一些常见的概念\"></a>2、一些常见的概念</h2><h3 id=\"（1）-URI\"><a href=\"#（1）-URI\" class=\"headerlink\" title=\"（1） URI\"></a>（1） URI</h3><p>URI（统一资源标识符）</p>\n<ul>\n<li>URL（统一资源定位符）</li>\n<li>URN（统一资源名）</li>\n</ul>\n<h3 id=\"（1）RFC\"><a href=\"#（1）RFC\" class=\"headerlink\" title=\"（1）RFC\"></a>（1）RFC</h3><p>​         Request For Comments（RFC），是一系列以编号排定的文件。说白了就是 Internet标准定制文件。</p>\n<p>​        一个RFC文件在成为官方标准前一般至少要经历4个阶段【RFC2026】：因特网草案、建议标准、草案标准、因特网标准。</p>\n<h3 id=\"（3）事物\"><a href=\"#（3）事物\" class=\"headerlink\" title=\"（3）事物\"></a>（3）事物</h3><p>一个 HTTP 事物有一条请求命令和一条响应结果组成。</p>\n<p>事物 = 请求 + 响应</p>\n<h3 id=\"（4）TCP\"><a href=\"#（4）TCP\" class=\"headerlink\" title=\"（4）TCP\"></a>（4）TCP</h3><p>TCP：传输控制协议，是把东西从一个地方传到另一个地方用的。<strong><em>转发 HTTP 报文</em></strong>。</p>\n<p>TCP 客户端与服务器是通过套接字（socket）通信的。</p>\n<p>HTTP 是<strong>应用</strong>层的，TCP 是<strong>传输</strong>层的。一个侧重应用，一个侧重传输。</p>\n<p>作用：</p>\n<ul>\n<li>无差错的数据传输</li>\n<li>按序传输（数据总是按照发送的顺序到达目的地）</li>\n<li>未分段的数据流（可以在任意时刻以任意尺寸发送数据）（尺寸就是 Content-Length）</li>\n</ul>\n<h3 id=\"（5）隧道（tunnel）\"><a href=\"#（5）隧道（tunnel）\" class=\"headerlink\" title=\"（5）隧道（tunnel）\"></a>（5）隧道（tunnel）</h3><p>定义：对 HTTP 报文进行<strong>盲转</strong>发的特殊代理。（ 之所以敢盲转还是不因为加了一层 SSL）</p>\n<h3 id=\"（6）SSL\"><a href=\"#（6）SSL\" class=\"headerlink\" title=\"（6）SSL\"></a>（6）SSL</h3><p>SSL（安全套接字层，）在 HTTPS 网络协议栈同 TSL 一样，属于安全层</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3588755-cca8c7cf776db6ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/644\" alt=\"\"></p>\n<h3 id=\"（7）代理与-Agent-代理\"><a href=\"#（7）代理与-Agent-代理\" class=\"headerlink\" title=\"（7）代理与 Agent 代理\"></a>（7）代理与 Agent 代理</h3><p>这俩货其实不一样，前者指 proxy，用于在客户端和服务器之间转发流量；</p>\n<p>后者是代表用户发起 HTTP 请求的客户端程序。（就是 web 机器人、爬虫）。</p>\n<h3 id=\"（8）报文流\"><a href=\"#（8）报文流\" class=\"headerlink\" title=\"（8）报文流\"></a>（8）报文流</h3><p>不管报文是从客户端流入服务器，还是从服务器流入客户端，所有的报文都是像河水一样，<strong>下游</strong>流动。</p>\n<p>HTTP 使用流入和流出描述<strong><em>事务处理</em></strong>的方向。</p>\n<p>客服端\\</p>\n<p>​           服务器</p>\n<p>客户端/</p>\n<h1 id=\"三、连接管理\"><a href=\"#三、连接管理\" class=\"headerlink\" title=\"三、连接管理\"></a>三、连接管理</h1><p>###1、OSI 七层协议和 TCP/IP 五层网络协议</p>\n<p>总结为一句话：应表会、传网数物（五层协议中应表会为一层）。</p>\n<p>###2、TCP 协议中的三次握手</p>\n<p>总结为一句话：“船~来~了！船~来~了~吗？船~来~了。”之后服务器把船开往客服端。</p>\n<p><img src=\"http://img.blog.csdn.net/20170104214009596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2h1c2xlaQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h3 id=\"3、TCP-慢启动（slow-shtar）\"><a href=\"#3、TCP-慢启动（slow-shtar）\" class=\"headerlink\" title=\"3、TCP 慢启动（slow shtar）\"></a>3、TCP 慢启动（slow shtar）</h3><p>TCP 会通过时间进行自我调谐。开始会限制连接的最大速度，如果数据传输成功，再慢慢提速。这种调谐被称为 TCP 慢启动。</p>\n<blockquote>\n<p> 新建了一座桥。汽车为了试试这个桥能不能走，先慢慢开过去，如果发现没问题，其他汽车再提速过去。</p>\n</blockquote>\n<p>在提速的过程中，有个概念叫<strong><em>打开拥塞窗口</em></strong>。</p>\n<blockquote>\n<p>有一个车队要过一座桥。一开始先派一辆车过去，确认没事的话派两个车试试，如果还没事的话派四辆车过去，这个过程就叫打开拥塞窗口。</p>\n</blockquote>\n"},{"title":"cUrl使用心得","date":"2013-01-13T06:32:40.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1516119417386&di=f9810c82af31ee64a32e2e4ca05c91bb&imgtype=0&src=http%3A%2F%2Fwww.wmpic.me%2Fwp-content%2Fuploads%2F2014%2F03%2F20140325103402919.jpg","_content":"\n# 一、常用参数\n\n```shell\n# -i：include全部HTTP报文\n# -v：显示请求过程\n# -d：HTTP POST DATA \n# -X：自定义请求方法。如-X POST\n# -H：自定义请求头 如 -H \"Content-type: application/json\"\n# -G： --get  Send the -d data with a HTTP GET (H)\n# -o：输出\n# -s：静音模式，不输出任何东西\n# -S, --show-error    Show error. With -s, make curl show errors when they occur\n# -f, --fail         连接失败时不显示http错误 (H)\n\n# 调试的话暂时用到这么多，其他的命令想到在更。这种东西可以直接看英文文档。\n```\n\n\n\n# 二、get 请求\n\n```shell\n# 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地\ncurl \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"  \n\n# 显示全部信息:包括起始行、响应头、响应体\n# -i: --include       Include protocol headers in the output (H/F)\ncurl -i \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"\n\n# 显示get请求全过程解析 *表示解析过程  >表示请求 <表示响应 \n# -v: --verbose 冗长的\ncurl -v \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\" #--verbose \n```\n\n\n\n# 三、post请求\n\n```shell\n#  -d: --data DATA     HTTP POST data (H)\ncurl -d \"param1=value1&param2=value2\" \"http://www.baidu.com\"\n```\n\n\n\n# 四、JSON 格式的 post 请求\n\n```shell\n# -H: --header LINE   Pass custom header LINE to server (H)\n# -X: --request COMMAND  Specify request command to use\n# -d: --data DATA     HTTP POST data (H)\ncurl -l -H \"Content-type: application/json\" -X POST -d '{\"phone\":\"13521389587\",\"password\":\"test\"}' http://domain/apis/users.json\n```\n\n\n\n# 五、实例\n\n```\nURL ：http://7xssni.com1.z0.glb.clouddn.com/home.txt\n```\n\n```\n{\n  \"headUrl\" : {\n    \"headList\" : [\n      \"http://7xssni.com1.z0.glb.clouddn.com/home1.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home2.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home3.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home4.jpg\"\n    ]\n  },\n  \"homeUrl\" : {\n    \"dataList\" : [\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/1.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"PVC实体塑木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/2.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"3D印花地毯\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/3.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"金刚木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/4.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典菱形软包\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/5.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典防水木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/6.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典花纹墙纸\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/7.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典使用木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/8.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"非洲柚木地板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      }\n    ]\n  }\n}\n```\n\n\n\n\n\n## 五、常用命令：\n\n```\n -a, --append        Append to target file when uploading (F/SFTP)\n -E, --cert CERT[:PASSWD]  Client certificate file and password (SSL)\n -K, --config FILE   Read config from FILE\n -C, --continue-at OFFSET  Resumed transfer OFFSET\n -b, --cookie STRING/FILE  Read cookies from STRING/FILE (H)\n -c, --cookie-jar FILE  Write cookies to FILE after operation (H)\n -d, --data DATA     HTTP POST data (H)\n -D, --dump-header FILE  Write the received headers to FILE\n -f, --fail          Fail silently (no output at all) on HTTP errors (H)\n -F, --form CONTENT  Specify HTTP multipart POST data (H)\n -P, --ftp-port ADR  Use PORT with given address instead of PASV (F)\n -G, --get           Send the -d data with a HTTP GET (H)\n -g, --globoff       Disable URL sequences and ranges using {} and []\n -H, --header LINE   Pass custom header LINE to server (H)\n -I, --head          Show document info only\n -h, --help          This help text\n -i, --include       Include protocol headers in the output (H/F)\n -k, --insecure      Allow connections to SSL sites without certs (H)\n -j, --junk-session-cookies  Ignore session cookies read from file (H)\n -l, --list-only     List only mode (F/POP3)\n -L, --location      Follow redirects (H)\n -M, --manual        Display the full manual\n -m, --max-time SECONDS  Maximum time allowed for the transfer\n -n, --netrc         Must read .netrc for user name and password\n -N, --no-buffer     Disable buffering of the output stream\n -o, --output FILE   Write to FILE instead of stdout\n -U, --proxy-user USER[:PASSWORD]  Proxy user and password\n     --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port\n -p, --proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)\n     --pubkey KEY    Public key file name (SSH)\n -Q, --quote CMD     Send command(s) to server before transfer (F/SFTP)\n     --random-file FILE  File for reading random data from (SSL)\n -r, --range RANGE   Retrieve only the bytes within RANGE\n     --raw           Do HTTP \"raw\"; no transfer decoding (H)\n -e, --referer       Referer URL (H)\n -J, --remote-header-name  Use the header-provided filename (H)\n -O, --remote-name   Write output to a file named as the remote file\n     --remote-name-all  Use the remote file name for all URLs\n -R, --remote-time   Set the remote file's time on the local output\n -X, --request COMMAND  Specify request command to use\n -S, --show-error    Show error. With -s, make curl show errors when they occur\n -s, --silent        Silent mode (don't output anything)\n -Y, --speed-limit RATE  Stop transfers below RATE for 'speed-time' secs\n -y, --speed-time SECONDS  Trigger 'speed-limit' abort after SECONDS (default: 30)\n -t, --telnet-option OPT=VAL  Set telnet option\n     --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be >512)\n     --tftp-no-options  Do not send TFTP options requests\n -z, --time-cond TIME   Transfer based on a time condition\n -T, --upload-file FILE  Transfer FILE to destination\n     --url URL       URL to work with\n -B, --use-ascii     Use ASCII/text transfer\n -u, --user USER[:PASSWORD]  Server user and password\n -A, --user-agent STRING  Send User-Agent STRING to server (H)\n -v, --verbose       Make the operation more talkative\n -V, --version       Show version number and quit\n -w, --write-out FORMAT  Use output FORMAT after completion\n -q, --disable       Disable .curlrc (must be first parameter)\n```\n\n","source":"_posts/Linux/cUrl使用心得.md","raw":"---\ntitle: cUrl使用心得\ndate: 2013-01-13 14:32:40\ntags: cUrl\ncategories: Linux\nthumbnail: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1516119417386&di=f9810c82af31ee64a32e2e4ca05c91bb&imgtype=0&src=http%3A%2F%2Fwww.wmpic.me%2Fwp-content%2Fuploads%2F2014%2F03%2F20140325103402919.jpg\n---\n\n# 一、常用参数\n\n```shell\n# -i：include全部HTTP报文\n# -v：显示请求过程\n# -d：HTTP POST DATA \n# -X：自定义请求方法。如-X POST\n# -H：自定义请求头 如 -H \"Content-type: application/json\"\n# -G： --get  Send the -d data with a HTTP GET (H)\n# -o：输出\n# -s：静音模式，不输出任何东西\n# -S, --show-error    Show error. With -s, make curl show errors when they occur\n# -f, --fail         连接失败时不显示http错误 (H)\n\n# 调试的话暂时用到这么多，其他的命令想到在更。这种东西可以直接看英文文档。\n```\n\n\n\n# 二、get 请求\n\n```shell\n# 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地\ncurl \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"  \n\n# 显示全部信息:包括起始行、响应头、响应体\n# -i: --include       Include protocol headers in the output (H/F)\ncurl -i \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"\n\n# 显示get请求全过程解析 *表示解析过程  >表示请求 <表示响应 \n# -v: --verbose 冗长的\ncurl -v \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\" #--verbose \n```\n\n\n\n# 三、post请求\n\n```shell\n#  -d: --data DATA     HTTP POST data (H)\ncurl -d \"param1=value1&param2=value2\" \"http://www.baidu.com\"\n```\n\n\n\n# 四、JSON 格式的 post 请求\n\n```shell\n# -H: --header LINE   Pass custom header LINE to server (H)\n# -X: --request COMMAND  Specify request command to use\n# -d: --data DATA     HTTP POST data (H)\ncurl -l -H \"Content-type: application/json\" -X POST -d '{\"phone\":\"13521389587\",\"password\":\"test\"}' http://domain/apis/users.json\n```\n\n\n\n# 五、实例\n\n```\nURL ：http://7xssni.com1.z0.glb.clouddn.com/home.txt\n```\n\n```\n{\n  \"headUrl\" : {\n    \"headList\" : [\n      \"http://7xssni.com1.z0.glb.clouddn.com/home1.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home2.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home3.jpg\",\n      \"http://7xssni.com1.z0.glb.clouddn.com/home4.jpg\"\n    ]\n  },\n  \"homeUrl\" : {\n    \"dataList\" : [\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/1.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"PVC实体塑木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/2.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"3D印花地毯\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/3.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"金刚木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/4.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典菱形软包\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/5.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典防水木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/6.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典花纹墙纸\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/7.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"经典使用木板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      },\n      {\n        \"imagesURL\" : \"http://7xssni.com1.z0.glb.clouddn.com/8.jpg\",\n        \"materialList\" : \"进口\",\n        \"titleStr\" : \"非洲柚木地板\",\n        \"use\" : \"地板/家具/隔墙/衣柜\"\n      }\n    ]\n  }\n}\n```\n\n\n\n\n\n## 五、常用命令：\n\n```\n -a, --append        Append to target file when uploading (F/SFTP)\n -E, --cert CERT[:PASSWD]  Client certificate file and password (SSL)\n -K, --config FILE   Read config from FILE\n -C, --continue-at OFFSET  Resumed transfer OFFSET\n -b, --cookie STRING/FILE  Read cookies from STRING/FILE (H)\n -c, --cookie-jar FILE  Write cookies to FILE after operation (H)\n -d, --data DATA     HTTP POST data (H)\n -D, --dump-header FILE  Write the received headers to FILE\n -f, --fail          Fail silently (no output at all) on HTTP errors (H)\n -F, --form CONTENT  Specify HTTP multipart POST data (H)\n -P, --ftp-port ADR  Use PORT with given address instead of PASV (F)\n -G, --get           Send the -d data with a HTTP GET (H)\n -g, --globoff       Disable URL sequences and ranges using {} and []\n -H, --header LINE   Pass custom header LINE to server (H)\n -I, --head          Show document info only\n -h, --help          This help text\n -i, --include       Include protocol headers in the output (H/F)\n -k, --insecure      Allow connections to SSL sites without certs (H)\n -j, --junk-session-cookies  Ignore session cookies read from file (H)\n -l, --list-only     List only mode (F/POP3)\n -L, --location      Follow redirects (H)\n -M, --manual        Display the full manual\n -m, --max-time SECONDS  Maximum time allowed for the transfer\n -n, --netrc         Must read .netrc for user name and password\n -N, --no-buffer     Disable buffering of the output stream\n -o, --output FILE   Write to FILE instead of stdout\n -U, --proxy-user USER[:PASSWORD]  Proxy user and password\n     --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port\n -p, --proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)\n     --pubkey KEY    Public key file name (SSH)\n -Q, --quote CMD     Send command(s) to server before transfer (F/SFTP)\n     --random-file FILE  File for reading random data from (SSL)\n -r, --range RANGE   Retrieve only the bytes within RANGE\n     --raw           Do HTTP \"raw\"; no transfer decoding (H)\n -e, --referer       Referer URL (H)\n -J, --remote-header-name  Use the header-provided filename (H)\n -O, --remote-name   Write output to a file named as the remote file\n     --remote-name-all  Use the remote file name for all URLs\n -R, --remote-time   Set the remote file's time on the local output\n -X, --request COMMAND  Specify request command to use\n -S, --show-error    Show error. With -s, make curl show errors when they occur\n -s, --silent        Silent mode (don't output anything)\n -Y, --speed-limit RATE  Stop transfers below RATE for 'speed-time' secs\n -y, --speed-time SECONDS  Trigger 'speed-limit' abort after SECONDS (default: 30)\n -t, --telnet-option OPT=VAL  Set telnet option\n     --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be >512)\n     --tftp-no-options  Do not send TFTP options requests\n -z, --time-cond TIME   Transfer based on a time condition\n -T, --upload-file FILE  Transfer FILE to destination\n     --url URL       URL to work with\n -B, --use-ascii     Use ASCII/text transfer\n -u, --user USER[:PASSWORD]  Server user and password\n -A, --user-agent STRING  Send User-Agent STRING to server (H)\n -v, --verbose       Make the operation more talkative\n -V, --version       Show version number and quit\n -w, --write-out FORMAT  Use output FORMAT after completion\n -q, --disable       Disable .curlrc (must be first parameter)\n```\n\n","slug":"Linux/cUrl使用心得","published":1,"updated":"2018-01-31T08:47:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkuer000k074miigigb5p","content":"<h1 id=\"一、常用参数\"><a href=\"#一、常用参数\" class=\"headerlink\" title=\"一、常用参数\"></a>一、常用参数</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> -i：include全部HTTP报文</span><br><span class=\"line\"><span class=\"meta\">#</span> -v：显示请求过程</span><br><span class=\"line\"><span class=\"meta\">#</span> -d：HTTP POST DATA </span><br><span class=\"line\"><span class=\"meta\">#</span> -X：自定义请求方法。如-X POST</span><br><span class=\"line\"><span class=\"meta\">#</span> -H：自定义请求头 如 -H \"Content-type: application/json\"</span><br><span class=\"line\"><span class=\"meta\">#</span> -G： --get  Send the -d data with a HTTP GET (H)</span><br><span class=\"line\"><span class=\"meta\">#</span> -o：输出</span><br><span class=\"line\"><span class=\"meta\">#</span> -s：静音模式，不输出任何东西</span><br><span class=\"line\"><span class=\"meta\">#</span> -S, --show-error    Show error. With -s, make curl show errors when they occur</span><br><span class=\"line\"><span class=\"meta\">#</span> -f, --fail         连接失败时不显示http错误 (H)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 调试的话暂时用到这么多，其他的命令想到在更。这种东西可以直接看英文文档。</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、get-请求\"><a href=\"#二、get-请求\" class=\"headerlink\" title=\"二、get 请求\"></a>二、get 请求</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地</span><br><span class=\"line\">curl \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 显示全部信息:包括起始行、响应头、响应体</span><br><span class=\"line\"><span class=\"meta\">#</span> -i: --include       Include protocol headers in the output (H/F)</span><br><span class=\"line\">curl -i \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 显示get请求全过程解析 *表示解析过程  &gt;表示请求 &lt;表示响应 </span><br><span class=\"line\"><span class=\"meta\">#</span> -v: --verbose 冗长的</span><br><span class=\"line\">curl -v \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\" #--verbose</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、post请求\"><a href=\"#三、post请求\" class=\"headerlink\" title=\"三、post请求\"></a>三、post请求</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>  -d: --data DATA     HTTP POST data (H)</span><br><span class=\"line\">curl -d \"param1=value1&amp;param2=value2\" \"http://www.baidu.com\"</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、JSON-格式的-post-请求\"><a href=\"#四、JSON-格式的-post-请求\" class=\"headerlink\" title=\"四、JSON 格式的 post 请求\"></a>四、JSON 格式的 post 请求</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> -H: --header LINE   Pass custom header LINE to server (H)</span><br><span class=\"line\"><span class=\"meta\">#</span> -X: --request COMMAND  Specify request command to use</span><br><span class=\"line\"><span class=\"meta\">#</span> -d: --data DATA     HTTP POST data (H)</span><br><span class=\"line\">curl -l -H \"Content-type: application/json\" -X POST -d '&#123;\"phone\":\"13521389587\",\"password\":\"test\"&#125;' http://domain/apis/users.json</span><br></pre></td></tr></table></figure>\n<h1 id=\"五、实例\"><a href=\"#五、实例\" class=\"headerlink\" title=\"五、实例\"></a>五、实例</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">URL ：http://7xssni.com1.z0.glb.clouddn.com/home.txt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;headUrl&quot; : &#123;</span><br><span class=\"line\">    &quot;headList&quot; : [</span><br><span class=\"line\">      &quot;http://7xssni.com1.z0.glb.clouddn.com/home1.jpg&quot;,</span><br><span class=\"line\">      &quot;http://7xssni.com1.z0.glb.clouddn.com/home2.jpg&quot;,</span><br><span class=\"line\">      &quot;http://7xssni.com1.z0.glb.clouddn.com/home3.jpg&quot;,</span><br><span class=\"line\">      &quot;http://7xssni.com1.z0.glb.clouddn.com/home4.jpg&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;homeUrl&quot; : &#123;</span><br><span class=\"line\">    &quot;dataList&quot; : [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/1.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;PVC实体塑木板&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/2.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;3D印花地毯&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/3.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;金刚木板&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/4.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;经典菱形软包&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/5.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;经典防水木板&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/6.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;经典花纹墙纸&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/7.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;经典使用木板&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/8.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;非洲柚木地板&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、常用命令：\"><a href=\"#五、常用命令：\" class=\"headerlink\" title=\"五、常用命令：\"></a>五、常用命令：</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-a, --append        Append to target file when uploading (F/SFTP)</span><br><span class=\"line\">-E, --cert CERT[:PASSWD]  Client certificate file and password (SSL)</span><br><span class=\"line\">-K, --config FILE   Read config from FILE</span><br><span class=\"line\">-C, --continue-at OFFSET  Resumed transfer OFFSET</span><br><span class=\"line\">-b, --cookie STRING/FILE  Read cookies from STRING/FILE (H)</span><br><span class=\"line\">-c, --cookie-jar FILE  Write cookies to FILE after operation (H)</span><br><span class=\"line\">-d, --data DATA     HTTP POST data (H)</span><br><span class=\"line\">-D, --dump-header FILE  Write the received headers to FILE</span><br><span class=\"line\">-f, --fail          Fail silently (no output at all) on HTTP errors (H)</span><br><span class=\"line\">-F, --form CONTENT  Specify HTTP multipart POST data (H)</span><br><span class=\"line\">-P, --ftp-port ADR  Use PORT with given address instead of PASV (F)</span><br><span class=\"line\">-G, --get           Send the -d data with a HTTP GET (H)</span><br><span class=\"line\">-g, --globoff       Disable URL sequences and ranges using &#123;&#125; and []</span><br><span class=\"line\">-H, --header LINE   Pass custom header LINE to server (H)</span><br><span class=\"line\">-I, --head          Show document info only</span><br><span class=\"line\">-h, --help          This help text</span><br><span class=\"line\">-i, --include       Include protocol headers in the output (H/F)</span><br><span class=\"line\">-k, --insecure      Allow connections to SSL sites without certs (H)</span><br><span class=\"line\">-j, --junk-session-cookies  Ignore session cookies read from file (H)</span><br><span class=\"line\">-l, --list-only     List only mode (F/POP3)</span><br><span class=\"line\">-L, --location      Follow redirects (H)</span><br><span class=\"line\">-M, --manual        Display the full manual</span><br><span class=\"line\">-m, --max-time SECONDS  Maximum time allowed for the transfer</span><br><span class=\"line\">-n, --netrc         Must read .netrc for user name and password</span><br><span class=\"line\">-N, --no-buffer     Disable buffering of the output stream</span><br><span class=\"line\">-o, --output FILE   Write to FILE instead of stdout</span><br><span class=\"line\">-U, --proxy-user USER[:PASSWORD]  Proxy user and password</span><br><span class=\"line\">    --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port</span><br><span class=\"line\">-p, --proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)</span><br><span class=\"line\">    --pubkey KEY    Public key file name (SSH)</span><br><span class=\"line\">-Q, --quote CMD     Send command(s) to server before transfer (F/SFTP)</span><br><span class=\"line\">    --random-file FILE  File for reading random data from (SSL)</span><br><span class=\"line\">-r, --range RANGE   Retrieve only the bytes within RANGE</span><br><span class=\"line\">    --raw           Do HTTP &quot;raw&quot;; no transfer decoding (H)</span><br><span class=\"line\">-e, --referer       Referer URL (H)</span><br><span class=\"line\">-J, --remote-header-name  Use the header-provided filename (H)</span><br><span class=\"line\">-O, --remote-name   Write output to a file named as the remote file</span><br><span class=\"line\">    --remote-name-all  Use the remote file name for all URLs</span><br><span class=\"line\">-R, --remote-time   Set the remote file&apos;s time on the local output</span><br><span class=\"line\">-X, --request COMMAND  Specify request command to use</span><br><span class=\"line\">-S, --show-error    Show error. With -s, make curl show errors when they occur</span><br><span class=\"line\">-s, --silent        Silent mode (don&apos;t output anything)</span><br><span class=\"line\">-Y, --speed-limit RATE  Stop transfers below RATE for &apos;speed-time&apos; secs</span><br><span class=\"line\">-y, --speed-time SECONDS  Trigger &apos;speed-limit&apos; abort after SECONDS (default: 30)</span><br><span class=\"line\">-t, --telnet-option OPT=VAL  Set telnet option</span><br><span class=\"line\">    --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be &gt;512)</span><br><span class=\"line\">    --tftp-no-options  Do not send TFTP options requests</span><br><span class=\"line\">-z, --time-cond TIME   Transfer based on a time condition</span><br><span class=\"line\">-T, --upload-file FILE  Transfer FILE to destination</span><br><span class=\"line\">    --url URL       URL to work with</span><br><span class=\"line\">-B, --use-ascii     Use ASCII/text transfer</span><br><span class=\"line\">-u, --user USER[:PASSWORD]  Server user and password</span><br><span class=\"line\">-A, --user-agent STRING  Send User-Agent STRING to server (H)</span><br><span class=\"line\">-v, --verbose       Make the operation more talkative</span><br><span class=\"line\">-V, --version       Show version number and quit</span><br><span class=\"line\">-w, --write-out FORMAT  Use output FORMAT after completion</span><br><span class=\"line\">-q, --disable       Disable .curlrc (must be first parameter)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<h1 id=\"一、常用参数\"><a href=\"#一、常用参数\" class=\"headerlink\" title=\"一、常用参数\"></a>一、常用参数</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> -i：include全部HTTP报文</span><br><span class=\"line\"><span class=\"meta\">#</span> -v：显示请求过程</span><br><span class=\"line\"><span class=\"meta\">#</span> -d：HTTP POST DATA </span><br><span class=\"line\"><span class=\"meta\">#</span> -X：自定义请求方法。如-X POST</span><br><span class=\"line\"><span class=\"meta\">#</span> -H：自定义请求头 如 -H \"Content-type: application/json\"</span><br><span class=\"line\"><span class=\"meta\">#</span> -G： --get  Send the -d data with a HTTP GET (H)</span><br><span class=\"line\"><span class=\"meta\">#</span> -o：输出</span><br><span class=\"line\"><span class=\"meta\">#</span> -s：静音模式，不输出任何东西</span><br><span class=\"line\"><span class=\"meta\">#</span> -S, --show-error    Show error. With -s, make curl show errors when they occur</span><br><span class=\"line\"><span class=\"meta\">#</span> -f, --fail         连接失败时不显示http错误 (H)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 调试的话暂时用到这么多，其他的命令想到在更。这种东西可以直接看英文文档。</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、get-请求\"><a href=\"#二、get-请求\" class=\"headerlink\" title=\"二、get 请求\"></a>二、get 请求</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地</span><br><span class=\"line\">curl \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 显示全部信息:包括起始行、响应头、响应体</span><br><span class=\"line\"><span class=\"meta\">#</span> -i: --include       Include protocol headers in the output (H/F)</span><br><span class=\"line\">curl -i \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 显示get请求全过程解析 *表示解析过程  &gt;表示请求 &lt;表示响应 </span><br><span class=\"line\"><span class=\"meta\">#</span> -v: --verbose 冗长的</span><br><span class=\"line\">curl -v \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\" #--verbose</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、post请求\"><a href=\"#三、post请求\" class=\"headerlink\" title=\"三、post请求\"></a>三、post请求</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>  -d: --data DATA     HTTP POST data (H)</span><br><span class=\"line\">curl -d \"param1=value1&amp;param2=value2\" \"http://www.baidu.com\"</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、JSON-格式的-post-请求\"><a href=\"#四、JSON-格式的-post-请求\" class=\"headerlink\" title=\"四、JSON 格式的 post 请求\"></a>四、JSON 格式的 post 请求</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> -H: --header LINE   Pass custom header LINE to server (H)</span><br><span class=\"line\"><span class=\"meta\">#</span> -X: --request COMMAND  Specify request command to use</span><br><span class=\"line\"><span class=\"meta\">#</span> -d: --data DATA     HTTP POST data (H)</span><br><span class=\"line\">curl -l -H \"Content-type: application/json\" -X POST -d '&#123;\"phone\":\"13521389587\",\"password\":\"test\"&#125;' http://domain/apis/users.json</span><br></pre></td></tr></table></figure>\n<h1 id=\"五、实例\"><a href=\"#五、实例\" class=\"headerlink\" title=\"五、实例\"></a>五、实例</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">URL ：http://7xssni.com1.z0.glb.clouddn.com/home.txt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;headUrl&quot; : &#123;</span><br><span class=\"line\">    &quot;headList&quot; : [</span><br><span class=\"line\">      &quot;http://7xssni.com1.z0.glb.clouddn.com/home1.jpg&quot;,</span><br><span class=\"line\">      &quot;http://7xssni.com1.z0.glb.clouddn.com/home2.jpg&quot;,</span><br><span class=\"line\">      &quot;http://7xssni.com1.z0.glb.clouddn.com/home3.jpg&quot;,</span><br><span class=\"line\">      &quot;http://7xssni.com1.z0.glb.clouddn.com/home4.jpg&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;homeUrl&quot; : &#123;</span><br><span class=\"line\">    &quot;dataList&quot; : [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/1.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;PVC实体塑木板&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/2.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;3D印花地毯&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/3.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;金刚木板&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/4.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;经典菱形软包&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/5.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;经典防水木板&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/6.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;经典花纹墙纸&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/7.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;经典使用木板&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/8.jpg&quot;,</span><br><span class=\"line\">        &quot;materialList&quot; : &quot;进口&quot;,</span><br><span class=\"line\">        &quot;titleStr&quot; : &quot;非洲柚木地板&quot;,</span><br><span class=\"line\">        &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、常用命令：\"><a href=\"#五、常用命令：\" class=\"headerlink\" title=\"五、常用命令：\"></a>五、常用命令：</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-a, --append        Append to target file when uploading (F/SFTP)</span><br><span class=\"line\">-E, --cert CERT[:PASSWD]  Client certificate file and password (SSL)</span><br><span class=\"line\">-K, --config FILE   Read config from FILE</span><br><span class=\"line\">-C, --continue-at OFFSET  Resumed transfer OFFSET</span><br><span class=\"line\">-b, --cookie STRING/FILE  Read cookies from STRING/FILE (H)</span><br><span class=\"line\">-c, --cookie-jar FILE  Write cookies to FILE after operation (H)</span><br><span class=\"line\">-d, --data DATA     HTTP POST data (H)</span><br><span class=\"line\">-D, --dump-header FILE  Write the received headers to FILE</span><br><span class=\"line\">-f, --fail          Fail silently (no output at all) on HTTP errors (H)</span><br><span class=\"line\">-F, --form CONTENT  Specify HTTP multipart POST data (H)</span><br><span class=\"line\">-P, --ftp-port ADR  Use PORT with given address instead of PASV (F)</span><br><span class=\"line\">-G, --get           Send the -d data with a HTTP GET (H)</span><br><span class=\"line\">-g, --globoff       Disable URL sequences and ranges using &#123;&#125; and []</span><br><span class=\"line\">-H, --header LINE   Pass custom header LINE to server (H)</span><br><span class=\"line\">-I, --head          Show document info only</span><br><span class=\"line\">-h, --help          This help text</span><br><span class=\"line\">-i, --include       Include protocol headers in the output (H/F)</span><br><span class=\"line\">-k, --insecure      Allow connections to SSL sites without certs (H)</span><br><span class=\"line\">-j, --junk-session-cookies  Ignore session cookies read from file (H)</span><br><span class=\"line\">-l, --list-only     List only mode (F/POP3)</span><br><span class=\"line\">-L, --location      Follow redirects (H)</span><br><span class=\"line\">-M, --manual        Display the full manual</span><br><span class=\"line\">-m, --max-time SECONDS  Maximum time allowed for the transfer</span><br><span class=\"line\">-n, --netrc         Must read .netrc for user name and password</span><br><span class=\"line\">-N, --no-buffer     Disable buffering of the output stream</span><br><span class=\"line\">-o, --output FILE   Write to FILE instead of stdout</span><br><span class=\"line\">-U, --proxy-user USER[:PASSWORD]  Proxy user and password</span><br><span class=\"line\">    --proxy1.0 HOST[:PORT]  Use HTTP/1.0 proxy on given port</span><br><span class=\"line\">-p, --proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)</span><br><span class=\"line\">    --pubkey KEY    Public key file name (SSH)</span><br><span class=\"line\">-Q, --quote CMD     Send command(s) to server before transfer (F/SFTP)</span><br><span class=\"line\">    --random-file FILE  File for reading random data from (SSL)</span><br><span class=\"line\">-r, --range RANGE   Retrieve only the bytes within RANGE</span><br><span class=\"line\">    --raw           Do HTTP &quot;raw&quot;; no transfer decoding (H)</span><br><span class=\"line\">-e, --referer       Referer URL (H)</span><br><span class=\"line\">-J, --remote-header-name  Use the header-provided filename (H)</span><br><span class=\"line\">-O, --remote-name   Write output to a file named as the remote file</span><br><span class=\"line\">    --remote-name-all  Use the remote file name for all URLs</span><br><span class=\"line\">-R, --remote-time   Set the remote file&apos;s time on the local output</span><br><span class=\"line\">-X, --request COMMAND  Specify request command to use</span><br><span class=\"line\">-S, --show-error    Show error. With -s, make curl show errors when they occur</span><br><span class=\"line\">-s, --silent        Silent mode (don&apos;t output anything)</span><br><span class=\"line\">-Y, --speed-limit RATE  Stop transfers below RATE for &apos;speed-time&apos; secs</span><br><span class=\"line\">-y, --speed-time SECONDS  Trigger &apos;speed-limit&apos; abort after SECONDS (default: 30)</span><br><span class=\"line\">-t, --telnet-option OPT=VAL  Set telnet option</span><br><span class=\"line\">    --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be &gt;512)</span><br><span class=\"line\">    --tftp-no-options  Do not send TFTP options requests</span><br><span class=\"line\">-z, --time-cond TIME   Transfer based on a time condition</span><br><span class=\"line\">-T, --upload-file FILE  Transfer FILE to destination</span><br><span class=\"line\">    --url URL       URL to work with</span><br><span class=\"line\">-B, --use-ascii     Use ASCII/text transfer</span><br><span class=\"line\">-u, --user USER[:PASSWORD]  Server user and password</span><br><span class=\"line\">-A, --user-agent STRING  Send User-Agent STRING to server (H)</span><br><span class=\"line\">-v, --verbose       Make the operation more talkative</span><br><span class=\"line\">-V, --version       Show version number and quit</span><br><span class=\"line\">-w, --write-out FORMAT  Use output FORMAT after completion</span><br><span class=\"line\">-q, --disable       Disable .curlrc (must be first parameter)</span><br></pre></td></tr></table></figure>\n"},{"title":"分享几个常用的插件工具","date":"2016-06-12T07:12:25.000Z","thumbnail":"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1084700340,387885401&fm=27&gp=0.jpg","_content":"\n\n\n# 分享几个常用的插件工具\n\n## 一、gem\n\n### 1、synx \n\n1. 介绍：\n\n   synx：同步 xcode 工程中的 group 至当前的 finder 中\n\n2. 安装：\n\n   ```shell\n   $ gem install synx\n   ```\n\n\n3. 使用：\n\n   ```shell\n   $ synx your/product/path/project.xcodeproj #项目中有 pod 时一样用xcodeproj\n   ```\n\n4. 注意事项：\n\n   导入 .a 和 .framework文件时，或者 支付宝 SDK 时可能会出现一些问题","source":"_posts/Linux/分享几个常用的插件工具.md","raw":"---\ntitle: 分享几个常用的插件工具\ndate: 2016-06-12 15:12:25\ncategories: Linux\ntags: \n- tools\n- plugins\nthumbnail: \"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1084700340,387885401&fm=27&gp=0.jpg\"\n---\n\n\n\n# 分享几个常用的插件工具\n\n## 一、gem\n\n### 1、synx \n\n1. 介绍：\n\n   synx：同步 xcode 工程中的 group 至当前的 finder 中\n\n2. 安装：\n\n   ```shell\n   $ gem install synx\n   ```\n\n\n3. 使用：\n\n   ```shell\n   $ synx your/product/path/project.xcodeproj #项目中有 pod 时一样用xcodeproj\n   ```\n\n4. 注意事项：\n\n   导入 .a 和 .framework文件时，或者 支付宝 SDK 时可能会出现一些问题","slug":"Linux/分享几个常用的插件工具","published":1,"updated":"2018-01-31T08:47:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkuet000l074m3u86ifhs","content":"<h1 id=\"分享几个常用的插件工具\"><a href=\"#分享几个常用的插件工具\" class=\"headerlink\" title=\"分享几个常用的插件工具\"></a>分享几个常用的插件工具</h1><h2 id=\"一、gem\"><a href=\"#一、gem\" class=\"headerlink\" title=\"一、gem\"></a>一、gem</h2><h3 id=\"1、synx\"><a href=\"#1、synx\" class=\"headerlink\" title=\"1、synx\"></a>1、synx</h3><ol>\n<li><p>介绍：</p>\n<p>synx：同步 xcode 工程中的 group 至当前的 finder 中</p>\n</li>\n<li><p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gem install synx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> synx your/product/path/project.xcodeproj #项目中有 pod 时一样用xcodeproj</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意事项：</p>\n<p>导入 .a 和 .framework文件时，或者 支付宝 SDK 时可能会出现一些问题</p>\n</li>\n</ol>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<h1 id=\"分享几个常用的插件工具\"><a href=\"#分享几个常用的插件工具\" class=\"headerlink\" title=\"分享几个常用的插件工具\"></a>分享几个常用的插件工具</h1><h2 id=\"一、gem\"><a href=\"#一、gem\" class=\"headerlink\" title=\"一、gem\"></a>一、gem</h2><h3 id=\"1、synx\"><a href=\"#1、synx\" class=\"headerlink\" title=\"1、synx\"></a>1、synx</h3><ol>\n<li><p>介绍：</p>\n<p>synx：同步 xcode 工程中的 group 至当前的 finder 中</p>\n</li>\n<li><p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> gem install synx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> synx your/product/path/project.xcodeproj #项目中有 pod 时一样用xcodeproj</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意事项：</p>\n<p>导入 .a 和 .framework文件时，或者 支付宝 SDK 时可能会出现一些问题</p>\n</li>\n</ol>\n"},{"title":"gem、rvm使用心得","date":"2013-04-25T09:06:37.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515664615&di=81c30abd5565396089d0aae99a62f8d2&src=http://a3.topitme.com/0/13/0b/11293612116520b130o.jpg","_content":"\n# gem,rvm使用心得\n\n##### rvm 和 gem 的关系\n\n- rvm 全称是 Ruby Version Manager，即Ruby 版本管理器。\n- gem，即RubyGems，是一个用于对 Ruby 组件进行打包 Ruby 的打包系统，可以从远程服务器下载并安装 Rails。\n\n> [Ruby](https://baike.baidu.com/item/Ruby) on Rails 是一个用于开发数据库驱动的网络应用程序的完整框架。Rails基于[MVC](https://baike.baidu.com/item/MVC)（模型- 视图- 控制器）设计模式。从视图中的[Ajax](https://baike.baidu.com/item/Ajax)应用，到控制器中的访问请求和反馈，到封装数据库的模型，Rails 为你提供一个纯Ruby的开发环境。发布网站时，你只需要一个数据库和一个网络服务器即可。\n>\n> Ruby On Rails是一个用于编写网络应用程序的软件包.它基于一种计算机软件语言Ruby,给程序开发人员提供了强大的框架支持.你可以用比以前少的多的代码和 短的多的时间编写出一流的网络软件。\n\n\n\n**查看gem 源**：\n\n```\n$ gem source\n```\n\n|      |                     |      |\n| ---- | ------------------- | ---- |\n| -a   | --add SOURCE_URI    | 添加源  |\n| -l   | --list              | 列表   |\n| -r   | --remove SOURCE_URI | 删除   |\n| -c   | --clear-all         | 清除所有 |\n| -u   | --update            | 更新   |\n\n```\n$ gem sources -r http://rubygems.org/ #删除默认的源\n\n$ gem sources -a https://ruby.taobao.org #添加淘宝源\n```\n\n\n\n- Mac OSX 必须要安装的库\n\n  ```\n  $ brew install libxml2 libxslt libiconv\n  ```\n\n- 载入 RVM 环境\n\n  ```\n  $ source ~/.rvm/scripts/rvm\n  ```\n\n- 用 RVM 安装 ruby 环境\n\n  ```\n  $ rvm requirements\n  $ rvm install 2.3.0\n  ```\n\n- 安装 Bundler\n\n  ```\n  $ gem install bundler\n  ```\n\n- 安装 Rails 环境\n\n  ```\n  $ gem install rails\n  ```\n\n- homebrew 安装 ruby\n\n  ```\n  $ brew install ruby\n  ```\n\n- RVM 安装\n\n  ```\n  $ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n  $ \\curl -sSL https://get.rvm.io | bash -s stable\n  $ source ~/.bashrc\n  $ source ~/.bash_profile\n  ```\n\n- 列出以及 ruby 版本\n\n  ```\n  $ rvm list known\n  ```\n\n- 切换 ruby 版本\n\n  ```\n  $ rvm use 2.2.0\n  ```\n\n  ​\n\n- 修改 RVM 下载 Ruby 的源，到 Ruby China 的镜像:\n\n  ```\n  $ echo \"ruby_url=https://cache.ruby-china.org/pub/ruby\" > ~/.rvm/user/db\n  ```\n\n  ​\n\n  [1]: https://ruby-china.org/wiki/rvm-guide\t\"ruby wiki\"\n  [2]: https://www.ruby-toolbox.com/\t\"热门的 Gem\"\n\n  ​","source":"_posts/Linux/gem、rvm使用心得.md","raw":"---\ntitle: gem、rvm使用心得\ndate: 2013-04-25 17:06:37\ncategories: Linux\ntags:\n- gem\n- rvm\nthumbnail: \"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515664615&di=81c30abd5565396089d0aae99a62f8d2&src=http://a3.topitme.com/0/13/0b/11293612116520b130o.jpg\"\n---\n\n# gem,rvm使用心得\n\n##### rvm 和 gem 的关系\n\n- rvm 全称是 Ruby Version Manager，即Ruby 版本管理器。\n- gem，即RubyGems，是一个用于对 Ruby 组件进行打包 Ruby 的打包系统，可以从远程服务器下载并安装 Rails。\n\n> [Ruby](https://baike.baidu.com/item/Ruby) on Rails 是一个用于开发数据库驱动的网络应用程序的完整框架。Rails基于[MVC](https://baike.baidu.com/item/MVC)（模型- 视图- 控制器）设计模式。从视图中的[Ajax](https://baike.baidu.com/item/Ajax)应用，到控制器中的访问请求和反馈，到封装数据库的模型，Rails 为你提供一个纯Ruby的开发环境。发布网站时，你只需要一个数据库和一个网络服务器即可。\n>\n> Ruby On Rails是一个用于编写网络应用程序的软件包.它基于一种计算机软件语言Ruby,给程序开发人员提供了强大的框架支持.你可以用比以前少的多的代码和 短的多的时间编写出一流的网络软件。\n\n\n\n**查看gem 源**：\n\n```\n$ gem source\n```\n\n|      |                     |      |\n| ---- | ------------------- | ---- |\n| -a   | --add SOURCE_URI    | 添加源  |\n| -l   | --list              | 列表   |\n| -r   | --remove SOURCE_URI | 删除   |\n| -c   | --clear-all         | 清除所有 |\n| -u   | --update            | 更新   |\n\n```\n$ gem sources -r http://rubygems.org/ #删除默认的源\n\n$ gem sources -a https://ruby.taobao.org #添加淘宝源\n```\n\n\n\n- Mac OSX 必须要安装的库\n\n  ```\n  $ brew install libxml2 libxslt libiconv\n  ```\n\n- 载入 RVM 环境\n\n  ```\n  $ source ~/.rvm/scripts/rvm\n  ```\n\n- 用 RVM 安装 ruby 环境\n\n  ```\n  $ rvm requirements\n  $ rvm install 2.3.0\n  ```\n\n- 安装 Bundler\n\n  ```\n  $ gem install bundler\n  ```\n\n- 安装 Rails 环境\n\n  ```\n  $ gem install rails\n  ```\n\n- homebrew 安装 ruby\n\n  ```\n  $ brew install ruby\n  ```\n\n- RVM 安装\n\n  ```\n  $ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n  $ \\curl -sSL https://get.rvm.io | bash -s stable\n  $ source ~/.bashrc\n  $ source ~/.bash_profile\n  ```\n\n- 列出以及 ruby 版本\n\n  ```\n  $ rvm list known\n  ```\n\n- 切换 ruby 版本\n\n  ```\n  $ rvm use 2.2.0\n  ```\n\n  ​\n\n- 修改 RVM 下载 Ruby 的源，到 Ruby China 的镜像:\n\n  ```\n  $ echo \"ruby_url=https://cache.ruby-china.org/pub/ruby\" > ~/.rvm/user/db\n  ```\n\n  ​\n\n  [1]: https://ruby-china.org/wiki/rvm-guide\t\"ruby wiki\"\n  [2]: https://www.ruby-toolbox.com/\t\"热门的 Gem\"\n\n  ​","slug":"Linux/gem、rvm使用心得","published":1,"updated":"2018-01-16T03:16:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkuf1000o074mgzgeb9zq","content":"<h1 id=\"gem-rvm使用心得\"><a href=\"#gem-rvm使用心得\" class=\"headerlink\" title=\"gem,rvm使用心得\"></a>gem,rvm使用心得</h1><h5 id=\"rvm-和-gem-的关系\"><a href=\"#rvm-和-gem-的关系\" class=\"headerlink\" title=\"rvm 和 gem 的关系\"></a>rvm 和 gem 的关系</h5><ul>\n<li>rvm 全称是 Ruby Version Manager，即Ruby 版本管理器。</li>\n<li>gem，即RubyGems，是一个用于对 Ruby 组件进行打包 Ruby 的打包系统，可以从远程服务器下载并安装 Rails。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/Ruby\" target=\"_blank\" rel=\"noopener\">Ruby</a> on Rails 是一个用于开发数据库驱动的网络应用程序的完整框架。Rails基于<a href=\"https://baike.baidu.com/item/MVC\" target=\"_blank\" rel=\"noopener\">MVC</a>（模型- 视图- 控制器）设计模式。从视图中的<a href=\"https://baike.baidu.com/item/Ajax\" target=\"_blank\" rel=\"noopener\">Ajax</a>应用，到控制器中的访问请求和反馈，到封装数据库的模型，Rails 为你提供一个纯Ruby的开发环境。发布网站时，你只需要一个数据库和一个网络服务器即可。</p>\n<p>Ruby On Rails是一个用于编写网络应用程序的软件包.它基于一种计算机软件语言Ruby,给程序开发人员提供了强大的框架支持.你可以用比以前少的多的代码和 短的多的时间编写出一流的网络软件。</p>\n</blockquote>\n<p><strong>查看gem 源</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem source</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>–add SOURCE_URI</td>\n<td>添加源</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>–list</td>\n<td>列表</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>–remove SOURCE_URI</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>–clear-all</td>\n<td>清除所有</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>–update</td>\n<td>更新</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem sources -r http://rubygems.org/ #删除默认的源</span><br><span class=\"line\"></span><br><span class=\"line\">$ gem sources -a https://ruby.taobao.org #添加淘宝源</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Mac OSX 必须要安装的库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install libxml2 libxslt libiconv</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>载入 RVM 环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ source ~/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 RVM 安装 ruby 环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ rvm requirements</span><br><span class=\"line\">$ rvm install 2.3.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Bundler</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem install bundler</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Rails 环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem install rails</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>homebrew 安装 ruby</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install ruby</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>RVM 安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class=\"line\">$ \\curl -sSL https://get.rvm.io | bash -s stable</span><br><span class=\"line\">$ source ~/.bashrc</span><br><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列出以及 ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ rvm list known</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换 ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ rvm use 2.2.0</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n<li><p>修改 RVM 下载 Ruby 的源，到 Ruby China 的镜像:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ echo &quot;ruby_url=https://cache.ruby-china.org/pub/ruby&quot; &gt; ~/.rvm/user/db</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<p>  ​</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<h1 id=\"gem-rvm使用心得\"><a href=\"#gem-rvm使用心得\" class=\"headerlink\" title=\"gem,rvm使用心得\"></a>gem,rvm使用心得</h1><h5 id=\"rvm-和-gem-的关系\"><a href=\"#rvm-和-gem-的关系\" class=\"headerlink\" title=\"rvm 和 gem 的关系\"></a>rvm 和 gem 的关系</h5><ul>\n<li>rvm 全称是 Ruby Version Manager，即Ruby 版本管理器。</li>\n<li>gem，即RubyGems，是一个用于对 Ruby 组件进行打包 Ruby 的打包系统，可以从远程服务器下载并安装 Rails。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/Ruby\" target=\"_blank\" rel=\"noopener\">Ruby</a> on Rails 是一个用于开发数据库驱动的网络应用程序的完整框架。Rails基于<a href=\"https://baike.baidu.com/item/MVC\" target=\"_blank\" rel=\"noopener\">MVC</a>（模型- 视图- 控制器）设计模式。从视图中的<a href=\"https://baike.baidu.com/item/Ajax\" target=\"_blank\" rel=\"noopener\">Ajax</a>应用，到控制器中的访问请求和反馈，到封装数据库的模型，Rails 为你提供一个纯Ruby的开发环境。发布网站时，你只需要一个数据库和一个网络服务器即可。</p>\n<p>Ruby On Rails是一个用于编写网络应用程序的软件包.它基于一种计算机软件语言Ruby,给程序开发人员提供了强大的框架支持.你可以用比以前少的多的代码和 短的多的时间编写出一流的网络软件。</p>\n</blockquote>\n<p><strong>查看gem 源</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem source</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>–add SOURCE_URI</td>\n<td>添加源</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>–list</td>\n<td>列表</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>–remove SOURCE_URI</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>–clear-all</td>\n<td>清除所有</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>–update</td>\n<td>更新</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem sources -r http://rubygems.org/ #删除默认的源</span><br><span class=\"line\"></span><br><span class=\"line\">$ gem sources -a https://ruby.taobao.org #添加淘宝源</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Mac OSX 必须要安装的库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install libxml2 libxslt libiconv</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>载入 RVM 环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ source ~/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 RVM 安装 ruby 环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ rvm requirements</span><br><span class=\"line\">$ rvm install 2.3.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Bundler</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem install bundler</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Rails 环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem install rails</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>homebrew 安装 ruby</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install ruby</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>RVM 安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class=\"line\">$ \\curl -sSL https://get.rvm.io | bash -s stable</span><br><span class=\"line\">$ source ~/.bashrc</span><br><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列出以及 ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ rvm list known</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换 ruby 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ rvm use 2.2.0</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n<li><p>修改 RVM 下载 Ruby 的源，到 Ruby China 的镜像:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ echo &quot;ruby_url=https://cache.ruby-china.org/pub/ruby&quot; &gt; ~/.rvm/user/db</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<p>  ​</p>\n"},{"title":"instrument 详解","date":"2014-05-15T15:26:11.000Z","thumbnail":"https://i0.hdslb.com/bfs/drawyoo/08a8f9111655a8a0c2f1dd05ea4f5291692fb08c.jpg","_content":"\n[TOC]\n\n![](instrument.png)\n\n## 一、Blank\n\n\n\n## 二、Activity Monitor（活动监视器）\n\n\n\n## 三、Allocations（内存分配）\n\n![](https://upload-images.jianshu.io/upload_images/325854-060ac29a8dbf6c9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n### 1、程序员对内存关注的点\n\n* 正确使用\n\n  * 避免非法访问\n\n    > 即避免访问被释放掉的内存。release 后不能再 retain。\n\n  * 避免内存泄漏\n\n* 高效使用\n\n  * 降低内存峰值\n  * 处理内存警告\n  * Cache\n\n### 2、Regions（区域）\n\n以下内容参考自 [Stack Overflow](https://stackoverflow.com/questions/13437365/what-is-resident-and-dirty-memory-of-ios!)\n\n视频链接：[iOS内存管理及优化](https://www.imooc.com/video/11075)\n\n* Clean Memory：在闪存中有备份，能够再次读取。主要包括`system framework`、`binary executable of your app`、`memory mapped files`\n* Dirty Memory：所有非`Clean Memory`，**系统无法回收**。包括`Heap allocation`、`caches`、`decompressed images`（解压的图片）\n\n### 3、虚拟内存之间的关系\n\n* 虚拟内存层面：（逻辑内存）\n\n  >  virtual memory = clean memory + dirty memory.\n\n* 物理内存层面：\n\n  > resident memory= dirty memory+clean memory that loaded in physical memory\n\n* 总结：\n\n  > virtual memory == (clean memory + dirty memory) > resident memory >dirty memory\n\n```objective-c\n// clean memory\n- (IBAction)clickAction1{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@\"%p\",buf);\n}\n\n// dirty memory\n- (IBAction)clickAction2{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@\"%p\",buf);\n  for(int i=0; i < 3*1024*1024; ++i){ //分配3M 物理内存，剩余97M 虚拟内存\n    buf[i] = rand();\n  }\n}\n\n- (void)cleanOrDirtyMemory{\n  \n  \tNSString* str1 = [NSString stringWithString:@\"dirty\"];//dirty memory(堆上分配的内存都是 dirty的，不回收的话系统都会占用这个内存)\n    NSString* str2 = @\"w\";//存在只读数据段里面 \n    char *buf = malloc(100*1024*1024); //100M 虚拟内存 (clean，因为我们没有访问到)\n    for(int i=0; i < 3*1024*1024; ++i){ //分配3M 物理内存（dirty），剩余97M 虚拟内存(clean)\n    buf[i] = rand();//dirty\n  }\n}\n```\n\n\n\n### 4、VMTracker：\n\n> ```\n> 官方解释：Adds the Allocations and VM Tracker instruments toyour document. Use this template to monitor memory and object-allocationpatterns in your program \n> ```\n\n* Dirty Size：\n* Swapped Size：\n* Resident Size：\n\n### 5、参数：\n\n* 图形列（Graph）：\n\n  > 当指定类别的复选框被勾选时,instrument工具在跟踪面板里面显示特定类别的图形。 Instruments 应用通常给每个图形类别赋一个颜色。\n\n* 类别(Category)：\n\n  > 通常是一个 Core Foundation 对象、Objective-C 类、或者 malloc 出来的内存空间。\n\n* 净分配字节数(Persistent Bytes)：\n\n  > 当前已经分配内存但是仍然没有被释放的字节的总数。\n\n* 净分配数(#Persistent)：\n\n  > 当前已经分配内存但仍然没有被释放的对象或内存块的数量。\n\n* 临时分配数(#Transient)：\n\n  > 当前已经分配内存但仍然没有被释放的对象或内存块的数量。\n\n* 总分配字节数(Total Bytes)：\n\n  > 所有已经分配内存,而且包括已经被释放了的字节的总数。\n\n* 总分配数(#Total)：\n\n  > 所有当前已经分配内存,包括已经被释放了的对象或内存 块的总数。\n\n* 临时分配/全部内存分配(Transient/Total Bytes)：\n\n  > 当前和全部分配数的直方图。如上图所示当比例变化时,直方条会变颜色，Instruments 应用通常给它们标示不同的颜色来指出分配模式以便进行进一步的研究。\n\n## 四、Cocoa Layout\n\n## 五、Core Animation\n\n## 六、Core Data\n\n## 七、Counters（计数器）\n\n## 八、Energy Log\n\n## 九、File Activity\n\n## 十、Leaks（内存泄漏）\n\n## 十一、Metal System Trace\n\n## 十二、Network\n\n## 十三、SceneKit\n\n## 十四、System Trace（系统跟踪）\n\n## 十五、System Usage\n\n ios 模拟器暂不支持\n\n## 十六、Time profiler\n\n## 十七、Zombies（僵尸）\n\n\n\n","source":"_posts/iOS开发/iOS 开发基础/instrument-详解.md","raw":"---\ntitle: instrument 详解\ndate: 2014-05-15 23:26:11\ntags: instrument\ncategories: iOS开发\nthumbnail: https://i0.hdslb.com/bfs/drawyoo/08a8f9111655a8a0c2f1dd05ea4f5291692fb08c.jpg\n---\n\n[TOC]\n\n![](instrument.png)\n\n## 一、Blank\n\n\n\n## 二、Activity Monitor（活动监视器）\n\n\n\n## 三、Allocations（内存分配）\n\n![](https://upload-images.jianshu.io/upload_images/325854-060ac29a8dbf6c9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n### 1、程序员对内存关注的点\n\n* 正确使用\n\n  * 避免非法访问\n\n    > 即避免访问被释放掉的内存。release 后不能再 retain。\n\n  * 避免内存泄漏\n\n* 高效使用\n\n  * 降低内存峰值\n  * 处理内存警告\n  * Cache\n\n### 2、Regions（区域）\n\n以下内容参考自 [Stack Overflow](https://stackoverflow.com/questions/13437365/what-is-resident-and-dirty-memory-of-ios!)\n\n视频链接：[iOS内存管理及优化](https://www.imooc.com/video/11075)\n\n* Clean Memory：在闪存中有备份，能够再次读取。主要包括`system framework`、`binary executable of your app`、`memory mapped files`\n* Dirty Memory：所有非`Clean Memory`，**系统无法回收**。包括`Heap allocation`、`caches`、`decompressed images`（解压的图片）\n\n### 3、虚拟内存之间的关系\n\n* 虚拟内存层面：（逻辑内存）\n\n  >  virtual memory = clean memory + dirty memory.\n\n* 物理内存层面：\n\n  > resident memory= dirty memory+clean memory that loaded in physical memory\n\n* 总结：\n\n  > virtual memory == (clean memory + dirty memory) > resident memory >dirty memory\n\n```objective-c\n// clean memory\n- (IBAction)clickAction1{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@\"%p\",buf);\n}\n\n// dirty memory\n- (IBAction)clickAction2{\n  char *buf = malloc(100*1024*1024); //100M 虚拟内存\n  NSLog(@\"%p\",buf);\n  for(int i=0; i < 3*1024*1024; ++i){ //分配3M 物理内存，剩余97M 虚拟内存\n    buf[i] = rand();\n  }\n}\n\n- (void)cleanOrDirtyMemory{\n  \n  \tNSString* str1 = [NSString stringWithString:@\"dirty\"];//dirty memory(堆上分配的内存都是 dirty的，不回收的话系统都会占用这个内存)\n    NSString* str2 = @\"w\";//存在只读数据段里面 \n    char *buf = malloc(100*1024*1024); //100M 虚拟内存 (clean，因为我们没有访问到)\n    for(int i=0; i < 3*1024*1024; ++i){ //分配3M 物理内存（dirty），剩余97M 虚拟内存(clean)\n    buf[i] = rand();//dirty\n  }\n}\n```\n\n\n\n### 4、VMTracker：\n\n> ```\n> 官方解释：Adds the Allocations and VM Tracker instruments toyour document. Use this template to monitor memory and object-allocationpatterns in your program \n> ```\n\n* Dirty Size：\n* Swapped Size：\n* Resident Size：\n\n### 5、参数：\n\n* 图形列（Graph）：\n\n  > 当指定类别的复选框被勾选时,instrument工具在跟踪面板里面显示特定类别的图形。 Instruments 应用通常给每个图形类别赋一个颜色。\n\n* 类别(Category)：\n\n  > 通常是一个 Core Foundation 对象、Objective-C 类、或者 malloc 出来的内存空间。\n\n* 净分配字节数(Persistent Bytes)：\n\n  > 当前已经分配内存但是仍然没有被释放的字节的总数。\n\n* 净分配数(#Persistent)：\n\n  > 当前已经分配内存但仍然没有被释放的对象或内存块的数量。\n\n* 临时分配数(#Transient)：\n\n  > 当前已经分配内存但仍然没有被释放的对象或内存块的数量。\n\n* 总分配字节数(Total Bytes)：\n\n  > 所有已经分配内存,而且包括已经被释放了的字节的总数。\n\n* 总分配数(#Total)：\n\n  > 所有当前已经分配内存,包括已经被释放了的对象或内存 块的总数。\n\n* 临时分配/全部内存分配(Transient/Total Bytes)：\n\n  > 当前和全部分配数的直方图。如上图所示当比例变化时,直方条会变颜色，Instruments 应用通常给它们标示不同的颜色来指出分配模式以便进行进一步的研究。\n\n## 四、Cocoa Layout\n\n## 五、Core Animation\n\n## 六、Core Data\n\n## 七、Counters（计数器）\n\n## 八、Energy Log\n\n## 九、File Activity\n\n## 十、Leaks（内存泄漏）\n\n## 十一、Metal System Trace\n\n## 十二、Network\n\n## 十三、SceneKit\n\n## 十四、System Trace（系统跟踪）\n\n## 十五、System Usage\n\n ios 模拟器暂不支持\n\n## 十六、Time profiler\n\n## 十七、Zombies（僵尸）\n\n\n\n","slug":"iOS开发/iOS 开发基础/instrument-详解","published":1,"updated":"2018-01-31T08:46:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkufg0013074mnxil6a10","content":"<p>[TOC]</p>\n<p><img src=\"instrument.png\" alt=\"\"></p>\n<h2 id=\"一、Blank\"><a href=\"#一、Blank\" class=\"headerlink\" title=\"一、Blank\"></a>一、Blank</h2><h2 id=\"二、Activity-Monitor（活动监视器）\"><a href=\"#二、Activity-Monitor（活动监视器）\" class=\"headerlink\" title=\"二、Activity Monitor（活动监视器）\"></a>二、Activity Monitor（活动监视器）</h2><h2 id=\"三、Allocations（内存分配）\"><a href=\"#三、Allocations（内存分配）\" class=\"headerlink\" title=\"三、Allocations（内存分配）\"></a>三、Allocations（内存分配）</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/325854-060ac29a8dbf6c9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"\"></p>\n<h3 id=\"1、程序员对内存关注的点\"><a href=\"#1、程序员对内存关注的点\" class=\"headerlink\" title=\"1、程序员对内存关注的点\"></a>1、程序员对内存关注的点</h3><ul>\n<li><p>正确使用</p>\n<ul>\n<li><p>避免非法访问</p>\n<blockquote>\n<p>即避免访问被释放掉的内存。release 后不能再 retain。</p>\n</blockquote>\n</li>\n<li><p>避免内存泄漏</p>\n</li>\n</ul>\n</li>\n<li><p>高效使用</p>\n<ul>\n<li>降低内存峰值</li>\n<li>处理内存警告</li>\n<li>Cache</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、Regions（区域）\"><a href=\"#2、Regions（区域）\" class=\"headerlink\" title=\"2、Regions（区域）\"></a>2、Regions（区域）</h3><p>以下内容参考自 <a href=\"https://stackoverflow.com/questions/13437365/what-is-resident-and-dirty-memory-of-ios!\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a></p>\n<p>视频链接：<a href=\"https://www.imooc.com/video/11075\" target=\"_blank\" rel=\"noopener\">iOS内存管理及优化</a></p>\n<ul>\n<li>Clean Memory：在闪存中有备份，能够再次读取。主要包括<code>system framework</code>、<code>binary executable of your app</code>、<code>memory mapped files</code></li>\n<li>Dirty Memory：所有非<code>Clean Memory</code>，<strong>系统无法回收</strong>。包括<code>Heap allocation</code>、<code>caches</code>、<code>decompressed images</code>（解压的图片）</li>\n</ul>\n<h3 id=\"3、虚拟内存之间的关系\"><a href=\"#3、虚拟内存之间的关系\" class=\"headerlink\" title=\"3、虚拟内存之间的关系\"></a>3、虚拟内存之间的关系</h3><ul>\n<li><p>虚拟内存层面：（逻辑内存）</p>\n<blockquote>\n<p> virtual memory = clean memory + dirty memory.</p>\n</blockquote>\n</li>\n<li><p>物理内存层面：</p>\n<blockquote>\n<p>resident memory= dirty memory+clean memory that loaded in physical memory</p>\n</blockquote>\n</li>\n<li><p>总结：</p>\n<blockquote>\n<p>virtual memory == (clean memory + dirty memory) &gt; resident memory &gt;dirty memory</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// clean memory</span><br><span class=\"line\">- (IBAction)clickAction1&#123;</span><br><span class=\"line\">  char *buf = malloc(100*1024*1024); //100M 虚拟内存</span><br><span class=\"line\">  NSLog(@&quot;%p&quot;,buf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// dirty memory</span><br><span class=\"line\">- (IBAction)clickAction2&#123;</span><br><span class=\"line\">  char *buf = malloc(100*1024*1024); //100M 虚拟内存</span><br><span class=\"line\">  NSLog(@&quot;%p&quot;,buf);</span><br><span class=\"line\">  for(int i=0; i &lt; 3*1024*1024; ++i)&#123; //分配3M 物理内存，剩余97M 虚拟内存</span><br><span class=\"line\">    buf[i] = rand();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)cleanOrDirtyMemory&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  \tNSString* str1 = [NSString stringWithString:@&quot;dirty&quot;];//dirty memory(堆上分配的内存都是 dirty的，不回收的话系统都会占用这个内存)</span><br><span class=\"line\">    NSString* str2 = @&quot;w&quot;;//存在只读数据段里面 </span><br><span class=\"line\">    char *buf = malloc(100*1024*1024); //100M 虚拟内存 (clean，因为我们没有访问到)</span><br><span class=\"line\">    for(int i=0; i &lt; 3*1024*1024; ++i)&#123; //分配3M 物理内存（dirty），剩余97M 虚拟内存(clean)</span><br><span class=\"line\">    buf[i] = rand();//dirty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、VMTracker：\"><a href=\"#4、VMTracker：\" class=\"headerlink\" title=\"4、VMTracker：\"></a>4、VMTracker：</h3><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; 官方解释：Adds the Allocations and VM Tracker instruments toyour document. Use this template to monitor memory and object-allocationpatterns in your program </span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>Dirty Size：</li>\n<li>Swapped Size：</li>\n<li>Resident Size：</li>\n</ul>\n<h3 id=\"5、参数：\"><a href=\"#5、参数：\" class=\"headerlink\" title=\"5、参数：\"></a>5、参数：</h3><ul>\n<li><p>图形列（Graph）：</p>\n<blockquote>\n<p>当指定类别的复选框被勾选时,instrument工具在跟踪面板里面显示特定类别的图形。 Instruments 应用通常给每个图形类别赋一个颜色。</p>\n</blockquote>\n</li>\n<li><p>类别(Category)：</p>\n<blockquote>\n<p>通常是一个 Core Foundation 对象、Objective-C 类、或者 malloc 出来的内存空间。</p>\n</blockquote>\n</li>\n<li><p>净分配字节数(Persistent Bytes)：</p>\n<blockquote>\n<p>当前已经分配内存但是仍然没有被释放的字节的总数。</p>\n</blockquote>\n</li>\n<li><p>净分配数(#Persistent)：</p>\n<blockquote>\n<p>当前已经分配内存但仍然没有被释放的对象或内存块的数量。</p>\n</blockquote>\n</li>\n<li><p>临时分配数(#Transient)：</p>\n<blockquote>\n<p>当前已经分配内存但仍然没有被释放的对象或内存块的数量。</p>\n</blockquote>\n</li>\n<li><p>总分配字节数(Total Bytes)：</p>\n<blockquote>\n<p>所有已经分配内存,而且包括已经被释放了的字节的总数。</p>\n</blockquote>\n</li>\n<li><p>总分配数(#Total)：</p>\n<blockquote>\n<p>所有当前已经分配内存,包括已经被释放了的对象或内存 块的总数。</p>\n</blockquote>\n</li>\n<li><p>临时分配/全部内存分配(Transient/Total Bytes)：</p>\n<blockquote>\n<p>当前和全部分配数的直方图。如上图所示当比例变化时,直方条会变颜色，Instruments 应用通常给它们标示不同的颜色来指出分配模式以便进行进一步的研究。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、Cocoa-Layout\"><a href=\"#四、Cocoa-Layout\" class=\"headerlink\" title=\"四、Cocoa Layout\"></a>四、Cocoa Layout</h2><h2 id=\"五、Core-Animation\"><a href=\"#五、Core-Animation\" class=\"headerlink\" title=\"五、Core Animation\"></a>五、Core Animation</h2><h2 id=\"六、Core-Data\"><a href=\"#六、Core-Data\" class=\"headerlink\" title=\"六、Core Data\"></a>六、Core Data</h2><h2 id=\"七、Counters（计数器）\"><a href=\"#七、Counters（计数器）\" class=\"headerlink\" title=\"七、Counters（计数器）\"></a>七、Counters（计数器）</h2><h2 id=\"八、Energy-Log\"><a href=\"#八、Energy-Log\" class=\"headerlink\" title=\"八、Energy Log\"></a>八、Energy Log</h2><h2 id=\"九、File-Activity\"><a href=\"#九、File-Activity\" class=\"headerlink\" title=\"九、File Activity\"></a>九、File Activity</h2><h2 id=\"十、Leaks（内存泄漏）\"><a href=\"#十、Leaks（内存泄漏）\" class=\"headerlink\" title=\"十、Leaks（内存泄漏）\"></a>十、Leaks（内存泄漏）</h2><h2 id=\"十一、Metal-System-Trace\"><a href=\"#十一、Metal-System-Trace\" class=\"headerlink\" title=\"十一、Metal System Trace\"></a>十一、Metal System Trace</h2><h2 id=\"十二、Network\"><a href=\"#十二、Network\" class=\"headerlink\" title=\"十二、Network\"></a>十二、Network</h2><h2 id=\"十三、SceneKit\"><a href=\"#十三、SceneKit\" class=\"headerlink\" title=\"十三、SceneKit\"></a>十三、SceneKit</h2><h2 id=\"十四、System-Trace（系统跟踪）\"><a href=\"#十四、System-Trace（系统跟踪）\" class=\"headerlink\" title=\"十四、System Trace（系统跟踪）\"></a>十四、System Trace（系统跟踪）</h2><h2 id=\"十五、System-Usage\"><a href=\"#十五、System-Usage\" class=\"headerlink\" title=\"十五、System Usage\"></a>十五、System Usage</h2><p> ios 模拟器暂不支持</p>\n<h2 id=\"十六、Time-profiler\"><a href=\"#十六、Time-profiler\" class=\"headerlink\" title=\"十六、Time profiler\"></a>十六、Time profiler</h2><h2 id=\"十七、Zombies（僵尸）\"><a href=\"#十七、Zombies（僵尸）\" class=\"headerlink\" title=\"十七、Zombies（僵尸）\"></a>十七、Zombies（僵尸）</h2>","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<p>[TOC]</p>\n<p><img src=\"instrument.png\" alt=\"\"></p>\n<h2 id=\"一、Blank\"><a href=\"#一、Blank\" class=\"headerlink\" title=\"一、Blank\"></a>一、Blank</h2><h2 id=\"二、Activity-Monitor（活动监视器）\"><a href=\"#二、Activity-Monitor（活动监视器）\" class=\"headerlink\" title=\"二、Activity Monitor（活动监视器）\"></a>二、Activity Monitor（活动监视器）</h2><h2 id=\"三、Allocations（内存分配）\"><a href=\"#三、Allocations（内存分配）\" class=\"headerlink\" title=\"三、Allocations（内存分配）\"></a>三、Allocations（内存分配）</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/325854-060ac29a8dbf6c9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"\"></p>\n<h3 id=\"1、程序员对内存关注的点\"><a href=\"#1、程序员对内存关注的点\" class=\"headerlink\" title=\"1、程序员对内存关注的点\"></a>1、程序员对内存关注的点</h3><ul>\n<li><p>正确使用</p>\n<ul>\n<li><p>避免非法访问</p>\n<blockquote>\n<p>即避免访问被释放掉的内存。release 后不能再 retain。</p>\n</blockquote>\n</li>\n<li><p>避免内存泄漏</p>\n</li>\n</ul>\n</li>\n<li><p>高效使用</p>\n<ul>\n<li>降低内存峰值</li>\n<li>处理内存警告</li>\n<li>Cache</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、Regions（区域）\"><a href=\"#2、Regions（区域）\" class=\"headerlink\" title=\"2、Regions（区域）\"></a>2、Regions（区域）</h3><p>以下内容参考自 <a href=\"https://stackoverflow.com/questions/13437365/what-is-resident-and-dirty-memory-of-ios!\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a></p>\n<p>视频链接：<a href=\"https://www.imooc.com/video/11075\" target=\"_blank\" rel=\"noopener\">iOS内存管理及优化</a></p>\n<ul>\n<li>Clean Memory：在闪存中有备份，能够再次读取。主要包括<code>system framework</code>、<code>binary executable of your app</code>、<code>memory mapped files</code></li>\n<li>Dirty Memory：所有非<code>Clean Memory</code>，<strong>系统无法回收</strong>。包括<code>Heap allocation</code>、<code>caches</code>、<code>decompressed images</code>（解压的图片）</li>\n</ul>\n<h3 id=\"3、虚拟内存之间的关系\"><a href=\"#3、虚拟内存之间的关系\" class=\"headerlink\" title=\"3、虚拟内存之间的关系\"></a>3、虚拟内存之间的关系</h3><ul>\n<li><p>虚拟内存层面：（逻辑内存）</p>\n<blockquote>\n<p> virtual memory = clean memory + dirty memory.</p>\n</blockquote>\n</li>\n<li><p>物理内存层面：</p>\n<blockquote>\n<p>resident memory= dirty memory+clean memory that loaded in physical memory</p>\n</blockquote>\n</li>\n<li><p>总结：</p>\n<blockquote>\n<p>virtual memory == (clean memory + dirty memory) &gt; resident memory &gt;dirty memory</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// clean memory</span><br><span class=\"line\">- (IBAction)clickAction1&#123;</span><br><span class=\"line\">  char *buf = malloc(100*1024*1024); //100M 虚拟内存</span><br><span class=\"line\">  NSLog(@&quot;%p&quot;,buf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// dirty memory</span><br><span class=\"line\">- (IBAction)clickAction2&#123;</span><br><span class=\"line\">  char *buf = malloc(100*1024*1024); //100M 虚拟内存</span><br><span class=\"line\">  NSLog(@&quot;%p&quot;,buf);</span><br><span class=\"line\">  for(int i=0; i &lt; 3*1024*1024; ++i)&#123; //分配3M 物理内存，剩余97M 虚拟内存</span><br><span class=\"line\">    buf[i] = rand();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)cleanOrDirtyMemory&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  \tNSString* str1 = [NSString stringWithString:@&quot;dirty&quot;];//dirty memory(堆上分配的内存都是 dirty的，不回收的话系统都会占用这个内存)</span><br><span class=\"line\">    NSString* str2 = @&quot;w&quot;;//存在只读数据段里面 </span><br><span class=\"line\">    char *buf = malloc(100*1024*1024); //100M 虚拟内存 (clean，因为我们没有访问到)</span><br><span class=\"line\">    for(int i=0; i &lt; 3*1024*1024; ++i)&#123; //分配3M 物理内存（dirty），剩余97M 虚拟内存(clean)</span><br><span class=\"line\">    buf[i] = rand();//dirty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、VMTracker：\"><a href=\"#4、VMTracker：\" class=\"headerlink\" title=\"4、VMTracker：\"></a>4、VMTracker：</h3><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; 官方解释：Adds the Allocations and VM Tracker instruments toyour document. Use this template to monitor memory and object-allocationpatterns in your program </span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>Dirty Size：</li>\n<li>Swapped Size：</li>\n<li>Resident Size：</li>\n</ul>\n<h3 id=\"5、参数：\"><a href=\"#5、参数：\" class=\"headerlink\" title=\"5、参数：\"></a>5、参数：</h3><ul>\n<li><p>图形列（Graph）：</p>\n<blockquote>\n<p>当指定类别的复选框被勾选时,instrument工具在跟踪面板里面显示特定类别的图形。 Instruments 应用通常给每个图形类别赋一个颜色。</p>\n</blockquote>\n</li>\n<li><p>类别(Category)：</p>\n<blockquote>\n<p>通常是一个 Core Foundation 对象、Objective-C 类、或者 malloc 出来的内存空间。</p>\n</blockquote>\n</li>\n<li><p>净分配字节数(Persistent Bytes)：</p>\n<blockquote>\n<p>当前已经分配内存但是仍然没有被释放的字节的总数。</p>\n</blockquote>\n</li>\n<li><p>净分配数(#Persistent)：</p>\n<blockquote>\n<p>当前已经分配内存但仍然没有被释放的对象或内存块的数量。</p>\n</blockquote>\n</li>\n<li><p>临时分配数(#Transient)：</p>\n<blockquote>\n<p>当前已经分配内存但仍然没有被释放的对象或内存块的数量。</p>\n</blockquote>\n</li>\n<li><p>总分配字节数(Total Bytes)：</p>\n<blockquote>\n<p>所有已经分配内存,而且包括已经被释放了的字节的总数。</p>\n</blockquote>\n</li>\n<li><p>总分配数(#Total)：</p>\n<blockquote>\n<p>所有当前已经分配内存,包括已经被释放了的对象或内存 块的总数。</p>\n</blockquote>\n</li>\n<li><p>临时分配/全部内存分配(Transient/Total Bytes)：</p>\n<blockquote>\n<p>当前和全部分配数的直方图。如上图所示当比例变化时,直方条会变颜色，Instruments 应用通常给它们标示不同的颜色来指出分配模式以便进行进一步的研究。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、Cocoa-Layout\"><a href=\"#四、Cocoa-Layout\" class=\"headerlink\" title=\"四、Cocoa Layout\"></a>四、Cocoa Layout</h2><h2 id=\"五、Core-Animation\"><a href=\"#五、Core-Animation\" class=\"headerlink\" title=\"五、Core Animation\"></a>五、Core Animation</h2><h2 id=\"六、Core-Data\"><a href=\"#六、Core-Data\" class=\"headerlink\" title=\"六、Core Data\"></a>六、Core Data</h2><h2 id=\"七、Counters（计数器）\"><a href=\"#七、Counters（计数器）\" class=\"headerlink\" title=\"七、Counters（计数器）\"></a>七、Counters（计数器）</h2><h2 id=\"八、Energy-Log\"><a href=\"#八、Energy-Log\" class=\"headerlink\" title=\"八、Energy Log\"></a>八、Energy Log</h2><h2 id=\"九、File-Activity\"><a href=\"#九、File-Activity\" class=\"headerlink\" title=\"九、File Activity\"></a>九、File Activity</h2><h2 id=\"十、Leaks（内存泄漏）\"><a href=\"#十、Leaks（内存泄漏）\" class=\"headerlink\" title=\"十、Leaks（内存泄漏）\"></a>十、Leaks（内存泄漏）</h2><h2 id=\"十一、Metal-System-Trace\"><a href=\"#十一、Metal-System-Trace\" class=\"headerlink\" title=\"十一、Metal System Trace\"></a>十一、Metal System Trace</h2><h2 id=\"十二、Network\"><a href=\"#十二、Network\" class=\"headerlink\" title=\"十二、Network\"></a>十二、Network</h2><h2 id=\"十三、SceneKit\"><a href=\"#十三、SceneKit\" class=\"headerlink\" title=\"十三、SceneKit\"></a>十三、SceneKit</h2><h2 id=\"十四、System-Trace（系统跟踪）\"><a href=\"#十四、System-Trace（系统跟踪）\" class=\"headerlink\" title=\"十四、System Trace（系统跟踪）\"></a>十四、System Trace（系统跟踪）</h2><h2 id=\"十五、System-Usage\"><a href=\"#十五、System-Usage\" class=\"headerlink\" title=\"十五、System Usage\"></a>十五、System Usage</h2><p> ios 模拟器暂不支持</p>\n<h2 id=\"十六、Time-profiler\"><a href=\"#十六、Time-profiler\" class=\"headerlink\" title=\"十六、Time profiler\"></a>十六、Time profiler</h2><h2 id=\"十七、Zombies（僵尸）\"><a href=\"#十七、Zombies（僵尸）\" class=\"headerlink\" title=\"十七、Zombies（僵尸）\"></a>十七、Zombies（僵尸）</h2>"},{"title":"ios HTTP请求","date":"2014-05-16T12:56:40.000Z","thumbnail":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3584732535,1447982096&fm=27&gp=0.jpg","_content":"\niOS9引入了新特性 [App Transport Security (ATS)](https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13)，所以需要在 Info.plist加入NSAppTransportSecurity 字典的 AllowsArbitraryLoads key的值为 BOOL。\n\n\n\n# POST 请求\n\n早期还有NSURLConnection方法，iOS 9 以后被淘汰了，有几个代理方法不能用了（同步请求，异步请求）\n\n\n\n原生方法：\n\n```objective-c\n    NSURL* url = [NSURL URLWithString:HomeUrl]; //url\n    NSURLRequest* request = [NSURLRequest requestWithURL:url];//请求\n    NSURLSession* session = [NSURLSession sharedSession]; //session\n    NSURLSessionDataTask* task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {\n        if(error){\n            \n            NSLog(@\"请求失败\");\n        }\n        else{\n            \n            NSLog(@\"请求成功\");\n            NSString *receiveStr = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];\n            \n            NSData * jsonData = [receiveStr dataUsingEncoding:NSUTF8StringEncoding];\n            \n            NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableLeaves error:nil];\n        }\n    }];\n    [task resume];\n```\n\n\n\n\n\n\n\n","source":"_posts/iOS开发/iOS 开发基础/ios-HTTP请求.md","raw":"---\ntitle: ios HTTP请求\ndate: 2014-05-16 20:56:40\ntags: 网络请求\ncategories: iOS开发\nthumbnail: https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3584732535,1447982096&fm=27&gp=0.jpg\n---\n\niOS9引入了新特性 [App Transport Security (ATS)](https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13)，所以需要在 Info.plist加入NSAppTransportSecurity 字典的 AllowsArbitraryLoads key的值为 BOOL。\n\n\n\n# POST 请求\n\n早期还有NSURLConnection方法，iOS 9 以后被淘汰了，有几个代理方法不能用了（同步请求，异步请求）\n\n\n\n原生方法：\n\n```objective-c\n    NSURL* url = [NSURL URLWithString:HomeUrl]; //url\n    NSURLRequest* request = [NSURLRequest requestWithURL:url];//请求\n    NSURLSession* session = [NSURLSession sharedSession]; //session\n    NSURLSessionDataTask* task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {\n        if(error){\n            \n            NSLog(@\"请求失败\");\n        }\n        else{\n            \n            NSLog(@\"请求成功\");\n            NSString *receiveStr = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];\n            \n            NSData * jsonData = [receiveStr dataUsingEncoding:NSUTF8StringEncoding];\n            \n            NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableLeaves error:nil];\n        }\n    }];\n    [task resume];\n```\n\n\n\n\n\n\n\n","slug":"iOS开发/iOS 开发基础/ios-HTTP请求","published":1,"updated":"2018-01-31T08:46:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkufh0014074mszenwvtk","content":"<p>iOS9引入了新特性 <a href=\"https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13\" target=\"_blank\" rel=\"noopener\">App Transport Security (ATS)</a>，所以需要在 Info.plist加入NSAppTransportSecurity 字典的 AllowsArbitraryLoads key的值为 BOOL。</p>\n<h1 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h1><p>早期还有NSURLConnection方法，iOS 9 以后被淘汰了，有几个代理方法不能用了（同步请求，异步请求）</p>\n<p>原生方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSURL* url = [NSURL URLWithString:HomeUrl]; //url</span><br><span class=\"line\">NSURLRequest* request = [NSURLRequest requestWithURL:url];//请求</span><br><span class=\"line\">NSURLSession* session = [NSURLSession sharedSession]; //session</span><br><span class=\"line\">NSURLSessionDataTask* task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSLog(@&quot;请求失败&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSLog(@&quot;请求成功&quot;);</span><br><span class=\"line\">        NSString *receiveStr = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSData * jsonData = [receiveStr dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableLeaves error:nil];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">[task resume];</span><br></pre></td></tr></table></figure>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<p>iOS9引入了新特性 <a href=\"https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13\" target=\"_blank\" rel=\"noopener\">App Transport Security (ATS)</a>，所以需要在 Info.plist加入NSAppTransportSecurity 字典的 AllowsArbitraryLoads key的值为 BOOL。</p>\n<h1 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h1><p>早期还有NSURLConnection方法，iOS 9 以后被淘汰了，有几个代理方法不能用了（同步请求，异步请求）</p>\n<p>原生方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSURL* url = [NSURL URLWithString:HomeUrl]; //url</span><br><span class=\"line\">NSURLRequest* request = [NSURLRequest requestWithURL:url];//请求</span><br><span class=\"line\">NSURLSession* session = [NSURLSession sharedSession]; //session</span><br><span class=\"line\">NSURLSessionDataTask* task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class=\"line\">    if(error)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSLog(@&quot;请求失败&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSLog(@&quot;请求成功&quot;);</span><br><span class=\"line\">        NSString *receiveStr = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSData * jsonData = [receiveStr dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableLeaves error:nil];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">[task resume];</span><br></pre></td></tr></table></figure>\n"},{"title":"weak和 strong","date":"2014-05-20T02:53:58.000Z","thumbnail":"https://i0.hdslb.com/bfs/vc/f5c4831af0acac49b5e45d974c2313a09aee5851.jpg","_content":"\n\n\n@property中 weak 和 strong 的使用先看两段代码：\n\n```Objective-c\n@interface ViewController ()\n\n@property (nonatomic,strong)UIButton *button1;\n\n@end\n\n@implementation ViewController\n\n-(UIButton *)button1{\n    if (!_button1) {\n_button1=[UIButton buttonWithType:UIButtonTypeCustom];\n        _button1.frame=CGRectMake(50, 50, 100, 100);\n        [_button1 setTitle:@\"第一个\" forState:UIControlStateNormal];\n_button1.backgroundColor=[UIColor redColor];\n    }\nreturn _button1;\n\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button1];\n}\n\n@end\n```\n\n```objectivec\n@interface ViewController ()\n\n@property (nonatomic,weak) UIButton *button2;\n\n@end\n  \n@implementation ViewController\n\n-(UIButton *)button2{ \n\t\n    UIButton *btn=[UIButton buttonWithType:UIButtonTypeCustom];\n    btn.frame=CGRectMake(100, 100, 100, 100);\n    [btn setTitle:@\"第二个\" forState:UIControlStateNormal];\n    btn.backgroundColor=[UIColor yellowColor];\n    return btn;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button2];\n}\n\n@end\n```\n\n\n\n\n\n\n\n\n\n@property：strong：视图被移除时，因为有强引用指向他，所以不再次释放一下，则引用计数就是1\n\n\n\n@property：weak：从父视图移除时，这个 button 就直接释放了，因为是弱引用，所以不对引用计数造成影响（就像 assign）（xib 用 weak）\n\n\n\nweak 的机制：weak 变量能够在引用计数为 0 时被自动设置成 nil，显然是有运行时逻辑在工作的。\n\n","source":"_posts/iOS开发/iOS 开发基础/weak和-strong.md","raw":"---\ntitle: weak和 strong\ndate: 2014-05-20 10:53:58\ntags: weak&strong\ncategories: iOS开发\nthumbnail: https://i0.hdslb.com/bfs/vc/f5c4831af0acac49b5e45d974c2313a09aee5851.jpg\n---\n\n\n\n@property中 weak 和 strong 的使用先看两段代码：\n\n```Objective-c\n@interface ViewController ()\n\n@property (nonatomic,strong)UIButton *button1;\n\n@end\n\n@implementation ViewController\n\n-(UIButton *)button1{\n    if (!_button1) {\n_button1=[UIButton buttonWithType:UIButtonTypeCustom];\n        _button1.frame=CGRectMake(50, 50, 100, 100);\n        [_button1 setTitle:@\"第一个\" forState:UIControlStateNormal];\n_button1.backgroundColor=[UIColor redColor];\n    }\nreturn _button1;\n\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button1];\n}\n\n@end\n```\n\n```objectivec\n@interface ViewController ()\n\n@property (nonatomic,weak) UIButton *button2;\n\n@end\n  \n@implementation ViewController\n\n-(UIButton *)button2{ \n\t\n    UIButton *btn=[UIButton buttonWithType:UIButtonTypeCustom];\n    btn.frame=CGRectMake(100, 100, 100, 100);\n    [btn setTitle:@\"第二个\" forState:UIControlStateNormal];\n    btn.backgroundColor=[UIColor yellowColor];\n    return btn;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self.view addSubview:self.button2];\n}\n\n@end\n```\n\n\n\n\n\n\n\n\n\n@property：strong：视图被移除时，因为有强引用指向他，所以不再次释放一下，则引用计数就是1\n\n\n\n@property：weak：从父视图移除时，这个 button 就直接释放了，因为是弱引用，所以不对引用计数造成影响（就像 assign）（xib 用 weak）\n\n\n\nweak 的机制：weak 变量能够在引用计数为 0 时被自动设置成 nil，显然是有运行时逻辑在工作的。\n\n","slug":"iOS开发/iOS 开发基础/weak和-strong","published":1,"updated":"2018-01-31T08:46:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkufi0017074mqb44xshe","content":"<p>@property中 weak 和 strong 的使用先看两段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@interface ViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic,strong)UIButton *button1;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ViewController</span><br><span class=\"line\"></span><br><span class=\"line\">-(UIButton *)button1&#123;</span><br><span class=\"line\">    if (!_button1) &#123;</span><br><span class=\"line\">_button1=[UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class=\"line\">        _button1.frame=CGRectMake(50, 50, 100, 100);</span><br><span class=\"line\">        [_button1 setTitle:@&quot;第一个&quot; forState:UIControlStateNormal];</span><br><span class=\"line\">_button1.backgroundColor=[UIColor redColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">return _button1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    [self.view addSubview:self.button1];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">weak</span>) <span class=\"built_in\">UIButton</span> *button2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"built_in\">UIButton</span> *)button2&#123; </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">UIButton</span> *btn=[<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</span><br><span class=\"line\">    btn.frame=<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    [btn setTitle:<span class=\"string\">@\"第二个\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    btn.backgroundColor=[<span class=\"built_in\">UIColor</span> yellowColor];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> btn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.button2];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>@property：strong：视图被移除时，因为有强引用指向他，所以不再次释放一下，则引用计数就是1</p>\n<p>@property：weak：从父视图移除时，这个 button 就直接释放了，因为是弱引用，所以不对引用计数造成影响（就像 assign）（xib 用 weak）</p>\n<p>weak 的机制：weak 变量能够在引用计数为 0 时被自动设置成 nil，显然是有运行时逻辑在工作的。</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<p>@property中 weak 和 strong 的使用先看两段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@interface ViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic,strong)UIButton *button1;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ViewController</span><br><span class=\"line\"></span><br><span class=\"line\">-(UIButton *)button1&#123;</span><br><span class=\"line\">    if (!_button1) &#123;</span><br><span class=\"line\">_button1=[UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class=\"line\">        _button1.frame=CGRectMake(50, 50, 100, 100);</span><br><span class=\"line\">        [_button1 setTitle:@&quot;第一个&quot; forState:UIControlStateNormal];</span><br><span class=\"line\">_button1.backgroundColor=[UIColor redColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">return _button1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    [self.view addSubview:self.button1];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">weak</span>) <span class=\"built_in\">UIButton</span> *button2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"built_in\">UIButton</span> *)button2&#123; </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">UIButton</span> *btn=[<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</span><br><span class=\"line\">    btn.frame=<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    [btn setTitle:<span class=\"string\">@\"第二个\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">    btn.backgroundColor=[<span class=\"built_in\">UIColor</span> yellowColor];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> btn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.button2];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>@property：strong：视图被移除时，因为有强引用指向他，所以不再次释放一下，则引用计数就是1</p>\n<p>@property：weak：从父视图移除时，这个 button 就直接释放了，因为是弱引用，所以不对引用计数造成影响（就像 assign）（xib 用 weak）</p>\n<p>weak 的机制：weak 变量能够在引用计数为 0 时被自动设置成 nil，显然是有运行时逻辑在工作的。</p>\n"},{"title":" 闭包、lambda 计算、block","date":"2014-05-15T07:07:23.000Z","thumbnail":"https://i0.hdslb.com/bfs/vc/493788433bf17760555a4881fcfbf2c24fbec23e.jpg","_content":"\n# block\n\n导读：\n\n* 什么是 block？\n* block 基本原理是什么？\n* 使用 block 需要避免哪些问题？\n\n\n\n##1、什么是 block\n\n###（1）Block\n\nblock 概念：block是带有**自动变量值**的**匿名函数**。也称为闭包（closure）、lambda 计算。\n\nC语言的标注不允许存在这样的函数，但是可以通过函数指针来直接调用函数。\n\n```c \n// 声明一个函数\nint func(int count);      \n\n// 声明一个函数指针，并取出 func 的地址赋给 *funcP\nint (*funcP)(int count) = &func;   //注：函数形参可有可无，视情况而定\n\n// 通过函数名访问这个函数\nint result1 = func(10);   \n\n// 通过函数的指针访问这个函数\nint result2 = (*funcP)(10);\n```\n\n\n\n### （2）函数指针的用途：\n\n函数指针的用途有两个：\n\n* 调用函数\n* 作为函数的参数\n\n>```c++\n>Class* a; // a 是个对象，类型是指针\n>Class *a; // a 是个指针，类型是类\n>\n>/* \n> *  虽然上述写法均表示声明一个指针型变量，但是着重点不同。\n> *  前者意在声明一个变量，后者意在声明一个指针。\n> *  这种自行体会就好，不要拘泥于写法。\n> */\n>```\n\n\n\n### （3）悬浮指针的出现及避免\n\n声明一个指针需要注意的问题：\n\n* 避免出现**悬浮指针**（也称迷途指针、失控指针）\n\n悬浮指针的出现：dealloc 一个指针后，没有把指针置空（nil）。\n\n*如果再次调用该指针并没有重新赋值，就会出现问题*。\n\n> 注意：空指针 ！= 迷途指针。空指针指向的地址为空。\n\n> 指针的指针即本身\n\n\n\n### （4）函数中可能使用的变量：\n\n* 函数的参数\n\n* 局部变量（自动变量）\n\n* 静态变量（静态局部变量）\n\n* 全局变量\n\n* 静态全局变量\n\n  > 使用全局变量会占用更多的内存（因为其生命期长），不过在计算机配置很高的今天，这个不应该算什么问题，除非使用的是巨大对象的全局变量，能避免就一定要避免。\n\n\n\n### （5）OC 中函数和方法的区别\n\n函数和对象无关，方法和对象有关。最主要的是，函数和方法写法不一样啊！\n\n> 函数是指把一个值通过一系列计算得到一个新的值。\n>\n> 而方法更多考虑的是事情。如让一个人通过一系列动作制造一个新的东西。\n\n\n\n### （6）为什么 Block 可以作为函数参数和返回值？\n\n函数的参数和返回值可以是 void、int，也可以是一个类对象，当然也可以是指针（int* char*）。而 block 为什么可以作为函数的参数甚至是返回值呢？\n\n**因为block的本质是 OC 对象。**（OC 的 层面）\n\nblock的实质是**栈**上 block 的结构体实例。（C 的层面）这里也可以理解为是一个函数指针。\n\n> ```objective-c\n> typedef int(^blk_t)(int); // 声明一个参数为 int 型、返回值为 int 型的 blk_t类型\n> blk_t blk = ^(int count){return count+1;};// 声明一个 blk 变量\n> int (^blk)(int) = ^(int count){return count+1;};// 等价于第二行\n>\n> blk_t *blkptr = &blk;// 声明一个名为 blkptr 的 blk_t型的指针，并指向 blk 的地址。\n>\n> (*blkptr)(10); // 利用指针调用这个 blk\n> blk(10); // 直接调用这个 blk\n> ```\n\n\n\n### （7）__block 说明符\n\n引入`__block`的目的是用来声明变量的作用域的，意思就是 block 外用`__block`声明的变量，block 内也能访问到。虽然这货和全局变量有些类似，但是老机器全局变量用多了会导致浪费内存啊！（因为全局变量生命周期比较长）。\n\n吐槽：乖乖用__block吧，特大的对象做全局变量的时候，也是会出现问题的。\n\n\n\n### （8）block 的实质\n\nblock的实质是**栈**上 block 的结构体实例。（吐槽，说白了就是通过指针访问的）\n\n（写一个代码用 clang rewrite 一下就明白了，因为有 Foundation 框架，一个5行的代码能重写成将近10万行。。不过核心代码在最后几行，翻到最后看就可以了）\n\n> 重写代码的时候会发现有三个结构体，一个是`__block_imp1 `另一个是`__main_block_imp1_0`还有一个是`__main_block_desc_0`\n>\n> 这里面引申一个概念就是 IMP 和SEL，具体以后再分析(runtime)，知道SEL 表示（选择器） IMP 表示*函数指针*就可以了。\n\n\n\n`__block`的实质是栈上`__block`变量的结构体实例。\n\n```objective-c\n// block的实质结构\ntypedef objc_class *Class; //Class 为 objc_class 结构体的指针类型\n\ntypedef struct objc_object{\n  Class isa;\n} *id; //id为 objc_objec 结构体的指针类型\n```\n\n\n\n将 block源码转换为 C++源码：`clang -rewrite-objc filename`\n\n| __block变量的配置存储域 | Block 从栈复制到堆是的影响  |\n| --------------- | ----------------- |\n| 栈（stack）        | 从栈复制到堆并被 Block 持有 |\n| 堆（heap/maclloc） | 被 Block 持有        |\n\n栈上的 block ：变量作用域结束时，栈上的 __block变量和 block 被废弃\n\n堆上的 block：变量作用域结束时不受影响，需要手动释放。 \n\n\n\n## block 循环引用的问题\n\n如果在 Block 中使用__strong修饰的对象和变量，那么当 Block 从栈复制到堆上的时候，该对象就会被 Block所持有。这样就会引起循环引用。\n\n> 循环引用这里有个重点，Block 是存储在栈上的，普通对象和变量是存储在堆上的。堆（malloc）上的内存需要我们手动管理（需要 dealloc），而栈上的内存顾名思义是按照数据结构中栈的方式管理，即由系统进行分配。\n\n\n\n**对象持有 block => block持有 self => self 持有对象，即形成循环引用。**（这里的 self 也包含当前类的其他属性，因为在调用属性的同时也截获了 self）。\n\n> 编译器能查出循环引用。\n\n## copy release\n\nARC 无效的时候，我们需要手动将 Block 从栈复制到堆。\n\n因为 ARC 无效，所以需要我们手动释放复制的 Block。\n\n这个时候我们用 copy 方法来复制，release 方法来释放。\n\n```objective-c\nvoid (^block_on_heap)(void) = [block_on_stack copy];//正常复制\n\n[block_on_heap release];//正常释放\n\n[block_on_heap retain]; // 因为block 在堆上，所以可以被 retain\n\n[block_on_stack retain];// 因为现在 block 在栈上，所以这个方法没用\n```\n\n\n\n> ARC 是苹果公司在iOS 5 以后推出的内存管理机制。。iOS 5以前是手动管理的。。如果还问我 ARC 的话，那我基本不考虑你们公司了。。。。\n\n\n\n## __block的作用\n\nARC 无效__block用来避免 Block 中出现的循环引用。\n\n栈——>堆时：__block修饰的变量不会被 retain。没用它修饰的就会被 retain。\n\n\n\n## ARC\n\n| 对象操作    | OC 方法                          |\n| ------- | ------------------------------ |\n| 生成并持有对象 | + alloc、+ new、copy、mutableCopy |\n| 持有对象    | - retain                       |\n| 释放对象    | - release                      |\n| 废弃对象    | - dealloc                      |\n\n\n\n## `__strong` 和 `__weak`\n\n__strong：表示对对象的强引用。即在超出其作用域被废弃时，随着强引用的释放，引用的对象也会被释放。\n\n\n\n## 内存泄露\n\n循环引用容易导致内存泄露。内存泄露就是应当废弃的对象在超出其生存周期后继续存在。","source":"_posts/iOS开发/iOS 开发基础/闭包、lambda-计算、block.md","raw":"---\ntitle: ' 闭包、lambda 计算、block'\ndate: 2014-05-15 15:07:23\ntags:\ncategories: iOS开发\nthumbnail: \"https://i0.hdslb.com/bfs/vc/493788433bf17760555a4881fcfbf2c24fbec23e.jpg\"\n---\n\n# block\n\n导读：\n\n* 什么是 block？\n* block 基本原理是什么？\n* 使用 block 需要避免哪些问题？\n\n\n\n##1、什么是 block\n\n###（1）Block\n\nblock 概念：block是带有**自动变量值**的**匿名函数**。也称为闭包（closure）、lambda 计算。\n\nC语言的标注不允许存在这样的函数，但是可以通过函数指针来直接调用函数。\n\n```c \n// 声明一个函数\nint func(int count);      \n\n// 声明一个函数指针，并取出 func 的地址赋给 *funcP\nint (*funcP)(int count) = &func;   //注：函数形参可有可无，视情况而定\n\n// 通过函数名访问这个函数\nint result1 = func(10);   \n\n// 通过函数的指针访问这个函数\nint result2 = (*funcP)(10);\n```\n\n\n\n### （2）函数指针的用途：\n\n函数指针的用途有两个：\n\n* 调用函数\n* 作为函数的参数\n\n>```c++\n>Class* a; // a 是个对象，类型是指针\n>Class *a; // a 是个指针，类型是类\n>\n>/* \n> *  虽然上述写法均表示声明一个指针型变量，但是着重点不同。\n> *  前者意在声明一个变量，后者意在声明一个指针。\n> *  这种自行体会就好，不要拘泥于写法。\n> */\n>```\n\n\n\n### （3）悬浮指针的出现及避免\n\n声明一个指针需要注意的问题：\n\n* 避免出现**悬浮指针**（也称迷途指针、失控指针）\n\n悬浮指针的出现：dealloc 一个指针后，没有把指针置空（nil）。\n\n*如果再次调用该指针并没有重新赋值，就会出现问题*。\n\n> 注意：空指针 ！= 迷途指针。空指针指向的地址为空。\n\n> 指针的指针即本身\n\n\n\n### （4）函数中可能使用的变量：\n\n* 函数的参数\n\n* 局部变量（自动变量）\n\n* 静态变量（静态局部变量）\n\n* 全局变量\n\n* 静态全局变量\n\n  > 使用全局变量会占用更多的内存（因为其生命期长），不过在计算机配置很高的今天，这个不应该算什么问题，除非使用的是巨大对象的全局变量，能避免就一定要避免。\n\n\n\n### （5）OC 中函数和方法的区别\n\n函数和对象无关，方法和对象有关。最主要的是，函数和方法写法不一样啊！\n\n> 函数是指把一个值通过一系列计算得到一个新的值。\n>\n> 而方法更多考虑的是事情。如让一个人通过一系列动作制造一个新的东西。\n\n\n\n### （6）为什么 Block 可以作为函数参数和返回值？\n\n函数的参数和返回值可以是 void、int，也可以是一个类对象，当然也可以是指针（int* char*）。而 block 为什么可以作为函数的参数甚至是返回值呢？\n\n**因为block的本质是 OC 对象。**（OC 的 层面）\n\nblock的实质是**栈**上 block 的结构体实例。（C 的层面）这里也可以理解为是一个函数指针。\n\n> ```objective-c\n> typedef int(^blk_t)(int); // 声明一个参数为 int 型、返回值为 int 型的 blk_t类型\n> blk_t blk = ^(int count){return count+1;};// 声明一个 blk 变量\n> int (^blk)(int) = ^(int count){return count+1;};// 等价于第二行\n>\n> blk_t *blkptr = &blk;// 声明一个名为 blkptr 的 blk_t型的指针，并指向 blk 的地址。\n>\n> (*blkptr)(10); // 利用指针调用这个 blk\n> blk(10); // 直接调用这个 blk\n> ```\n\n\n\n### （7）__block 说明符\n\n引入`__block`的目的是用来声明变量的作用域的，意思就是 block 外用`__block`声明的变量，block 内也能访问到。虽然这货和全局变量有些类似，但是老机器全局变量用多了会导致浪费内存啊！（因为全局变量生命周期比较长）。\n\n吐槽：乖乖用__block吧，特大的对象做全局变量的时候，也是会出现问题的。\n\n\n\n### （8）block 的实质\n\nblock的实质是**栈**上 block 的结构体实例。（吐槽，说白了就是通过指针访问的）\n\n（写一个代码用 clang rewrite 一下就明白了，因为有 Foundation 框架，一个5行的代码能重写成将近10万行。。不过核心代码在最后几行，翻到最后看就可以了）\n\n> 重写代码的时候会发现有三个结构体，一个是`__block_imp1 `另一个是`__main_block_imp1_0`还有一个是`__main_block_desc_0`\n>\n> 这里面引申一个概念就是 IMP 和SEL，具体以后再分析(runtime)，知道SEL 表示（选择器） IMP 表示*函数指针*就可以了。\n\n\n\n`__block`的实质是栈上`__block`变量的结构体实例。\n\n```objective-c\n// block的实质结构\ntypedef objc_class *Class; //Class 为 objc_class 结构体的指针类型\n\ntypedef struct objc_object{\n  Class isa;\n} *id; //id为 objc_objec 结构体的指针类型\n```\n\n\n\n将 block源码转换为 C++源码：`clang -rewrite-objc filename`\n\n| __block变量的配置存储域 | Block 从栈复制到堆是的影响  |\n| --------------- | ----------------- |\n| 栈（stack）        | 从栈复制到堆并被 Block 持有 |\n| 堆（heap/maclloc） | 被 Block 持有        |\n\n栈上的 block ：变量作用域结束时，栈上的 __block变量和 block 被废弃\n\n堆上的 block：变量作用域结束时不受影响，需要手动释放。 \n\n\n\n## block 循环引用的问题\n\n如果在 Block 中使用__strong修饰的对象和变量，那么当 Block 从栈复制到堆上的时候，该对象就会被 Block所持有。这样就会引起循环引用。\n\n> 循环引用这里有个重点，Block 是存储在栈上的，普通对象和变量是存储在堆上的。堆（malloc）上的内存需要我们手动管理（需要 dealloc），而栈上的内存顾名思义是按照数据结构中栈的方式管理，即由系统进行分配。\n\n\n\n**对象持有 block => block持有 self => self 持有对象，即形成循环引用。**（这里的 self 也包含当前类的其他属性，因为在调用属性的同时也截获了 self）。\n\n> 编译器能查出循环引用。\n\n## copy release\n\nARC 无效的时候，我们需要手动将 Block 从栈复制到堆。\n\n因为 ARC 无效，所以需要我们手动释放复制的 Block。\n\n这个时候我们用 copy 方法来复制，release 方法来释放。\n\n```objective-c\nvoid (^block_on_heap)(void) = [block_on_stack copy];//正常复制\n\n[block_on_heap release];//正常释放\n\n[block_on_heap retain]; // 因为block 在堆上，所以可以被 retain\n\n[block_on_stack retain];// 因为现在 block 在栈上，所以这个方法没用\n```\n\n\n\n> ARC 是苹果公司在iOS 5 以后推出的内存管理机制。。iOS 5以前是手动管理的。。如果还问我 ARC 的话，那我基本不考虑你们公司了。。。。\n\n\n\n## __block的作用\n\nARC 无效__block用来避免 Block 中出现的循环引用。\n\n栈——>堆时：__block修饰的变量不会被 retain。没用它修饰的就会被 retain。\n\n\n\n## ARC\n\n| 对象操作    | OC 方法                          |\n| ------- | ------------------------------ |\n| 生成并持有对象 | + alloc、+ new、copy、mutableCopy |\n| 持有对象    | - retain                       |\n| 释放对象    | - release                      |\n| 废弃对象    | - dealloc                      |\n\n\n\n## `__strong` 和 `__weak`\n\n__strong：表示对对象的强引用。即在超出其作用域被废弃时，随着强引用的释放，引用的对象也会被释放。\n\n\n\n## 内存泄露\n\n循环引用容易导致内存泄露。内存泄露就是应当废弃的对象在超出其生存周期后继续存在。","slug":"iOS开发/iOS 开发基础/闭包、lambda-计算、block","published":1,"updated":"2018-01-31T08:46:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkufk0018074mgg93qhbf","content":"<h1 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h1><p>导读：</p>\n<ul>\n<li>什么是 block？</li>\n<li>block 基本原理是什么？</li>\n<li>使用 block 需要避免哪些问题？</li>\n</ul>\n<p>##1、什么是 block</p>\n<p>###（1）Block</p>\n<p>block 概念：block是带有<strong>自动变量值</strong>的<strong>匿名函数</strong>。也称为闭包（closure）、lambda 计算。</p>\n<p>C语言的标注不允许存在这样的函数，但是可以通过函数指针来直接调用函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>;      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个函数指针，并取出 func 的地址赋给 *funcP</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> (*funcP)(<span class=\"keyword\">int</span> count) = &amp;func;   <span class=\"comment\">//注：函数形参可有可无，视情况而定</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过函数名访问这个函数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> result1 = func(<span class=\"number\">10</span>);   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过函数的指针访问这个函数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> result2 = (*funcP)(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"（2）函数指针的用途：\"><a href=\"#（2）函数指针的用途：\" class=\"headerlink\" title=\"（2）函数指针的用途：\"></a>（2）函数指针的用途：</h3><p>函数指针的用途有两个：</p>\n<ul>\n<li>调用函数</li>\n<li>作为函数的参数</li>\n</ul>\n<blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;Class* a; <span class=\"comment\">// a 是个对象，类型是指针</span></span><br><span class=\"line\">&gt;Class *a; <span class=\"comment\">// a 是个指针，类型是类</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">&gt; *  虽然上述写法均表示声明一个指针型变量，但是着重点不同。</span></span><br><span class=\"line\"><span class=\"comment\">&gt; *  前者意在声明一个变量，后者意在声明一个指针。</span></span><br><span class=\"line\"><span class=\"comment\">&gt; *  这种自行体会就好，不要拘泥于写法。</span></span><br><span class=\"line\"><span class=\"comment\">&gt; */</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"（3）悬浮指针的出现及避免\"><a href=\"#（3）悬浮指针的出现及避免\" class=\"headerlink\" title=\"（3）悬浮指针的出现及避免\"></a>（3）悬浮指针的出现及避免</h3><p>声明一个指针需要注意的问题：</p>\n<ul>\n<li>避免出现<strong>悬浮指针</strong>（也称迷途指针、失控指针）</li>\n</ul>\n<p>悬浮指针的出现：dealloc 一个指针后，没有把指针置空（nil）。</p>\n<p><em>如果再次调用该指针并没有重新赋值，就会出现问题</em>。</p>\n<blockquote>\n<p>注意：空指针 ！= 迷途指针。空指针指向的地址为空。</p>\n<p>指针的指针即本身</p>\n</blockquote>\n<h3 id=\"（4）函数中可能使用的变量：\"><a href=\"#（4）函数中可能使用的变量：\" class=\"headerlink\" title=\"（4）函数中可能使用的变量：\"></a>（4）函数中可能使用的变量：</h3><ul>\n<li><p>函数的参数</p>\n</li>\n<li><p>局部变量（自动变量）</p>\n</li>\n<li><p>静态变量（静态局部变量）</p>\n</li>\n<li><p>全局变量</p>\n</li>\n<li><p>静态全局变量</p>\n<blockquote>\n<p>使用全局变量会占用更多的内存（因为其生命期长），不过在计算机配置很高的今天，这个不应该算什么问题，除非使用的是巨大对象的全局变量，能避免就一定要避免。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"（5）OC-中函数和方法的区别\"><a href=\"#（5）OC-中函数和方法的区别\" class=\"headerlink\" title=\"（5）OC 中函数和方法的区别\"></a>（5）OC 中函数和方法的区别</h3><p>函数和对象无关，方法和对象有关。最主要的是，函数和方法写法不一样啊！</p>\n<blockquote>\n<p>函数是指把一个值通过一系列计算得到一个新的值。</p>\n<p>而方法更多考虑的是事情。如让一个人通过一系列动作制造一个新的东西。</p>\n</blockquote>\n<h3 id=\"（6）为什么-Block-可以作为函数参数和返回值？\"><a href=\"#（6）为什么-Block-可以作为函数参数和返回值？\" class=\"headerlink\" title=\"（6）为什么 Block 可以作为函数参数和返回值？\"></a>（6）为什么 Block 可以作为函数参数和返回值？</h3><p>函数的参数和返回值可以是 void、int，也可以是一个类对象，当然也可以是指针（int<em> char</em>）。而 block 为什么可以作为函数的参数甚至是返回值呢？</p>\n<p><strong>因为block的本质是 OC 对象。</strong>（OC 的 层面）</p>\n<p>block的实质是<strong>栈</strong>上 block 的结构体实例。（C 的层面）这里也可以理解为是一个函数指针。</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; typedef int(^blk_t)(int); // 声明一个参数为 int 型、返回值为 int 型的 blk_t类型</span><br><span class=\"line\">&gt; blk_t blk = ^(int count)&#123;return count+1;&#125;;// 声明一个 blk 变量</span><br><span class=\"line\">&gt; int (^blk)(int) = ^(int count)&#123;return count+1;&#125;;// 等价于第二行</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; blk_t *blkptr = &amp;blk;// 声明一个名为 blkptr 的 blk_t型的指针，并指向 blk 的地址。</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; (*blkptr)(10); // 利用指针调用这个 blk</span><br><span class=\"line\">&gt; blk(10); // 直接调用这个 blk</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"（7）-block-说明符\"><a href=\"#（7）-block-说明符\" class=\"headerlink\" title=\"（7）__block 说明符\"></a>（7）__block 说明符</h3><p>引入<code>__block</code>的目的是用来声明变量的作用域的，意思就是 block 外用<code>__block</code>声明的变量，block 内也能访问到。虽然这货和全局变量有些类似，但是老机器全局变量用多了会导致浪费内存啊！（因为全局变量生命周期比较长）。</p>\n<p>吐槽：乖乖用__block吧，特大的对象做全局变量的时候，也是会出现问题的。</p>\n<h3 id=\"（8）block-的实质\"><a href=\"#（8）block-的实质\" class=\"headerlink\" title=\"（8）block 的实质\"></a>（8）block 的实质</h3><p>block的实质是<strong>栈</strong>上 block 的结构体实例。（吐槽，说白了就是通过指针访问的）</p>\n<p>（写一个代码用 clang rewrite 一下就明白了，因为有 Foundation 框架，一个5行的代码能重写成将近10万行。。不过核心代码在最后几行，翻到最后看就可以了）</p>\n<blockquote>\n<p>重写代码的时候会发现有三个结构体，一个是<code>__block_imp1</code>另一个是<code>__main_block_imp1_0</code>还有一个是<code>__main_block_desc_0</code></p>\n<p>这里面引申一个概念就是 IMP 和SEL，具体以后再分析(runtime)，知道SEL 表示（选择器） IMP 表示<em>函数指针</em>就可以了。</p>\n</blockquote>\n<p><code>__block</code>的实质是栈上<code>__block</code>变量的结构体实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// block的实质结构</span><br><span class=\"line\">typedef objc_class *Class; //Class 为 objc_class 结构体的指针类型</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_object&#123;</span><br><span class=\"line\">  Class isa;</span><br><span class=\"line\">&#125; *id; //id为 objc_objec 结构体的指针类型</span><br></pre></td></tr></table></figure>\n<p>将 block源码转换为 C++源码：<code>clang -rewrite-objc filename</code></p>\n<table>\n<thead>\n<tr>\n<th>__block变量的配置存储域</th>\n<th>Block 从栈复制到堆是的影响</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>栈（stack）</td>\n<td>从栈复制到堆并被 Block 持有</td>\n</tr>\n<tr>\n<td>堆（heap/maclloc）</td>\n<td>被 Block 持有</td>\n</tr>\n</tbody>\n</table>\n<p>栈上的 block ：变量作用域结束时，栈上的 __block变量和 block 被废弃</p>\n<p>堆上的 block：变量作用域结束时不受影响，需要手动释放。 </p>\n<h2 id=\"block-循环引用的问题\"><a href=\"#block-循环引用的问题\" class=\"headerlink\" title=\"block 循环引用的问题\"></a>block 循环引用的问题</h2><p>如果在 Block 中使用__strong修饰的对象和变量，那么当 Block 从栈复制到堆上的时候，该对象就会被 Block所持有。这样就会引起循环引用。</p>\n<blockquote>\n<p>循环引用这里有个重点，Block 是存储在栈上的，普通对象和变量是存储在堆上的。堆（malloc）上的内存需要我们手动管理（需要 dealloc），而栈上的内存顾名思义是按照数据结构中栈的方式管理，即由系统进行分配。</p>\n</blockquote>\n<p><strong>对象持有 block =&gt; block持有 self =&gt; self 持有对象，即形成循环引用。</strong>（这里的 self 也包含当前类的其他属性，因为在调用属性的同时也截获了 self）。</p>\n<blockquote>\n<p>编译器能查出循环引用。</p>\n</blockquote>\n<h2 id=\"copy-release\"><a href=\"#copy-release\" class=\"headerlink\" title=\"copy release\"></a>copy release</h2><p>ARC 无效的时候，我们需要手动将 Block 从栈复制到堆。</p>\n<p>因为 ARC 无效，所以需要我们手动释放复制的 Block。</p>\n<p>这个时候我们用 copy 方法来复制，release 方法来释放。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void (^block_on_heap)(void) = [block_on_stack copy];//正常复制</span><br><span class=\"line\"></span><br><span class=\"line\">[block_on_heap release];//正常释放</span><br><span class=\"line\"></span><br><span class=\"line\">[block_on_heap retain]; // 因为block 在堆上，所以可以被 retain</span><br><span class=\"line\"></span><br><span class=\"line\">[block_on_stack retain];// 因为现在 block 在栈上，所以这个方法没用</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ARC 是苹果公司在iOS 5 以后推出的内存管理机制。。iOS 5以前是手动管理的。。如果还问我 ARC 的话，那我基本不考虑你们公司了。。。。</p>\n</blockquote>\n<h2 id=\"block的作用\"><a href=\"#block的作用\" class=\"headerlink\" title=\"__block的作用\"></a>__block的作用</h2><p>ARC 无效__block用来避免 Block 中出现的循环引用。</p>\n<p>栈——&gt;堆时：__block修饰的变量不会被 retain。没用它修饰的就会被 retain。</p>\n<h2 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h2><table>\n<thead>\n<tr>\n<th>对象操作</th>\n<th>OC 方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>生成并持有对象</td>\n<td>+ alloc、+ new、copy、mutableCopy</td>\n</tr>\n<tr>\n<td>持有对象</td>\n<td>- retain</td>\n</tr>\n<tr>\n<td>释放对象</td>\n<td>- release</td>\n</tr>\n<tr>\n<td>废弃对象</td>\n<td>- dealloc</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"strong-和-weak\"><a href=\"#strong-和-weak\" class=\"headerlink\" title=\"__strong 和 __weak\"></a><code>__strong</code> 和 <code>__weak</code></h2><p>__strong：表示对对象的强引用。即在超出其作用域被废弃时，随着强引用的释放，引用的对象也会被释放。</p>\n<h2 id=\"内存泄露\"><a href=\"#内存泄露\" class=\"headerlink\" title=\"内存泄露\"></a>内存泄露</h2><p>循环引用容易导致内存泄露。内存泄露就是应当废弃的对象在超出其生存周期后继续存在。</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<h1 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h1><p>导读：</p>\n<ul>\n<li>什么是 block？</li>\n<li>block 基本原理是什么？</li>\n<li>使用 block 需要避免哪些问题？</li>\n</ul>\n<p>##1、什么是 block</p>\n<p>###（1）Block</p>\n<p>block 概念：block是带有<strong>自动变量值</strong>的<strong>匿名函数</strong>。也称为闭包（closure）、lambda 计算。</p>\n<p>C语言的标注不允许存在这样的函数，但是可以通过函数指针来直接调用函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>;      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个函数指针，并取出 func 的地址赋给 *funcP</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> (*funcP)(<span class=\"keyword\">int</span> count) = &amp;func;   <span class=\"comment\">//注：函数形参可有可无，视情况而定</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过函数名访问这个函数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> result1 = func(<span class=\"number\">10</span>);   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过函数的指针访问这个函数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> result2 = (*funcP)(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"（2）函数指针的用途：\"><a href=\"#（2）函数指针的用途：\" class=\"headerlink\" title=\"（2）函数指针的用途：\"></a>（2）函数指针的用途：</h3><p>函数指针的用途有两个：</p>\n<ul>\n<li>调用函数</li>\n<li>作为函数的参数</li>\n</ul>\n<blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;Class* a; <span class=\"comment\">// a 是个对象，类型是指针</span></span><br><span class=\"line\">&gt;Class *a; <span class=\"comment\">// a 是个指针，类型是类</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;<span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">&gt; *  虽然上述写法均表示声明一个指针型变量，但是着重点不同。</span></span><br><span class=\"line\"><span class=\"comment\">&gt; *  前者意在声明一个变量，后者意在声明一个指针。</span></span><br><span class=\"line\"><span class=\"comment\">&gt; *  这种自行体会就好，不要拘泥于写法。</span></span><br><span class=\"line\"><span class=\"comment\">&gt; */</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"（3）悬浮指针的出现及避免\"><a href=\"#（3）悬浮指针的出现及避免\" class=\"headerlink\" title=\"（3）悬浮指针的出现及避免\"></a>（3）悬浮指针的出现及避免</h3><p>声明一个指针需要注意的问题：</p>\n<ul>\n<li>避免出现<strong>悬浮指针</strong>（也称迷途指针、失控指针）</li>\n</ul>\n<p>悬浮指针的出现：dealloc 一个指针后，没有把指针置空（nil）。</p>\n<p><em>如果再次调用该指针并没有重新赋值，就会出现问题</em>。</p>\n<blockquote>\n<p>注意：空指针 ！= 迷途指针。空指针指向的地址为空。</p>\n<p>指针的指针即本身</p>\n</blockquote>\n<h3 id=\"（4）函数中可能使用的变量：\"><a href=\"#（4）函数中可能使用的变量：\" class=\"headerlink\" title=\"（4）函数中可能使用的变量：\"></a>（4）函数中可能使用的变量：</h3><ul>\n<li><p>函数的参数</p>\n</li>\n<li><p>局部变量（自动变量）</p>\n</li>\n<li><p>静态变量（静态局部变量）</p>\n</li>\n<li><p>全局变量</p>\n</li>\n<li><p>静态全局变量</p>\n<blockquote>\n<p>使用全局变量会占用更多的内存（因为其生命期长），不过在计算机配置很高的今天，这个不应该算什么问题，除非使用的是巨大对象的全局变量，能避免就一定要避免。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"（5）OC-中函数和方法的区别\"><a href=\"#（5）OC-中函数和方法的区别\" class=\"headerlink\" title=\"（5）OC 中函数和方法的区别\"></a>（5）OC 中函数和方法的区别</h3><p>函数和对象无关，方法和对象有关。最主要的是，函数和方法写法不一样啊！</p>\n<blockquote>\n<p>函数是指把一个值通过一系列计算得到一个新的值。</p>\n<p>而方法更多考虑的是事情。如让一个人通过一系列动作制造一个新的东西。</p>\n</blockquote>\n<h3 id=\"（6）为什么-Block-可以作为函数参数和返回值？\"><a href=\"#（6）为什么-Block-可以作为函数参数和返回值？\" class=\"headerlink\" title=\"（6）为什么 Block 可以作为函数参数和返回值？\"></a>（6）为什么 Block 可以作为函数参数和返回值？</h3><p>函数的参数和返回值可以是 void、int，也可以是一个类对象，当然也可以是指针（int<em> char</em>）。而 block 为什么可以作为函数的参数甚至是返回值呢？</p>\n<p><strong>因为block的本质是 OC 对象。</strong>（OC 的 层面）</p>\n<p>block的实质是<strong>栈</strong>上 block 的结构体实例。（C 的层面）这里也可以理解为是一个函数指针。</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; typedef int(^blk_t)(int); // 声明一个参数为 int 型、返回值为 int 型的 blk_t类型</span><br><span class=\"line\">&gt; blk_t blk = ^(int count)&#123;return count+1;&#125;;// 声明一个 blk 变量</span><br><span class=\"line\">&gt; int (^blk)(int) = ^(int count)&#123;return count+1;&#125;;// 等价于第二行</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; blk_t *blkptr = &amp;blk;// 声明一个名为 blkptr 的 blk_t型的指针，并指向 blk 的地址。</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; (*blkptr)(10); // 利用指针调用这个 blk</span><br><span class=\"line\">&gt; blk(10); // 直接调用这个 blk</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"（7）-block-说明符\"><a href=\"#（7）-block-说明符\" class=\"headerlink\" title=\"（7）__block 说明符\"></a>（7）__block 说明符</h3><p>引入<code>__block</code>的目的是用来声明变量的作用域的，意思就是 block 外用<code>__block</code>声明的变量，block 内也能访问到。虽然这货和全局变量有些类似，但是老机器全局变量用多了会导致浪费内存啊！（因为全局变量生命周期比较长）。</p>\n<p>吐槽：乖乖用__block吧，特大的对象做全局变量的时候，也是会出现问题的。</p>\n<h3 id=\"（8）block-的实质\"><a href=\"#（8）block-的实质\" class=\"headerlink\" title=\"（8）block 的实质\"></a>（8）block 的实质</h3><p>block的实质是<strong>栈</strong>上 block 的结构体实例。（吐槽，说白了就是通过指针访问的）</p>\n<p>（写一个代码用 clang rewrite 一下就明白了，因为有 Foundation 框架，一个5行的代码能重写成将近10万行。。不过核心代码在最后几行，翻到最后看就可以了）</p>\n<blockquote>\n<p>重写代码的时候会发现有三个结构体，一个是<code>__block_imp1</code>另一个是<code>__main_block_imp1_0</code>还有一个是<code>__main_block_desc_0</code></p>\n<p>这里面引申一个概念就是 IMP 和SEL，具体以后再分析(runtime)，知道SEL 表示（选择器） IMP 表示<em>函数指针</em>就可以了。</p>\n</blockquote>\n<p><code>__block</code>的实质是栈上<code>__block</code>变量的结构体实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// block的实质结构</span><br><span class=\"line\">typedef objc_class *Class; //Class 为 objc_class 结构体的指针类型</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_object&#123;</span><br><span class=\"line\">  Class isa;</span><br><span class=\"line\">&#125; *id; //id为 objc_objec 结构体的指针类型</span><br></pre></td></tr></table></figure>\n<p>将 block源码转换为 C++源码：<code>clang -rewrite-objc filename</code></p>\n<table>\n<thead>\n<tr>\n<th>__block变量的配置存储域</th>\n<th>Block 从栈复制到堆是的影响</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>栈（stack）</td>\n<td>从栈复制到堆并被 Block 持有</td>\n</tr>\n<tr>\n<td>堆（heap/maclloc）</td>\n<td>被 Block 持有</td>\n</tr>\n</tbody>\n</table>\n<p>栈上的 block ：变量作用域结束时，栈上的 __block变量和 block 被废弃</p>\n<p>堆上的 block：变量作用域结束时不受影响，需要手动释放。 </p>\n<h2 id=\"block-循环引用的问题\"><a href=\"#block-循环引用的问题\" class=\"headerlink\" title=\"block 循环引用的问题\"></a>block 循环引用的问题</h2><p>如果在 Block 中使用__strong修饰的对象和变量，那么当 Block 从栈复制到堆上的时候，该对象就会被 Block所持有。这样就会引起循环引用。</p>\n<blockquote>\n<p>循环引用这里有个重点，Block 是存储在栈上的，普通对象和变量是存储在堆上的。堆（malloc）上的内存需要我们手动管理（需要 dealloc），而栈上的内存顾名思义是按照数据结构中栈的方式管理，即由系统进行分配。</p>\n</blockquote>\n<p><strong>对象持有 block =&gt; block持有 self =&gt; self 持有对象，即形成循环引用。</strong>（这里的 self 也包含当前类的其他属性，因为在调用属性的同时也截获了 self）。</p>\n<blockquote>\n<p>编译器能查出循环引用。</p>\n</blockquote>\n<h2 id=\"copy-release\"><a href=\"#copy-release\" class=\"headerlink\" title=\"copy release\"></a>copy release</h2><p>ARC 无效的时候，我们需要手动将 Block 从栈复制到堆。</p>\n<p>因为 ARC 无效，所以需要我们手动释放复制的 Block。</p>\n<p>这个时候我们用 copy 方法来复制，release 方法来释放。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void (^block_on_heap)(void) = [block_on_stack copy];//正常复制</span><br><span class=\"line\"></span><br><span class=\"line\">[block_on_heap release];//正常释放</span><br><span class=\"line\"></span><br><span class=\"line\">[block_on_heap retain]; // 因为block 在堆上，所以可以被 retain</span><br><span class=\"line\"></span><br><span class=\"line\">[block_on_stack retain];// 因为现在 block 在栈上，所以这个方法没用</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ARC 是苹果公司在iOS 5 以后推出的内存管理机制。。iOS 5以前是手动管理的。。如果还问我 ARC 的话，那我基本不考虑你们公司了。。。。</p>\n</blockquote>\n<h2 id=\"block的作用\"><a href=\"#block的作用\" class=\"headerlink\" title=\"__block的作用\"></a>__block的作用</h2><p>ARC 无效__block用来避免 Block 中出现的循环引用。</p>\n<p>栈——&gt;堆时：__block修饰的变量不会被 retain。没用它修饰的就会被 retain。</p>\n<h2 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h2><table>\n<thead>\n<tr>\n<th>对象操作</th>\n<th>OC 方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>生成并持有对象</td>\n<td>+ alloc、+ new、copy、mutableCopy</td>\n</tr>\n<tr>\n<td>持有对象</td>\n<td>- retain</td>\n</tr>\n<tr>\n<td>释放对象</td>\n<td>- release</td>\n</tr>\n<tr>\n<td>废弃对象</td>\n<td>- dealloc</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"strong-和-weak\"><a href=\"#strong-和-weak\" class=\"headerlink\" title=\"__strong 和 __weak\"></a><code>__strong</code> 和 <code>__weak</code></h2><p>__strong：表示对对象的强引用。即在超出其作用域被废弃时，随着强引用的释放，引用的对象也会被释放。</p>\n<h2 id=\"内存泄露\"><a href=\"#内存泄露\" class=\"headerlink\" title=\"内存泄露\"></a>内存泄露</h2><p>循环引用容易导致内存泄露。内存泄露就是应当废弃的对象在超出其生存周期后继续存在。</p>\n"},{"title":"从微信跳一跳学习逆向开发iOS","date":"2017-12-29T09:05:40.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515671098503&di=650c7f02a784008ee52200ccb1115324&imgtype=0&src=http%3A%2F%2Ff3.topitme.com%2F3%2Fb9%2F57%2F1132270460a9c57b93o.jpg","_content":"\n# 从微信跳一跳学习逆向开发 iOS\n\n[TOC]\n\n### 一、libimobiledevice与 adb\n\nlibimobiledevice：逆向出 iOS 与 Mac Windows 接口的通讯协议\n\nadb：安卓下调试工具\n\n\n\n### 二、安装libimobiledevice\n\n```\n$ brew update\n$ brew install libimobiledevice\n#libimobiledevice中并不包含ipa的安装命令，所以还需要安装\n$ brew install ideviceinstaller\n```\n\n\n\n","source":"_posts/iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS.md","raw":"---\ntitle: 从微信跳一跳学习逆向开发iOS\ndate: 2017-12-29 17:05:40\ncategories: iOS开发\t\ntags: libimobiledevice\nthumbnail: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515671098503&di=650c7f02a784008ee52200ccb1115324&imgtype=0&src=http%3A%2F%2Ff3.topitme.com%2F3%2Fb9%2F57%2F1132270460a9c57b93o.jpg\"\n---\n\n# 从微信跳一跳学习逆向开发 iOS\n\n[TOC]\n\n### 一、libimobiledevice与 adb\n\nlibimobiledevice：逆向出 iOS 与 Mac Windows 接口的通讯协议\n\nadb：安卓下调试工具\n\n\n\n### 二、安装libimobiledevice\n\n```\n$ brew update\n$ brew install libimobiledevice\n#libimobiledevice中并不包含ipa的安装命令，所以还需要安装\n$ brew install ideviceinstaller\n```\n\n\n\n","slug":"iOS开发/iOS 逆向开发/从微信跳一跳学习逆向开发iOS","published":1,"updated":"2018-01-12T06:51:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkufo0019074myt03zz4j","content":"<h1 id=\"从微信跳一跳学习逆向开发-iOS\"><a href=\"#从微信跳一跳学习逆向开发-iOS\" class=\"headerlink\" title=\"从微信跳一跳学习逆向开发 iOS\"></a>从微信跳一跳学习逆向开发 iOS</h1><p>[TOC]</p>\n<h3 id=\"一、libimobiledevice与-adb\"><a href=\"#一、libimobiledevice与-adb\" class=\"headerlink\" title=\"一、libimobiledevice与 adb\"></a>一、libimobiledevice与 adb</h3><p>libimobiledevice：逆向出 iOS 与 Mac Windows 接口的通讯协议</p>\n<p>adb：安卓下调试工具</p>\n<h3 id=\"二、安装libimobiledevice\"><a href=\"#二、安装libimobiledevice\" class=\"headerlink\" title=\"二、安装libimobiledevice\"></a>二、安装libimobiledevice</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew update</span><br><span class=\"line\">$ brew install libimobiledevice</span><br><span class=\"line\">#libimobiledevice中并不包含ipa的安装命令，所以还需要安装</span><br><span class=\"line\">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<h1 id=\"从微信跳一跳学习逆向开发-iOS\"><a href=\"#从微信跳一跳学习逆向开发-iOS\" class=\"headerlink\" title=\"从微信跳一跳学习逆向开发 iOS\"></a>从微信跳一跳学习逆向开发 iOS</h1><p>[TOC]</p>\n<h3 id=\"一、libimobiledevice与-adb\"><a href=\"#一、libimobiledevice与-adb\" class=\"headerlink\" title=\"一、libimobiledevice与 adb\"></a>一、libimobiledevice与 adb</h3><p>libimobiledevice：逆向出 iOS 与 Mac Windows 接口的通讯协议</p>\n<p>adb：安卓下调试工具</p>\n<h3 id=\"二、安装libimobiledevice\"><a href=\"#二、安装libimobiledevice\" class=\"headerlink\" title=\"二、安装libimobiledevice\"></a>二、安装libimobiledevice</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew update</span><br><span class=\"line\">$ brew install libimobiledevice</span><br><span class=\"line\">#libimobiledevice中并不包含ipa的安装命令，所以还需要安装</span><br><span class=\"line\">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure>\n"},{"title":"ios知识脉络梳理","date":"2014-05-19T15:34:21.000Z","thumbnail":"https://i0.hdslb.com/bfs/drawyoo/71c32ae66719b070ef7b565cc7e3c6237915e385.jpg","_content":"\n目录\n\n[TOC]\n\n\n\n## （一）、Foundation 相关知识点\n\n### 一、内存管理的思考方式\n\n#### 1、内存管理的原则：\n\n* 自己生成的对象，自己持有\n\n* 不是自己生成的对象，自己也能持有 （需要手动 retain）\n\n  > ```objective-c\n  > id obj = [NSMutableArray array]; // 取得对象的存在，但自己并不持有\n  > [obj retain]; // 自己持有对象\n  > ```\n\n* 不是自己持有的对象，自己无法释放\n\n* 不在需要自己持有的对象时，就要释放\n\n| 对象操作  | OC 方法                          |\n| ----- | ------------------------------ |\n| 生成并持有 | +new/+alloc/-copy/-mutableCopy |\n| 持有对象  | -retain                        |\n| 释放对象  | - release                      |\n| 废弃对象  | - dealloc                      |\n\n#### 2、autorelease：（与 release 的区别）\n\n* autorelease 可以取得对象的存在，但是自己不持有对象；\n* autorelease 可以是对象在超出指定的生存空间时能够自动并正确的释放；\n* autorelease 不是立即释放对象的，而是将该对象注册到 autoreleasepool 中，pool 结束时（drain）自动调用 release\n\n\n\n#### 3、 所有权修饰符：（一共四种）\n\n* `__weak`（__weak修饰的变量所引用的对象被废弃时，会将 nil 赋给该变量）\n\n* `__strong`\n\n* `__unsafe_unretained`\n\n* `__autoreleasing`\n\n  ​\n\n#### 4、property声明的属性与所有权修饰符的对应关系\n\n| property 声明中的属性                          | 所有权修饰符                 |\n| ---------------------------------------- | ---------------------- |\n| `assign`                                 | `__unsafe_unretained`  |\n| ``unsafe_unretained`copy` | `__unsafe_unretained` |                        |\n| `retain`                                 | `__strong`             |\n| `strong`                                 | `__strong`             |\n| `copy`                                   | `__strong`(赋值的是被复制的对象) |\n| `weak`                                   | `__weak`               |\n\n#### 5、objc使用什么机制管理对象内存？\n\n> 通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。\n\n6、ARC通过什么方式帮助开发者管理内存？\n\n7、不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\n\n8、苹果是如何实现autoreleasepool的？\n\n### 二、block 与内存管理\n\n#### 1、使用block时什么情况会发生引用循环，如何解决？\n\n#### 2、在block内如何修改block外部变量？\n\n#### 3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\n\n### 三、关于 Copy 的一些问题\n\n#### 1、如何让自己的类用 copy 修饰符？\n\n让自己的类用 copy 修饰符：\n\n* 声明该类遵循 NSCopying 协议或者遵循 NSMutableCopying 协议\n* 实现 -copyWithZone： 方法，该方法生成并持有该对象的副本。\n\n#### 2、如何重写带关键字的 setter？\n\n```objective-c\n_obj = [obj copy]; // 返回一个该对象的副本\n```\n\n#### 3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\n\n\n\n#### 4、深复制（内容复制）和浅复制（指针复制）\n\n为了弄清这个概念，我们先来弄清楚在 集合与非集合类的 可变和不可变对象分别执行 copy 和 mutableCopy 操作。\n\n```objective-c\n/*\n * 1、无论是集合类和非集合类，只有不可变对象进行 copy 操作是浅复制，其他情况均是深复制，因为副本的结果是不\n *    可变的。其他情况副本的结果是可变的。\n * \n * 2、集合对象的内容复制仅局限于本身，对于元素来说，仍然是指针复制（浅复制）。所以，集合对象的深复制是单层\n *    深复制。\n */\n\n[immutableObject copy] // 浅复制\n[immutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject copy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n```\n\n> 关于叫复制还是叫拷贝，我觉得叫复制更为准确些，这个过程有点像 OSX 复制一个文件的副本的感觉\n>\n> [1]: https://www.zybuluo.com/MicroCai/note/50592\t\"iOS 集合的深复制与浅复制\"\n\n\n\n### 四、关于@property\n\n#### 1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\n\n* 原子性：nonatomic、atomic （默认是 atomic）（atomic 需要消耗大量内存资源，故ios 不推荐使用）\n* 读写：readonly、readwrite （默认是readwrite）\n* 内存管理：strong、weak、assign、copy、unsafe_unretained（默认是 strong 或assign）\n* 重命名方法名：\n  * ~~setter=<#name#>~~不常用，也不推荐使用\n  * getter=<#name#>\n\n#### 2、 @protocol 和 category 中如何使用 @property\n\n* 在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性\n* category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：\n  * `objc_setAssociatedObject`\n  * `objc_getAssociatedObject`\n\n#### 3、weak属性需要在dealloc中置nil么？\n\n不需要。ARC 下无论是 strong 还是 weak 都不需要置nil，ARC 会自动帮我们做这件事情。\n\n#### 4、@synthesize和@dynamic分别有什么作用？\n\n一般情况下：成员变量 +  @synthesize = @property\n\n>1. @property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是`@syntheszie var = _var;`\n>2. @synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。\n>3. @dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 `instance.var = someVar`，由于缺 setter 方法会导致程序崩溃；或者当运行到 `someVar = var` 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。\n\n\n\n#### 5、什么情况需要@synthesize\n\n* **同时重写了 setter 和 getter 时**（这种情况访问下划线变量会报错）\n* 重写了*只读属性的 getter* 时\n* 使用了 @dynamic 时\n* 在 @protocol 中定义的所有属性\n* 在 category 中定义的所有属性\n* 重载的属性\n\n#### 6、IBOutlet连出来的视图属性为什么可以被设置成weak?\n\n\n\n### 五、关于运行时 Runtime\n\nObjective-C 是一门动态语言，主要就体现在Runtime 上。\n\n#### 1、向对象发送一个消息和` objc_sendMessage(receiver, SEL：MethodID) `函数有什么关系？\n\n> [obj foo];在objc编译时，会被转意为：`objc_msgSend(obj, @selector(foo));`。\n\n\n\n#### 2、什么时候会报unrecognized（未被承认的） selector的异常？\n\n\n\n#### 3、一个objc对象的isa的指针指向什么？有什么作用？\n\n指向该对象的类对象。\n\n> @interface Chinese : People\n>\n> Chinese isa People\n\n\n\n#### 4、super 和 self 有什么区别？\n\n> super的本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。\n\nsuper：先找父类的方法，没有在找子类；\n\nself：先从当前类的列表里开始找，如果没有在去父类那找。\n\n\n\n#### 5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\n\n> 每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现。\n\n```objective-c\nIMP methodIMP = [self methodForSelector:@selector(foo:)];\nmethodIMP(); // 所以 IMP 实际上是一个指针，此处 IMP 应该是Implementation的缩写\n```\n\n\n\n#### 6、objc中的类方法和实例方法有什么本质区别和联系？\n\n> 类方法：\n>\n> 1. 类方法是属于类对象的\n> 2. 类方法只能通过类对象调用\n> 3. 类方法中的self是类对象\n> 4. 类方法可以调用其他的类方法\n> 5. 类方法中不能访问成员变量\n> 6. 类方法中不能直接调用对象方法\n>\n> 实例方法：\n>\n> 1. 实例方法是属于实例对象的\n> 2. 实例方法只能通过实例对象调用\n> 3. 实例方法中的self是实例对象\n> 4. 实例方法中可以访问成员变量\n> 5. 实例方法中直接调用实例方法\n> 6. 实例方法中也可以调用类方法(通过类名\n\n#### 7、`_objc_msgForward`函数是做什么的，直接调用它将会发生什么？\n\n#### 8、 runtime如何实现weak变量的自动置nil？\n\n#### 9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\n\n#### 10、 IB中User Defined Runtime Attributes如何使用？\n\n\n\n\n\n### 六、RunLoop 和多线程\n\n#### 1、runloop和线程有什么关系？\n\n#### 2、runloop的mode作用是什么？\n\n#### 3、 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\n\n#### 4、猜想runloop内部是如何实现的？\n\n#### 5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\n\n#### 6、`dispatch_barrier_async`的作用是什么？\n\n#### 7、苹果为什么要废弃`dispatch_get_current_queue`？\n\n因为容易造成死锁\n\n#### 8、多线程原子性与非原子性、自旋锁与互斥锁的问题\n\n[1]: http://blog.csdn.net/yi_zz32/article/details/49952727\t\"多线程——原子、非原子，自旋锁和互斥锁\"\n[2]: http://blog.csdn.net/cg_lueng/article/details/50971465\t\"多线程：原子性与非原子性\"\n\n\n\n### 七、KVO、单例、代理\n\n#### 1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\n\n#### 2、如何手动触发一个value的KVO\n\n#### 3、 KVC的keyPath中的集合运算符如何使用？\n\n#### 4、 KVC和KVO的keyPath一定是属性么？\n\n#### 5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n\n#### 6、apple用什么方式实现对一个对象的KVO？\n\n\n\n### 八、调试与 LLDB\n\n#### 1、如何调试BAD_ACCESS错误\n\n#### 2、 lldb（gdb）常用的调试命令？\n\n#### 3、BAD_ACCESS在什么情况下出现？\n\n\n\n### 九、基础知识\n\n#### 1、iOS中self.和下划线的区别？\n\n[参考链接](https://www.jianshu.com/p/4295cd39604e?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation)\n\n#### 2、懒加载与单例模式的区别？\n\n懒加载是重写的 get 方法，懒加载也称延迟加载，即在使用的时候才加载，不用在 viewDidLoad 里就全部分配内存，保证了用的时候在分配内存\n\n单例模式指的是某个类的对象是系统的唯一实例。\n\n\n\n","source":"_posts/iOS开发/其他/ios知识脉络梳理.md","raw":"---\ntitle: ios知识脉络梳理\ndate: 2014-05-19 23:34:21\ntags: \ncategories: iOS开发\nthumbnail: https://i0.hdslb.com/bfs/drawyoo/71c32ae66719b070ef7b565cc7e3c6237915e385.jpg\n---\n\n目录\n\n[TOC]\n\n\n\n## （一）、Foundation 相关知识点\n\n### 一、内存管理的思考方式\n\n#### 1、内存管理的原则：\n\n* 自己生成的对象，自己持有\n\n* 不是自己生成的对象，自己也能持有 （需要手动 retain）\n\n  > ```objective-c\n  > id obj = [NSMutableArray array]; // 取得对象的存在，但自己并不持有\n  > [obj retain]; // 自己持有对象\n  > ```\n\n* 不是自己持有的对象，自己无法释放\n\n* 不在需要自己持有的对象时，就要释放\n\n| 对象操作  | OC 方法                          |\n| ----- | ------------------------------ |\n| 生成并持有 | +new/+alloc/-copy/-mutableCopy |\n| 持有对象  | -retain                        |\n| 释放对象  | - release                      |\n| 废弃对象  | - dealloc                      |\n\n#### 2、autorelease：（与 release 的区别）\n\n* autorelease 可以取得对象的存在，但是自己不持有对象；\n* autorelease 可以是对象在超出指定的生存空间时能够自动并正确的释放；\n* autorelease 不是立即释放对象的，而是将该对象注册到 autoreleasepool 中，pool 结束时（drain）自动调用 release\n\n\n\n#### 3、 所有权修饰符：（一共四种）\n\n* `__weak`（__weak修饰的变量所引用的对象被废弃时，会将 nil 赋给该变量）\n\n* `__strong`\n\n* `__unsafe_unretained`\n\n* `__autoreleasing`\n\n  ​\n\n#### 4、property声明的属性与所有权修饰符的对应关系\n\n| property 声明中的属性                          | 所有权修饰符                 |\n| ---------------------------------------- | ---------------------- |\n| `assign`                                 | `__unsafe_unretained`  |\n| ``unsafe_unretained`copy` | `__unsafe_unretained` |                        |\n| `retain`                                 | `__strong`             |\n| `strong`                                 | `__strong`             |\n| `copy`                                   | `__strong`(赋值的是被复制的对象) |\n| `weak`                                   | `__weak`               |\n\n#### 5、objc使用什么机制管理对象内存？\n\n> 通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。\n\n6、ARC通过什么方式帮助开发者管理内存？\n\n7、不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）\n\n8、苹果是如何实现autoreleasepool的？\n\n### 二、block 与内存管理\n\n#### 1、使用block时什么情况会发生引用循环，如何解决？\n\n#### 2、在block内如何修改block外部变量？\n\n#### 3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\n\n### 三、关于 Copy 的一些问题\n\n#### 1、如何让自己的类用 copy 修饰符？\n\n让自己的类用 copy 修饰符：\n\n* 声明该类遵循 NSCopying 协议或者遵循 NSMutableCopying 协议\n* 实现 -copyWithZone： 方法，该方法生成并持有该对象的副本。\n\n#### 2、如何重写带关键字的 setter？\n\n```objective-c\n_obj = [obj copy]; // 返回一个该对象的副本\n```\n\n#### 3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\n\n\n\n#### 4、深复制（内容复制）和浅复制（指针复制）\n\n为了弄清这个概念，我们先来弄清楚在 集合与非集合类的 可变和不可变对象分别执行 copy 和 mutableCopy 操作。\n\n```objective-c\n/*\n * 1、无论是集合类和非集合类，只有不可变对象进行 copy 操作是浅复制，其他情况均是深复制，因为副本的结果是不\n *    可变的。其他情况副本的结果是可变的。\n * \n * 2、集合对象的内容复制仅局限于本身，对于元素来说，仍然是指针复制（浅复制）。所以，集合对象的深复制是单层\n *    深复制。\n */\n\n[immutableObject copy] // 浅复制\n[immutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject copy] //深复制 (对集合类来说，是单层深复制)\n[mutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)\n```\n\n> 关于叫复制还是叫拷贝，我觉得叫复制更为准确些，这个过程有点像 OSX 复制一个文件的副本的感觉\n>\n> [1]: https://www.zybuluo.com/MicroCai/note/50592\t\"iOS 集合的深复制与浅复制\"\n\n\n\n### 四、关于@property\n\n#### 1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\n\n* 原子性：nonatomic、atomic （默认是 atomic）（atomic 需要消耗大量内存资源，故ios 不推荐使用）\n* 读写：readonly、readwrite （默认是readwrite）\n* 内存管理：strong、weak、assign、copy、unsafe_unretained（默认是 strong 或assign）\n* 重命名方法名：\n  * ~~setter=<#name#>~~不常用，也不推荐使用\n  * getter=<#name#>\n\n#### 2、 @protocol 和 category 中如何使用 @property\n\n* 在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性\n* category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：\n  * `objc_setAssociatedObject`\n  * `objc_getAssociatedObject`\n\n#### 3、weak属性需要在dealloc中置nil么？\n\n不需要。ARC 下无论是 strong 还是 weak 都不需要置nil，ARC 会自动帮我们做这件事情。\n\n#### 4、@synthesize和@dynamic分别有什么作用？\n\n一般情况下：成员变量 +  @synthesize = @property\n\n>1. @property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是`@syntheszie var = _var;`\n>2. @synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。\n>3. @dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 `instance.var = someVar`，由于缺 setter 方法会导致程序崩溃；或者当运行到 `someVar = var` 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。\n\n\n\n#### 5、什么情况需要@synthesize\n\n* **同时重写了 setter 和 getter 时**（这种情况访问下划线变量会报错）\n* 重写了*只读属性的 getter* 时\n* 使用了 @dynamic 时\n* 在 @protocol 中定义的所有属性\n* 在 category 中定义的所有属性\n* 重载的属性\n\n#### 6、IBOutlet连出来的视图属性为什么可以被设置成weak?\n\n\n\n### 五、关于运行时 Runtime\n\nObjective-C 是一门动态语言，主要就体现在Runtime 上。\n\n#### 1、向对象发送一个消息和` objc_sendMessage(receiver, SEL：MethodID) `函数有什么关系？\n\n> [obj foo];在objc编译时，会被转意为：`objc_msgSend(obj, @selector(foo));`。\n\n\n\n#### 2、什么时候会报unrecognized（未被承认的） selector的异常？\n\n\n\n#### 3、一个objc对象的isa的指针指向什么？有什么作用？\n\n指向该对象的类对象。\n\n> @interface Chinese : People\n>\n> Chinese isa People\n\n\n\n#### 4、super 和 self 有什么区别？\n\n> super的本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。\n\nsuper：先找父类的方法，没有在找子类；\n\nself：先从当前类的列表里开始找，如果没有在去父类那找。\n\n\n\n#### 5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\n\n> 每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现。\n\n```objective-c\nIMP methodIMP = [self methodForSelector:@selector(foo:)];\nmethodIMP(); // 所以 IMP 实际上是一个指针，此处 IMP 应该是Implementation的缩写\n```\n\n\n\n#### 6、objc中的类方法和实例方法有什么本质区别和联系？\n\n> 类方法：\n>\n> 1. 类方法是属于类对象的\n> 2. 类方法只能通过类对象调用\n> 3. 类方法中的self是类对象\n> 4. 类方法可以调用其他的类方法\n> 5. 类方法中不能访问成员变量\n> 6. 类方法中不能直接调用对象方法\n>\n> 实例方法：\n>\n> 1. 实例方法是属于实例对象的\n> 2. 实例方法只能通过实例对象调用\n> 3. 实例方法中的self是实例对象\n> 4. 实例方法中可以访问成员变量\n> 5. 实例方法中直接调用实例方法\n> 6. 实例方法中也可以调用类方法(通过类名\n\n#### 7、`_objc_msgForward`函数是做什么的，直接调用它将会发生什么？\n\n#### 8、 runtime如何实现weak变量的自动置nil？\n\n#### 9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\n\n#### 10、 IB中User Defined Runtime Attributes如何使用？\n\n\n\n\n\n### 六、RunLoop 和多线程\n\n#### 1、runloop和线程有什么关系？\n\n#### 2、runloop的mode作用是什么？\n\n#### 3、 以+ scheduledTimerWithTimeInterval...的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\n\n#### 4、猜想runloop内部是如何实现的？\n\n#### 5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\n\n#### 6、`dispatch_barrier_async`的作用是什么？\n\n#### 7、苹果为什么要废弃`dispatch_get_current_queue`？\n\n因为容易造成死锁\n\n#### 8、多线程原子性与非原子性、自旋锁与互斥锁的问题\n\n[1]: http://blog.csdn.net/yi_zz32/article/details/49952727\t\"多线程——原子、非原子，自旋锁和互斥锁\"\n[2]: http://blog.csdn.net/cg_lueng/article/details/50971465\t\"多线程：原子性与非原子性\"\n\n\n\n### 七、KVO、单例、代理\n\n#### 1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\n\n#### 2、如何手动触发一个value的KVO\n\n#### 3、 KVC的keyPath中的集合运算符如何使用？\n\n#### 4、 KVC和KVO的keyPath一定是属性么？\n\n#### 5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\n\n#### 6、apple用什么方式实现对一个对象的KVO？\n\n\n\n### 八、调试与 LLDB\n\n#### 1、如何调试BAD_ACCESS错误\n\n#### 2、 lldb（gdb）常用的调试命令？\n\n#### 3、BAD_ACCESS在什么情况下出现？\n\n\n\n### 九、基础知识\n\n#### 1、iOS中self.和下划线的区别？\n\n[参考链接](https://www.jianshu.com/p/4295cd39604e?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation)\n\n#### 2、懒加载与单例模式的区别？\n\n懒加载是重写的 get 方法，懒加载也称延迟加载，即在使用的时候才加载，不用在 viewDidLoad 里就全部分配内存，保证了用的时候在分配内存\n\n单例模式指的是某个类的对象是系统的唯一实例。\n\n\n\n","slug":"iOS开发/其他/ios知识脉络梳理","published":1,"updated":"2018-01-31T08:46:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkufr001d074m1sp6fox4","content":"<p>目录</p>\n<p>[TOC]</p>\n<h2 id=\"（一）、Foundation-相关知识点\"><a href=\"#（一）、Foundation-相关知识点\" class=\"headerlink\" title=\"（一）、Foundation 相关知识点\"></a>（一）、Foundation 相关知识点</h2><h3 id=\"一、内存管理的思考方式\"><a href=\"#一、内存管理的思考方式\" class=\"headerlink\" title=\"一、内存管理的思考方式\"></a>一、内存管理的思考方式</h3><h4 id=\"1、内存管理的原则：\"><a href=\"#1、内存管理的原则：\" class=\"headerlink\" title=\"1、内存管理的原则：\"></a>1、内存管理的原则：</h4><ul>\n<li><p>自己生成的对象，自己持有</p>\n</li>\n<li><p>不是自己生成的对象，自己也能持有 （需要手动 retain）</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; id obj = [NSMutableArray array]; // 取得对象的存在，但自己并不持有</span><br><span class=\"line\">&gt; [obj retain]; // 自己持有对象</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>不是自己持有的对象，自己无法释放</p>\n</li>\n<li><p>不在需要自己持有的对象时，就要释放</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>对象操作</th>\n<th>OC 方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>生成并持有</td>\n<td>+new/+alloc/-copy/-mutableCopy</td>\n</tr>\n<tr>\n<td>持有对象</td>\n<td>-retain</td>\n</tr>\n<tr>\n<td>释放对象</td>\n<td>- release</td>\n</tr>\n<tr>\n<td>废弃对象</td>\n<td>- dealloc</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2、autorelease：（与-release-的区别）\"><a href=\"#2、autorelease：（与-release-的区别）\" class=\"headerlink\" title=\"2、autorelease：（与 release 的区别）\"></a>2、autorelease：（与 release 的区别）</h4><ul>\n<li>autorelease 可以取得对象的存在，但是自己不持有对象；</li>\n<li>autorelease 可以是对象在超出指定的生存空间时能够自动并正确的释放；</li>\n<li>autorelease 不是立即释放对象的，而是将该对象注册到 autoreleasepool 中，pool 结束时（drain）自动调用 release</li>\n</ul>\n<h4 id=\"3、-所有权修饰符：（一共四种）\"><a href=\"#3、-所有权修饰符：（一共四种）\" class=\"headerlink\" title=\"3、 所有权修饰符：（一共四种）\"></a>3、 所有权修饰符：（一共四种）</h4><ul>\n<li><p><code>__weak</code>（__weak修饰的变量所引用的对象被废弃时，会将 nil 赋给该变量）</p>\n</li>\n<li><p><code>__strong</code></p>\n</li>\n<li><p><code>__unsafe_unretained</code></p>\n</li>\n<li><p><code>__autoreleasing</code></p>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"4、property声明的属性与所有权修饰符的对应关系\"><a href=\"#4、property声明的属性与所有权修饰符的对应关系\" class=\"headerlink\" title=\"4、property声明的属性与所有权修饰符的对应关系\"></a>4、property声明的属性与所有权修饰符的对应关系</h4><table>\n<thead>\n<tr>\n<th>property 声明中的属性</th>\n<th>所有权修饰符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assign</code></td>\n<td><code>__unsafe_unretained</code></td>\n</tr>\n<tr>\n<td><code>`unsafe_unretained</code>copy`</td>\n<td><code>__unsafe_unretained</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>retain</code></td>\n<td><code>__strong</code></td>\n</tr>\n<tr>\n<td><code>strong</code></td>\n<td><code>__strong</code></td>\n</tr>\n<tr>\n<td><code>copy</code></td>\n<td><code>__strong</code>(赋值的是被复制的对象)</td>\n</tr>\n<tr>\n<td><code>weak</code></td>\n<td><code>__weak</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5、objc使用什么机制管理对象内存？\"><a href=\"#5、objc使用什么机制管理对象内存？\" class=\"headerlink\" title=\"5、objc使用什么机制管理对象内存？\"></a>5、objc使用什么机制管理对象内存？</h4><blockquote>\n<p>通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。</p>\n</blockquote>\n<p>6、ARC通过什么方式帮助开发者管理内存？</p>\n<p>7、不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</p>\n<p>8、苹果是如何实现autoreleasepool的？</p>\n<h3 id=\"二、block-与内存管理\"><a href=\"#二、block-与内存管理\" class=\"headerlink\" title=\"二、block 与内存管理\"></a>二、block 与内存管理</h3><h4 id=\"1、使用block时什么情况会发生引用循环，如何解决？\"><a href=\"#1、使用block时什么情况会发生引用循环，如何解决？\" class=\"headerlink\" title=\"1、使用block时什么情况会发生引用循环，如何解决？\"></a>1、使用block时什么情况会发生引用循环，如何解决？</h4><h4 id=\"2、在block内如何修改block外部变量？\"><a href=\"#2、在block内如何修改block外部变量？\" class=\"headerlink\" title=\"2、在block内如何修改block外部变量？\"></a>2、在block内如何修改block外部变量？</h4><h4 id=\"3、使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"><a href=\"#3、使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\" class=\"headerlink\" title=\"3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"></a>3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</h4><h3 id=\"三、关于-Copy-的一些问题\"><a href=\"#三、关于-Copy-的一些问题\" class=\"headerlink\" title=\"三、关于 Copy 的一些问题\"></a>三、关于 Copy 的一些问题</h3><h4 id=\"1、如何让自己的类用-copy-修饰符？\"><a href=\"#1、如何让自己的类用-copy-修饰符？\" class=\"headerlink\" title=\"1、如何让自己的类用 copy 修饰符？\"></a>1、如何让自己的类用 copy 修饰符？</h4><p>让自己的类用 copy 修饰符：</p>\n<ul>\n<li>声明该类遵循 NSCopying 协议或者遵循 NSMutableCopying 协议</li>\n<li>实现 -copyWithZone： 方法，该方法生成并持有该对象的副本。</li>\n</ul>\n<h4 id=\"2、如何重写带关键字的-setter？\"><a href=\"#2、如何重写带关键字的-setter？\" class=\"headerlink\" title=\"2、如何重写带关键字的 setter？\"></a>2、如何重写带关键字的 setter？</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">_obj = [obj copy]; // 返回一个该对象的副本</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"><a href=\"#3、用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\" class=\"headerlink\" title=\"3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"></a>3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</h4><h4 id=\"4、深复制（内容复制）和浅复制（指针复制）\"><a href=\"#4、深复制（内容复制）和浅复制（指针复制）\" class=\"headerlink\" title=\"4、深复制（内容复制）和浅复制（指针复制）\"></a>4、深复制（内容复制）和浅复制（指针复制）</h4><p>为了弄清这个概念，我们先来弄清楚在 集合与非集合类的 可变和不可变对象分别执行 copy 和 mutableCopy 操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 1、无论是集合类和非集合类，只有不可变对象进行 copy 操作是浅复制，其他情况均是深复制，因为副本的结果是不</span><br><span class=\"line\"> *    可变的。其他情况副本的结果是可变的。</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 2、集合对象的内容复制仅局限于本身，对于元素来说，仍然是指针复制（浅复制）。所以，集合对象的深复制是单层</span><br><span class=\"line\"> *    深复制。</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">[immutableObject copy] // 浅复制</span><br><span class=\"line\">[immutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)</span><br><span class=\"line\">[mutableObject copy] //深复制 (对集合类来说，是单层深复制)</span><br><span class=\"line\">[mutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于叫复制还是叫拷贝，我觉得叫复制更为准确些，这个过程有点像 OSX 复制一个文件的副本的感觉</p>\n<p><a href=\"http://blog.csdn.net/yi_zz32/article/details/49952727\" title=\"多线程——原子、非原子，自旋锁和互斥锁\" target=\"_blank\" rel=\"noopener\">1</a>: <a href=\"https://www.zybuluo.com/MicroCai/note/50592\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/MicroCai/note/50592</a>    “iOS 集合的深复制与浅复制”</p>\n</blockquote>\n<h3 id=\"四、关于-property\"><a href=\"#四、关于-property\" class=\"headerlink\" title=\"四、关于@property\"></a>四、关于@property</h3><h4 id=\"1、-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\"><a href=\"#1、-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\" class=\"headerlink\" title=\"1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\"></a>1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？</h4><ul>\n<li>原子性：nonatomic、atomic （默认是 atomic）（atomic 需要消耗大量内存资源，故ios 不推荐使用）</li>\n<li>读写：readonly、readwrite （默认是readwrite）</li>\n<li>内存管理：strong、weak、assign、copy、unsafe_unretained（默认是 strong 或assign）</li>\n<li>重命名方法名：<ul>\n<li><del>setter=&lt;#name#&gt;</del>不常用，也不推荐使用</li>\n<li>getter=&lt;#name#&gt;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、-protocol-和-category-中如何使用-property\"><a href=\"#2、-protocol-和-category-中如何使用-property\" class=\"headerlink\" title=\"2、 @protocol 和 category 中如何使用 @property\"></a>2、 @protocol 和 category 中如何使用 @property</h4><ul>\n<li>在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性</li>\n<li>category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：<ul>\n<li><code>objc_setAssociatedObject</code></li>\n<li><code>objc_getAssociatedObject</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、weak属性需要在dealloc中置nil么？\"><a href=\"#3、weak属性需要在dealloc中置nil么？\" class=\"headerlink\" title=\"3、weak属性需要在dealloc中置nil么？\"></a>3、weak属性需要在dealloc中置nil么？</h4><p>不需要。ARC 下无论是 strong 还是 weak 都不需要置nil，ARC 会自动帮我们做这件事情。</p>\n<h4 id=\"4、-synthesize和-dynamic分别有什么作用？\"><a href=\"#4、-synthesize和-dynamic分别有什么作用？\" class=\"headerlink\" title=\"4、@synthesize和@dynamic分别有什么作用？\"></a>4、@synthesize和@dynamic分别有什么作用？</h4><p>一般情况下：成员变量 +  @synthesize = @property</p>\n<blockquote>\n<ol>\n<li>@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是<code>@syntheszie var = _var;</code></li>\n<li>@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。</li>\n<li>@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 <code>instance.var = someVar</code>，由于缺 setter 方法会导致程序崩溃；或者当运行到 <code>someVar = var</code> 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</li>\n</ol>\n</blockquote>\n<h4 id=\"5、什么情况需要-synthesize\"><a href=\"#5、什么情况需要-synthesize\" class=\"headerlink\" title=\"5、什么情况需要@synthesize\"></a>5、什么情况需要@synthesize</h4><ul>\n<li><strong>同时重写了 setter 和 getter 时</strong>（这种情况访问下划线变量会报错）</li>\n<li>重写了<em>只读属性的 getter</em> 时</li>\n<li>使用了 @dynamic 时</li>\n<li>在 @protocol 中定义的所有属性</li>\n<li>在 category 中定义的所有属性</li>\n<li>重载的属性</li>\n</ul>\n<h4 id=\"6、IBOutlet连出来的视图属性为什么可以被设置成weak\"><a href=\"#6、IBOutlet连出来的视图属性为什么可以被设置成weak\" class=\"headerlink\" title=\"6、IBOutlet连出来的视图属性为什么可以被设置成weak?\"></a>6、IBOutlet连出来的视图属性为什么可以被设置成weak?</h4><h3 id=\"五、关于运行时-Runtime\"><a href=\"#五、关于运行时-Runtime\" class=\"headerlink\" title=\"五、关于运行时 Runtime\"></a>五、关于运行时 Runtime</h3><p>Objective-C 是一门动态语言，主要就体现在Runtime 上。</p>\n<h4 id=\"1、向对象发送一个消息和objc-sendMessage-receiver-SEL：MethodID-函数有什么关系？\"><a href=\"#1、向对象发送一个消息和objc-sendMessage-receiver-SEL：MethodID-函数有什么关系？\" class=\"headerlink\" title=\"1、向对象发送一个消息和objc_sendMessage(receiver, SEL：MethodID)函数有什么关系？\"></a>1、向对象发送一个消息和<code>objc_sendMessage(receiver, SEL：MethodID)</code>函数有什么关系？</h4><blockquote>\n<p>[obj foo];在objc编译时，会被转意为：<code>objc_msgSend(obj, @selector(foo));</code>。</p>\n</blockquote>\n<h4 id=\"2、什么时候会报unrecognized（未被承认的）-selector的异常？\"><a href=\"#2、什么时候会报unrecognized（未被承认的）-selector的异常？\" class=\"headerlink\" title=\"2、什么时候会报unrecognized（未被承认的） selector的异常？\"></a>2、什么时候会报unrecognized（未被承认的） selector的异常？</h4><h4 id=\"3、一个objc对象的isa的指针指向什么？有什么作用？\"><a href=\"#3、一个objc对象的isa的指针指向什么？有什么作用？\" class=\"headerlink\" title=\"3、一个objc对象的isa的指针指向什么？有什么作用？\"></a>3、一个objc对象的isa的指针指向什么？有什么作用？</h4><p>指向该对象的类对象。</p>\n<blockquote>\n<p>@interface Chinese : People</p>\n<p>Chinese isa People</p>\n</blockquote>\n<h4 id=\"4、super-和-self-有什么区别？\"><a href=\"#4、super-和-self-有什么区别？\" class=\"headerlink\" title=\"4、super 和 self 有什么区别？\"></a>4、super 和 self 有什么区别？</h4><blockquote>\n<p>super的本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。</p>\n</blockquote>\n<p>super：先找父类的方法，没有在找子类；</p>\n<p>self：先从当前类的列表里开始找，如果没有在去父类那找。</p>\n<h4 id=\"5、-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"><a href=\"#5、-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\" class=\"headerlink\" title=\"5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"></a>5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）</h4><blockquote>\n<p>每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">IMP methodIMP = [self methodForSelector:@selector(foo:)];</span><br><span class=\"line\">methodIMP(); // 所以 IMP 实际上是一个指针，此处 IMP 应该是Implementation的缩写</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、objc中的类方法和实例方法有什么本质区别和联系？\"><a href=\"#6、objc中的类方法和实例方法有什么本质区别和联系？\" class=\"headerlink\" title=\"6、objc中的类方法和实例方法有什么本质区别和联系？\"></a>6、objc中的类方法和实例方法有什么本质区别和联系？</h4><blockquote>\n<p>类方法：</p>\n<ol>\n<li>类方法是属于类对象的</li>\n<li>类方法只能通过类对象调用</li>\n<li>类方法中的self是类对象</li>\n<li>类方法可以调用其他的类方法</li>\n<li>类方法中不能访问成员变量</li>\n<li>类方法中不能直接调用对象方法</li>\n</ol>\n<p>实例方法：</p>\n<ol>\n<li>实例方法是属于实例对象的</li>\n<li>实例方法只能通过实例对象调用</li>\n<li>实例方法中的self是实例对象</li>\n<li>实例方法中可以访问成员变量</li>\n<li>实例方法中直接调用实例方法</li>\n<li>实例方法中也可以调用类方法(通过类名</li>\n</ol>\n</blockquote>\n<h4 id=\"7、-objc-msgForward函数是做什么的，直接调用它将会发生什么？\"><a href=\"#7、-objc-msgForward函数是做什么的，直接调用它将会发生什么？\" class=\"headerlink\" title=\"7、_objc_msgForward函数是做什么的，直接调用它将会发生什么？\"></a>7、<code>_objc_msgForward</code>函数是做什么的，直接调用它将会发生什么？</h4><h4 id=\"8、-runtime如何实现weak变量的自动置nil？\"><a href=\"#8、-runtime如何实现weak变量的自动置nil？\" class=\"headerlink\" title=\"8、 runtime如何实现weak变量的自动置nil？\"></a>8、 runtime如何实现weak变量的自动置nil？</h4><h4 id=\"9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"><a href=\"#9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\" class=\"headerlink\" title=\"9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"></a>9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h4><h4 id=\"10、-IB中User-Defined-Runtime-Attributes如何使用？\"><a href=\"#10、-IB中User-Defined-Runtime-Attributes如何使用？\" class=\"headerlink\" title=\"10、 IB中User Defined Runtime Attributes如何使用？\"></a>10、 IB中User Defined Runtime Attributes如何使用？</h4><h3 id=\"六、RunLoop-和多线程\"><a href=\"#六、RunLoop-和多线程\" class=\"headerlink\" title=\"六、RunLoop 和多线程\"></a>六、RunLoop 和多线程</h3><h4 id=\"1、runloop和线程有什么关系？\"><a href=\"#1、runloop和线程有什么关系？\" class=\"headerlink\" title=\"1、runloop和线程有什么关系？\"></a>1、runloop和线程有什么关系？</h4><h4 id=\"2、runloop的mode作用是什么？\"><a href=\"#2、runloop的mode作用是什么？\" class=\"headerlink\" title=\"2、runloop的mode作用是什么？\"></a>2、runloop的mode作用是什么？</h4><h4 id=\"3、-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"><a href=\"#3、-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\" class=\"headerlink\" title=\"3、 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"></a>3、 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</h4><h4 id=\"4、猜想runloop内部是如何实现的？\"><a href=\"#4、猜想runloop内部是如何实现的？\" class=\"headerlink\" title=\"4、猜想runloop内部是如何实现的？\"></a>4、猜想runloop内部是如何实现的？</h4><h4 id=\"5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"><a href=\"#5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\" class=\"headerlink\" title=\"5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"></a>5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</h4><h4 id=\"6、dispatch-barrier-async的作用是什么？\"><a href=\"#6、dispatch-barrier-async的作用是什么？\" class=\"headerlink\" title=\"6、dispatch_barrier_async的作用是什么？\"></a>6、<code>dispatch_barrier_async</code>的作用是什么？</h4><h4 id=\"7、苹果为什么要废弃dispatch-get-current-queue？\"><a href=\"#7、苹果为什么要废弃dispatch-get-current-queue？\" class=\"headerlink\" title=\"7、苹果为什么要废弃dispatch_get_current_queue？\"></a>7、苹果为什么要废弃<code>dispatch_get_current_queue</code>？</h4><p>因为容易造成死锁</p>\n<h4 id=\"8、多线程原子性与非原子性、自旋锁与互斥锁的问题\"><a href=\"#8、多线程原子性与非原子性、自旋锁与互斥锁的问题\" class=\"headerlink\" title=\"8、多线程原子性与非原子性、自旋锁与互斥锁的问题\"></a>8、多线程原子性与非原子性、自旋锁与互斥锁的问题</h4><h3 id=\"七、KVO、单例、代理\"><a href=\"#七、KVO、单例、代理\" class=\"headerlink\" title=\"七、KVO、单例、代理\"></a>七、KVO、单例、代理</h3><h4 id=\"1、addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"><a href=\"#1、addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\" class=\"headerlink\" title=\"1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"></a>1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</h4><h4 id=\"2、如何手动触发一个value的KVO\"><a href=\"#2、如何手动触发一个value的KVO\" class=\"headerlink\" title=\"2、如何手动触发一个value的KVO\"></a>2、如何手动触发一个value的KVO</h4><h4 id=\"3、-KVC的keyPath中的集合运算符如何使用？\"><a href=\"#3、-KVC的keyPath中的集合运算符如何使用？\" class=\"headerlink\" title=\"3、 KVC的keyPath中的集合运算符如何使用？\"></a>3、 KVC的keyPath中的集合运算符如何使用？</h4><h4 id=\"4、-KVC和KVO的keyPath一定是属性么？\"><a href=\"#4、-KVC和KVO的keyPath一定是属性么？\" class=\"headerlink\" title=\"4、 KVC和KVO的keyPath一定是属性么？\"></a>4、 KVC和KVO的keyPath一定是属性么？</h4><h4 id=\"5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"><a href=\"#5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\" class=\"headerlink\" title=\"5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"></a>5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</h4><h4 id=\"6、apple用什么方式实现对一个对象的KVO？\"><a href=\"#6、apple用什么方式实现对一个对象的KVO？\" class=\"headerlink\" title=\"6、apple用什么方式实现对一个对象的KVO？\"></a>6、apple用什么方式实现对一个对象的KVO？</h4><h3 id=\"八、调试与-LLDB\"><a href=\"#八、调试与-LLDB\" class=\"headerlink\" title=\"八、调试与 LLDB\"></a>八、调试与 LLDB</h3><h4 id=\"1、如何调试BAD-ACCESS错误\"><a href=\"#1、如何调试BAD-ACCESS错误\" class=\"headerlink\" title=\"1、如何调试BAD_ACCESS错误\"></a>1、如何调试BAD_ACCESS错误</h4><h4 id=\"2、-lldb（gdb）常用的调试命令？\"><a href=\"#2、-lldb（gdb）常用的调试命令？\" class=\"headerlink\" title=\"2、 lldb（gdb）常用的调试命令？\"></a>2、 lldb（gdb）常用的调试命令？</h4><h4 id=\"3、BAD-ACCESS在什么情况下出现？\"><a href=\"#3、BAD-ACCESS在什么情况下出现？\" class=\"headerlink\" title=\"3、BAD_ACCESS在什么情况下出现？\"></a>3、BAD_ACCESS在什么情况下出现？</h4><h3 id=\"九、基础知识\"><a href=\"#九、基础知识\" class=\"headerlink\" title=\"九、基础知识\"></a>九、基础知识</h3><h4 id=\"1、iOS中self-和下划线的区别？\"><a href=\"#1、iOS中self-和下划线的区别？\" class=\"headerlink\" title=\"1、iOS中self.和下划线的区别？\"></a>1、iOS中self.和下划线的区别？</h4><p><a href=\"https://www.jianshu.com/p/4295cd39604e?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<h4 id=\"2、懒加载与单例模式的区别？\"><a href=\"#2、懒加载与单例模式的区别？\" class=\"headerlink\" title=\"2、懒加载与单例模式的区别？\"></a>2、懒加载与单例模式的区别？</h4><p>懒加载是重写的 get 方法，懒加载也称延迟加载，即在使用的时候才加载，不用在 viewDidLoad 里就全部分配内存，保证了用的时候在分配内存</p>\n<p>单例模式指的是某个类的对象是系统的唯一实例。</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<p>目录</p>\n<p>[TOC]</p>\n<h2 id=\"（一）、Foundation-相关知识点\"><a href=\"#（一）、Foundation-相关知识点\" class=\"headerlink\" title=\"（一）、Foundation 相关知识点\"></a>（一）、Foundation 相关知识点</h2><h3 id=\"一、内存管理的思考方式\"><a href=\"#一、内存管理的思考方式\" class=\"headerlink\" title=\"一、内存管理的思考方式\"></a>一、内存管理的思考方式</h3><h4 id=\"1、内存管理的原则：\"><a href=\"#1、内存管理的原则：\" class=\"headerlink\" title=\"1、内存管理的原则：\"></a>1、内存管理的原则：</h4><ul>\n<li><p>自己生成的对象，自己持有</p>\n</li>\n<li><p>不是自己生成的对象，自己也能持有 （需要手动 retain）</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; id obj = [NSMutableArray array]; // 取得对象的存在，但自己并不持有</span><br><span class=\"line\">&gt; [obj retain]; // 自己持有对象</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>不是自己持有的对象，自己无法释放</p>\n</li>\n<li><p>不在需要自己持有的对象时，就要释放</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>对象操作</th>\n<th>OC 方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>生成并持有</td>\n<td>+new/+alloc/-copy/-mutableCopy</td>\n</tr>\n<tr>\n<td>持有对象</td>\n<td>-retain</td>\n</tr>\n<tr>\n<td>释放对象</td>\n<td>- release</td>\n</tr>\n<tr>\n<td>废弃对象</td>\n<td>- dealloc</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2、autorelease：（与-release-的区别）\"><a href=\"#2、autorelease：（与-release-的区别）\" class=\"headerlink\" title=\"2、autorelease：（与 release 的区别）\"></a>2、autorelease：（与 release 的区别）</h4><ul>\n<li>autorelease 可以取得对象的存在，但是自己不持有对象；</li>\n<li>autorelease 可以是对象在超出指定的生存空间时能够自动并正确的释放；</li>\n<li>autorelease 不是立即释放对象的，而是将该对象注册到 autoreleasepool 中，pool 结束时（drain）自动调用 release</li>\n</ul>\n<h4 id=\"3、-所有权修饰符：（一共四种）\"><a href=\"#3、-所有权修饰符：（一共四种）\" class=\"headerlink\" title=\"3、 所有权修饰符：（一共四种）\"></a>3、 所有权修饰符：（一共四种）</h4><ul>\n<li><p><code>__weak</code>（__weak修饰的变量所引用的对象被废弃时，会将 nil 赋给该变量）</p>\n</li>\n<li><p><code>__strong</code></p>\n</li>\n<li><p><code>__unsafe_unretained</code></p>\n</li>\n<li><p><code>__autoreleasing</code></p>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"4、property声明的属性与所有权修饰符的对应关系\"><a href=\"#4、property声明的属性与所有权修饰符的对应关系\" class=\"headerlink\" title=\"4、property声明的属性与所有权修饰符的对应关系\"></a>4、property声明的属性与所有权修饰符的对应关系</h4><table>\n<thead>\n<tr>\n<th>property 声明中的属性</th>\n<th>所有权修饰符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>assign</code></td>\n<td><code>__unsafe_unretained</code></td>\n</tr>\n<tr>\n<td><code>`unsafe_unretained</code>copy`</td>\n<td><code>__unsafe_unretained</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>retain</code></td>\n<td><code>__strong</code></td>\n</tr>\n<tr>\n<td><code>strong</code></td>\n<td><code>__strong</code></td>\n</tr>\n<tr>\n<td><code>copy</code></td>\n<td><code>__strong</code>(赋值的是被复制的对象)</td>\n</tr>\n<tr>\n<td><code>weak</code></td>\n<td><code>__weak</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5、objc使用什么机制管理对象内存？\"><a href=\"#5、objc使用什么机制管理对象内存？\" class=\"headerlink\" title=\"5、objc使用什么机制管理对象内存？\"></a>5、objc使用什么机制管理对象内存？</h4><blockquote>\n<p>通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。</p>\n</blockquote>\n<p>6、ARC通过什么方式帮助开发者管理内存？</p>\n<p>7、不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</p>\n<p>8、苹果是如何实现autoreleasepool的？</p>\n<h3 id=\"二、block-与内存管理\"><a href=\"#二、block-与内存管理\" class=\"headerlink\" title=\"二、block 与内存管理\"></a>二、block 与内存管理</h3><h4 id=\"1、使用block时什么情况会发生引用循环，如何解决？\"><a href=\"#1、使用block时什么情况会发生引用循环，如何解决？\" class=\"headerlink\" title=\"1、使用block时什么情况会发生引用循环，如何解决？\"></a>1、使用block时什么情况会发生引用循环，如何解决？</h4><h4 id=\"2、在block内如何修改block外部变量？\"><a href=\"#2、在block内如何修改block外部变量？\" class=\"headerlink\" title=\"2、在block内如何修改block外部变量？\"></a>2、在block内如何修改block外部变量？</h4><h4 id=\"3、使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"><a href=\"#3、使用系统的某些block-api（如UIView的block版本写动画时），是否也考虑引用循环问题？\" class=\"headerlink\" title=\"3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？\"></a>3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</h4><h3 id=\"三、关于-Copy-的一些问题\"><a href=\"#三、关于-Copy-的一些问题\" class=\"headerlink\" title=\"三、关于 Copy 的一些问题\"></a>三、关于 Copy 的一些问题</h3><h4 id=\"1、如何让自己的类用-copy-修饰符？\"><a href=\"#1、如何让自己的类用-copy-修饰符？\" class=\"headerlink\" title=\"1、如何让自己的类用 copy 修饰符？\"></a>1、如何让自己的类用 copy 修饰符？</h4><p>让自己的类用 copy 修饰符：</p>\n<ul>\n<li>声明该类遵循 NSCopying 协议或者遵循 NSMutableCopying 协议</li>\n<li>实现 -copyWithZone： 方法，该方法生成并持有该对象的副本。</li>\n</ul>\n<h4 id=\"2、如何重写带关键字的-setter？\"><a href=\"#2、如何重写带关键字的-setter？\" class=\"headerlink\" title=\"2、如何重写带关键字的 setter？\"></a>2、如何重写带关键字的 setter？</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">_obj = [obj copy]; // 返回一个该对象的副本</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"><a href=\"#3、用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\" class=\"headerlink\" title=\"3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？\"></a>3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</h4><h4 id=\"4、深复制（内容复制）和浅复制（指针复制）\"><a href=\"#4、深复制（内容复制）和浅复制（指针复制）\" class=\"headerlink\" title=\"4、深复制（内容复制）和浅复制（指针复制）\"></a>4、深复制（内容复制）和浅复制（指针复制）</h4><p>为了弄清这个概念，我们先来弄清楚在 集合与非集合类的 可变和不可变对象分别执行 copy 和 mutableCopy 操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 1、无论是集合类和非集合类，只有不可变对象进行 copy 操作是浅复制，其他情况均是深复制，因为副本的结果是不</span><br><span class=\"line\"> *    可变的。其他情况副本的结果是可变的。</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 2、集合对象的内容复制仅局限于本身，对于元素来说，仍然是指针复制（浅复制）。所以，集合对象的深复制是单层</span><br><span class=\"line\"> *    深复制。</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">[immutableObject copy] // 浅复制</span><br><span class=\"line\">[immutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)</span><br><span class=\"line\">[mutableObject copy] //深复制 (对集合类来说，是单层深复制)</span><br><span class=\"line\">[mutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于叫复制还是叫拷贝，我觉得叫复制更为准确些，这个过程有点像 OSX 复制一个文件的副本的感觉</p>\n<p><a href=\"http://blog.csdn.net/yi_zz32/article/details/49952727\" title=\"多线程——原子、非原子，自旋锁和互斥锁\" target=\"_blank\" rel=\"noopener\">1</a>: <a href=\"https://www.zybuluo.com/MicroCai/note/50592\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/MicroCai/note/50592</a>    “iOS 集合的深复制与浅复制”</p>\n</blockquote>\n<h3 id=\"四、关于-property\"><a href=\"#四、关于-property\" class=\"headerlink\" title=\"四、关于@property\"></a>四、关于@property</h3><h4 id=\"1、-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\"><a href=\"#1、-property中有哪些属性关键字？-property-后面可以有哪些修饰符？\" class=\"headerlink\" title=\"1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？\"></a>1、 @property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？</h4><ul>\n<li>原子性：nonatomic、atomic （默认是 atomic）（atomic 需要消耗大量内存资源，故ios 不推荐使用）</li>\n<li>读写：readonly、readwrite （默认是readwrite）</li>\n<li>内存管理：strong、weak、assign、copy、unsafe_unretained（默认是 strong 或assign）</li>\n<li>重命名方法名：<ul>\n<li><del>setter=&lt;#name#&gt;</del>不常用，也不推荐使用</li>\n<li>getter=&lt;#name#&gt;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、-protocol-和-category-中如何使用-property\"><a href=\"#2、-protocol-和-category-中如何使用-property\" class=\"headerlink\" title=\"2、 @protocol 和 category 中如何使用 @property\"></a>2、 @protocol 和 category 中如何使用 @property</h4><ul>\n<li>在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性</li>\n<li>category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：<ul>\n<li><code>objc_setAssociatedObject</code></li>\n<li><code>objc_getAssociatedObject</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、weak属性需要在dealloc中置nil么？\"><a href=\"#3、weak属性需要在dealloc中置nil么？\" class=\"headerlink\" title=\"3、weak属性需要在dealloc中置nil么？\"></a>3、weak属性需要在dealloc中置nil么？</h4><p>不需要。ARC 下无论是 strong 还是 weak 都不需要置nil，ARC 会自动帮我们做这件事情。</p>\n<h4 id=\"4、-synthesize和-dynamic分别有什么作用？\"><a href=\"#4、-synthesize和-dynamic分别有什么作用？\" class=\"headerlink\" title=\"4、@synthesize和@dynamic分别有什么作用？\"></a>4、@synthesize和@dynamic分别有什么作用？</h4><p>一般情况下：成员变量 +  @synthesize = @property</p>\n<blockquote>\n<ol>\n<li>@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是<code>@syntheszie var = _var;</code></li>\n<li>@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。</li>\n<li>@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 <code>instance.var = someVar</code>，由于缺 setter 方法会导致程序崩溃；或者当运行到 <code>someVar = var</code> 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</li>\n</ol>\n</blockquote>\n<h4 id=\"5、什么情况需要-synthesize\"><a href=\"#5、什么情况需要-synthesize\" class=\"headerlink\" title=\"5、什么情况需要@synthesize\"></a>5、什么情况需要@synthesize</h4><ul>\n<li><strong>同时重写了 setter 和 getter 时</strong>（这种情况访问下划线变量会报错）</li>\n<li>重写了<em>只读属性的 getter</em> 时</li>\n<li>使用了 @dynamic 时</li>\n<li>在 @protocol 中定义的所有属性</li>\n<li>在 category 中定义的所有属性</li>\n<li>重载的属性</li>\n</ul>\n<h4 id=\"6、IBOutlet连出来的视图属性为什么可以被设置成weak\"><a href=\"#6、IBOutlet连出来的视图属性为什么可以被设置成weak\" class=\"headerlink\" title=\"6、IBOutlet连出来的视图属性为什么可以被设置成weak?\"></a>6、IBOutlet连出来的视图属性为什么可以被设置成weak?</h4><h3 id=\"五、关于运行时-Runtime\"><a href=\"#五、关于运行时-Runtime\" class=\"headerlink\" title=\"五、关于运行时 Runtime\"></a>五、关于运行时 Runtime</h3><p>Objective-C 是一门动态语言，主要就体现在Runtime 上。</p>\n<h4 id=\"1、向对象发送一个消息和objc-sendMessage-receiver-SEL：MethodID-函数有什么关系？\"><a href=\"#1、向对象发送一个消息和objc-sendMessage-receiver-SEL：MethodID-函数有什么关系？\" class=\"headerlink\" title=\"1、向对象发送一个消息和objc_sendMessage(receiver, SEL：MethodID)函数有什么关系？\"></a>1、向对象发送一个消息和<code>objc_sendMessage(receiver, SEL：MethodID)</code>函数有什么关系？</h4><blockquote>\n<p>[obj foo];在objc编译时，会被转意为：<code>objc_msgSend(obj, @selector(foo));</code>。</p>\n</blockquote>\n<h4 id=\"2、什么时候会报unrecognized（未被承认的）-selector的异常？\"><a href=\"#2、什么时候会报unrecognized（未被承认的）-selector的异常？\" class=\"headerlink\" title=\"2、什么时候会报unrecognized（未被承认的） selector的异常？\"></a>2、什么时候会报unrecognized（未被承认的） selector的异常？</h4><h4 id=\"3、一个objc对象的isa的指针指向什么？有什么作用？\"><a href=\"#3、一个objc对象的isa的指针指向什么？有什么作用？\" class=\"headerlink\" title=\"3、一个objc对象的isa的指针指向什么？有什么作用？\"></a>3、一个objc对象的isa的指针指向什么？有什么作用？</h4><p>指向该对象的类对象。</p>\n<blockquote>\n<p>@interface Chinese : People</p>\n<p>Chinese isa People</p>\n</blockquote>\n<h4 id=\"4、super-和-self-有什么区别？\"><a href=\"#4、super-和-self-有什么区别？\" class=\"headerlink\" title=\"4、super 和 self 有什么区别？\"></a>4、super 和 self 有什么区别？</h4><blockquote>\n<p>super的本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。</p>\n</blockquote>\n<p>super：先找父类的方法，没有在找子类；</p>\n<p>self：先从当前类的列表里开始找，如果没有在去父类那找。</p>\n<h4 id=\"5、-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"><a href=\"#5、-runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\" class=\"headerlink\" title=\"5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）\"></a>5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）</h4><blockquote>\n<p>每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">IMP methodIMP = [self methodForSelector:@selector(foo:)];</span><br><span class=\"line\">methodIMP(); // 所以 IMP 实际上是一个指针，此处 IMP 应该是Implementation的缩写</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、objc中的类方法和实例方法有什么本质区别和联系？\"><a href=\"#6、objc中的类方法和实例方法有什么本质区别和联系？\" class=\"headerlink\" title=\"6、objc中的类方法和实例方法有什么本质区别和联系？\"></a>6、objc中的类方法和实例方法有什么本质区别和联系？</h4><blockquote>\n<p>类方法：</p>\n<ol>\n<li>类方法是属于类对象的</li>\n<li>类方法只能通过类对象调用</li>\n<li>类方法中的self是类对象</li>\n<li>类方法可以调用其他的类方法</li>\n<li>类方法中不能访问成员变量</li>\n<li>类方法中不能直接调用对象方法</li>\n</ol>\n<p>实例方法：</p>\n<ol>\n<li>实例方法是属于实例对象的</li>\n<li>实例方法只能通过实例对象调用</li>\n<li>实例方法中的self是实例对象</li>\n<li>实例方法中可以访问成员变量</li>\n<li>实例方法中直接调用实例方法</li>\n<li>实例方法中也可以调用类方法(通过类名</li>\n</ol>\n</blockquote>\n<h4 id=\"7、-objc-msgForward函数是做什么的，直接调用它将会发生什么？\"><a href=\"#7、-objc-msgForward函数是做什么的，直接调用它将会发生什么？\" class=\"headerlink\" title=\"7、_objc_msgForward函数是做什么的，直接调用它将会发生什么？\"></a>7、<code>_objc_msgForward</code>函数是做什么的，直接调用它将会发生什么？</h4><h4 id=\"8、-runtime如何实现weak变量的自动置nil？\"><a href=\"#8、-runtime如何实现weak变量的自动置nil？\" class=\"headerlink\" title=\"8、 runtime如何实现weak变量的自动置nil？\"></a>8、 runtime如何实现weak变量的自动置nil？</h4><h4 id=\"9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"><a href=\"#9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\" class=\"headerlink\" title=\"9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？\"></a>9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</h4><h4 id=\"10、-IB中User-Defined-Runtime-Attributes如何使用？\"><a href=\"#10、-IB中User-Defined-Runtime-Attributes如何使用？\" class=\"headerlink\" title=\"10、 IB中User Defined Runtime Attributes如何使用？\"></a>10、 IB中User Defined Runtime Attributes如何使用？</h4><h3 id=\"六、RunLoop-和多线程\"><a href=\"#六、RunLoop-和多线程\" class=\"headerlink\" title=\"六、RunLoop 和多线程\"></a>六、RunLoop 和多线程</h3><h4 id=\"1、runloop和线程有什么关系？\"><a href=\"#1、runloop和线程有什么关系？\" class=\"headerlink\" title=\"1、runloop和线程有什么关系？\"></a>1、runloop和线程有什么关系？</h4><h4 id=\"2、runloop的mode作用是什么？\"><a href=\"#2、runloop的mode作用是什么？\" class=\"headerlink\" title=\"2、runloop的mode作用是什么？\"></a>2、runloop的mode作用是什么？</h4><h4 id=\"3、-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"><a href=\"#3、-以-scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\" class=\"headerlink\" title=\"3、 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？\"></a>3、 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</h4><h4 id=\"4、猜想runloop内部是如何实现的？\"><a href=\"#4、猜想runloop内部是如何实现的？\" class=\"headerlink\" title=\"4、猜想runloop内部是如何实现的？\"></a>4、猜想runloop内部是如何实现的？</h4><h4 id=\"5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"><a href=\"#5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\" class=\"headerlink\" title=\"5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）\"></a>5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</h4><h4 id=\"6、dispatch-barrier-async的作用是什么？\"><a href=\"#6、dispatch-barrier-async的作用是什么？\" class=\"headerlink\" title=\"6、dispatch_barrier_async的作用是什么？\"></a>6、<code>dispatch_barrier_async</code>的作用是什么？</h4><h4 id=\"7、苹果为什么要废弃dispatch-get-current-queue？\"><a href=\"#7、苹果为什么要废弃dispatch-get-current-queue？\" class=\"headerlink\" title=\"7、苹果为什么要废弃dispatch_get_current_queue？\"></a>7、苹果为什么要废弃<code>dispatch_get_current_queue</code>？</h4><p>因为容易造成死锁</p>\n<h4 id=\"8、多线程原子性与非原子性、自旋锁与互斥锁的问题\"><a href=\"#8、多线程原子性与非原子性、自旋锁与互斥锁的问题\" class=\"headerlink\" title=\"8、多线程原子性与非原子性、自旋锁与互斥锁的问题\"></a>8、多线程原子性与非原子性、自旋锁与互斥锁的问题</h4><h3 id=\"七、KVO、单例、代理\"><a href=\"#七、KVO、单例、代理\" class=\"headerlink\" title=\"七、KVO、单例、代理\"></a>七、KVO、单例、代理</h3><h4 id=\"1、addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"><a href=\"#1、addObserver-forKeyPath-options-context-各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\" class=\"headerlink\" title=\"1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？\"></a>1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</h4><h4 id=\"2、如何手动触发一个value的KVO\"><a href=\"#2、如何手动触发一个value的KVO\" class=\"headerlink\" title=\"2、如何手动触发一个value的KVO\"></a>2、如何手动触发一个value的KVO</h4><h4 id=\"3、-KVC的keyPath中的集合运算符如何使用？\"><a href=\"#3、-KVC的keyPath中的集合运算符如何使用？\" class=\"headerlink\" title=\"3、 KVC的keyPath中的集合运算符如何使用？\"></a>3、 KVC的keyPath中的集合运算符如何使用？</h4><h4 id=\"4、-KVC和KVO的keyPath一定是属性么？\"><a href=\"#4、-KVC和KVO的keyPath一定是属性么？\" class=\"headerlink\" title=\"4、 KVC和KVO的keyPath一定是属性么？\"></a>4、 KVC和KVO的keyPath一定是属性么？</h4><h4 id=\"5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"><a href=\"#5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\" class=\"headerlink\" title=\"5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？\"></a>5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</h4><h4 id=\"6、apple用什么方式实现对一个对象的KVO？\"><a href=\"#6、apple用什么方式实现对一个对象的KVO？\" class=\"headerlink\" title=\"6、apple用什么方式实现对一个对象的KVO？\"></a>6、apple用什么方式实现对一个对象的KVO？</h4><h3 id=\"八、调试与-LLDB\"><a href=\"#八、调试与-LLDB\" class=\"headerlink\" title=\"八、调试与 LLDB\"></a>八、调试与 LLDB</h3><h4 id=\"1、如何调试BAD-ACCESS错误\"><a href=\"#1、如何调试BAD-ACCESS错误\" class=\"headerlink\" title=\"1、如何调试BAD_ACCESS错误\"></a>1、如何调试BAD_ACCESS错误</h4><h4 id=\"2、-lldb（gdb）常用的调试命令？\"><a href=\"#2、-lldb（gdb）常用的调试命令？\" class=\"headerlink\" title=\"2、 lldb（gdb）常用的调试命令？\"></a>2、 lldb（gdb）常用的调试命令？</h4><h4 id=\"3、BAD-ACCESS在什么情况下出现？\"><a href=\"#3、BAD-ACCESS在什么情况下出现？\" class=\"headerlink\" title=\"3、BAD_ACCESS在什么情况下出现？\"></a>3、BAD_ACCESS在什么情况下出现？</h4><h3 id=\"九、基础知识\"><a href=\"#九、基础知识\" class=\"headerlink\" title=\"九、基础知识\"></a>九、基础知识</h3><h4 id=\"1、iOS中self-和下划线的区别？\"><a href=\"#1、iOS中self-和下划线的区别？\" class=\"headerlink\" title=\"1、iOS中self.和下划线的区别？\"></a>1、iOS中self.和下划线的区别？</h4><p><a href=\"https://www.jianshu.com/p/4295cd39604e?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<h4 id=\"2、懒加载与单例模式的区别？\"><a href=\"#2、懒加载与单例模式的区别？\" class=\"headerlink\" title=\"2、懒加载与单例模式的区别？\"></a>2、懒加载与单例模式的区别？</h4><p>懒加载是重写的 get 方法，懒加载也称延迟加载，即在使用的时候才加载，不用在 viewDidLoad 里就全部分配内存，保证了用的时候在分配内存</p>\n<p>单例模式指的是某个类的对象是系统的唯一实例。</p>\n"},{"title":"@interface编写规范","date":"2014-01-10T12:58:02.000Z","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515665308&di=c47dba565aa9965eb524c6b306ffce50&src=http://img.zcool.cn/community/0144c457b4f79d0000018c1b26b075.jpg","_content":"\n1、合理使用读写权限以及作用域修饰符。\n\n2、合理使用向前声明@class\n\n3、暴露必要的接口\n\n4、定义枚举:NS_ENUM、NS_OPTIONS、字符串枚举\n\n\n\n\n\n","source":"_posts/iOS开发/开发笔记/iOS开发笔记.md","raw":"---\ntitle: '@interface编写规范'\ndate: 2014-01-10 20:58:02\ncategories: iOS开发\ntags:\nthumbnail: \"https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1515665308&di=c47dba565aa9965eb524c6b306ffce50&src=http://img.zcool.cn/community/0144c457b4f79d0000018c1b26b075.jpg\"\n---\n\n1、合理使用读写权限以及作用域修饰符。\n\n2、合理使用向前声明@class\n\n3、暴露必要的接口\n\n4、定义枚举:NS_ENUM、NS_OPTIONS、字符串枚举\n\n\n\n\n\n","slug":"iOS开发/开发笔记/iOS开发笔记","published":1,"updated":"2018-02-03T16:05:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkufs001e074mx49lht84","content":"<p>1、合理使用读写权限以及作用域修饰符。</p>\n<p>2、合理使用向前声明@class</p>\n<p>3、暴露必要的接口</p>\n<p>4、定义枚举:NS_ENUM、NS_OPTIONS、字符串枚举</p>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<p>1、合理使用读写权限以及作用域修饰符。</p>\n<p>2、合理使用向前声明@class</p>\n<p>3、暴露必要的接口</p>\n<p>4、定义枚举:NS_ENUM、NS_OPTIONS、字符串枚举</p>\n"},{"title":"UITableView详解","date":"2014-05-14T00:32:25.000Z","thumbnail":"https://i0.hdslb.com/bfs/album/0b9d38083c671b028746a529bb1a59ecf2f27172.jpg","_content":"\n\n\n* UITableView**DataSource**\n  * 必要的\n    * 设置 tableview cell\n    * 设置行数\n  * 可选的\n    * ​\n* UITableView**Delegate**\n  * 可选的\n    * 设置行高\n\n\n\n\n\n* UITableView**DataSource**\n\n  * required\n    * UITableViewCell \n    * numberOfRowsInSection\n  * optional\n    * numberOfSectionsInTableView \n    * titleForHeaderViewOrFooterView\n    * index\n      * sectionForSectionIndexTitle\n      * sectionIndexTitlesForTableView\n\n* UITableView**Delegate**\n\n  * optional\n    * Display customization\n    * Variable (estimated) height support\n    * Section header & footer information.返回一个 view\n    * Accessories\n    * should or did (Un)HighlightRowAtIndexPath\n    * Called before the user changes the selection.\n    * Editing\n\n  ​","source":"_posts/iOS开发/控件/UITableView详解.md","raw":"---\ntitle: UITableView详解\ndate: 2014-05-14 08:32:25\ntags: UITableView\ncategories: iOS开发\nthumbnail: \"https://i0.hdslb.com/bfs/album/0b9d38083c671b028746a529bb1a59ecf2f27172.jpg\"\n---\n\n\n\n* UITableView**DataSource**\n  * 必要的\n    * 设置 tableview cell\n    * 设置行数\n  * 可选的\n    * ​\n* UITableView**Delegate**\n  * 可选的\n    * 设置行高\n\n\n\n\n\n* UITableView**DataSource**\n\n  * required\n    * UITableViewCell \n    * numberOfRowsInSection\n  * optional\n    * numberOfSectionsInTableView \n    * titleForHeaderViewOrFooterView\n    * index\n      * sectionForSectionIndexTitle\n      * sectionIndexTitlesForTableView\n\n* UITableView**Delegate**\n\n  * optional\n    * Display customization\n    * Variable (estimated) height support\n    * Section header & footer information.返回一个 view\n    * Accessories\n    * should or did (Un)HighlightRowAtIndexPath\n    * Called before the user changes the selection.\n    * Editing\n\n  ​","slug":"iOS开发/控件/UITableView详解","published":1,"updated":"2018-01-31T08:51:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxbkufu001i074mu4mvmdbz","content":"<ul>\n<li>UITableView<strong>DataSource</strong><ul>\n<li>必要的<ul>\n<li>设置 tableview cell</li>\n<li>设置行数</li>\n</ul>\n</li>\n<li>可选的<ul>\n<li>​</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>UITableView<strong>Delegate</strong><ul>\n<li>可选的<ul>\n<li>设置行高</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>UITableView<strong>DataSource</strong></p>\n<ul>\n<li>required<ul>\n<li>UITableViewCell </li>\n<li>numberOfRowsInSection</li>\n</ul>\n</li>\n<li>optional<ul>\n<li>numberOfSectionsInTableView </li>\n<li>titleForHeaderViewOrFooterView</li>\n<li>index<ul>\n<li>sectionForSectionIndexTitle</li>\n<li>sectionIndexTitlesForTableView</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>UITableView<strong>Delegate</strong></p>\n<ul>\n<li>optional<ul>\n<li>Display customization</li>\n<li>Variable (estimated) height support</li>\n<li>Section header &amp; footer information.返回一个 view</li>\n<li>Accessories</li>\n<li>should or did (Un)HighlightRowAtIndexPath</li>\n<li>Called before the user changes the selection.</li>\n<li>Editing</li>\n</ul>\n</li>\n</ul>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{"_links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}},"gallery":{"图片名称":{"full_link":"http://miccall.tech/img/twx.jpg","thumb_link":"http://miccall.tech/img/twx.jpg","descr":"图片描述"}},"links":{"三国杀":{"link":"https://hexo.io/zh-cn/docs/front-matter.html","avatar":"http://miccall.tech/img/twx.jpg","descr":"没啥想说的"}}}},"excerpt":"","more":"<ul>\n<li>UITableView<strong>DataSource</strong><ul>\n<li>必要的<ul>\n<li>设置 tableview cell</li>\n<li>设置行数</li>\n</ul>\n</li>\n<li>可选的<ul>\n<li>​</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>UITableView<strong>Delegate</strong><ul>\n<li>可选的<ul>\n<li>设置行高</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>UITableView<strong>DataSource</strong></p>\n<ul>\n<li>required<ul>\n<li>UITableViewCell </li>\n<li>numberOfRowsInSection</li>\n</ul>\n</li>\n<li>optional<ul>\n<li>numberOfSectionsInTableView </li>\n<li>titleForHeaderViewOrFooterView</li>\n<li>index<ul>\n<li>sectionForSectionIndexTitle</li>\n<li>sectionIndexTitlesForTableView</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>UITableView<strong>Delegate</strong></p>\n<ul>\n<li>optional<ul>\n<li>Display customization</li>\n<li>Variable (estimated) height support</li>\n<li>Section header &amp; footer information.返回一个 view</li>\n<li>Accessories</li>\n<li>should or did (Un)HighlightRowAtIndexPath</li>\n<li>Called before the user changes the selection.</li>\n<li>Editing</li>\n</ul>\n</li>\n</ul>\n<p>​</p>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/HTTP/Http报文详解/响应报文首部.png","slug":"响应报文首部.png","post":"cjfxbkuby0009074mrig5fc9q","modified":1,"renderable":0},{"_id":"source/_posts/iOS开发/iOS 开发基础/instrument-详解/instrument.png","slug":"instrument.png","post":"cjfxbkufg0013074mnxil6a10","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjfxbkubo0005074m0aw1io10","category_id":"cjfxbkubv0007074mho61bx8k","_id":"cjfxbkuc5000d074mtkbu0blc"},{"post_id":"cjfxbkubt0006074m8z1c2pzv","category_id":"cjfxbkuc3000a074mbrgh843v","_id":"cjfxbkuc6000g074mctuqk3ii"},{"post_id":"cjfxbkuby0009074mrig5fc9q","category_id":"cjfxbkuc5000e074mij1nvhbb","_id":"cjfxbkuc7000j074m3c0gcck4"},{"post_id":"cjfxbkuer000k074miigigb5p","category_id":"cjfxbkuf0000m074mgktfjqup","_id":"cjfxbkuf4000t074mylekpwme"},{"post_id":"cjfxbkuet000l074m3u86ifhs","category_id":"cjfxbkuf0000m074mgktfjqup","_id":"cjfxbkuf5000v074m9yuny327"},{"post_id":"cjfxbkuf1000o074mgzgeb9zq","category_id":"cjfxbkuf0000m074mgktfjqup","_id":"cjfxbkuf6000y074m9yipndfd"},{"post_id":"cjfxbkufk0018074mgg93qhbf","category_id":"cjfxbkufi0015074momuv07i5","_id":"cjfxbkuft001f074m4vf70hzk"},{"post_id":"cjfxbkufg0013074mnxil6a10","category_id":"cjfxbkufi0015074momuv07i5","_id":"cjfxbkufv001j074mca5hepp8"},{"post_id":"cjfxbkufo0019074myt03zz4j","category_id":"cjfxbkufi0015074momuv07i5","_id":"cjfxbkufw001l074m0ewgw8om"},{"post_id":"cjfxbkufr001d074m1sp6fox4","category_id":"cjfxbkufi0015074momuv07i5","_id":"cjfxbkufw001n074mylo7xayz"},{"post_id":"cjfxbkufh0014074mszenwvtk","category_id":"cjfxbkufi0015074momuv07i5","_id":"cjfxbkufx001p074ms1tv7je4"},{"post_id":"cjfxbkufs001e074mx49lht84","category_id":"cjfxbkufi0015074momuv07i5","_id":"cjfxbkufx001r074mhlnrg1fd"},{"post_id":"cjfxbkufu001i074mu4mvmdbz","category_id":"cjfxbkufi0015074momuv07i5","_id":"cjfxbkufy001t074mmtqhufge"},{"post_id":"cjfxbkufi0017074mqb44xshe","category_id":"cjfxbkufi0015074momuv07i5","_id":"cjfxbkufy001u074mxwqxd3kh"}],"PostTag":[{"post_id":"cjfxbkubo0005074m0aw1io10","tag_id":"cjfxbkuby0008074mi99dh7hd","_id":"cjfxbkuc4000c074m6ujla3t5"},{"post_id":"cjfxbkuby0009074mrig5fc9q","tag_id":"cjfxbkuc4000b074mxemuphyo","_id":"cjfxbkuc6000h074mbv81nd92"},{"post_id":"cjfxbkuby0009074mrig5fc9q","tag_id":"cjfxbkuc5000f074mvkssh0y3","_id":"cjfxbkuc7000i074mbofrybta"},{"post_id":"cjfxbkuer000k074miigigb5p","tag_id":"cjfxbkuf0000n074maermuwse","_id":"cjfxbkuf4000r074msp1cpypu"},{"post_id":"cjfxbkuet000l074m3u86ifhs","tag_id":"cjfxbkuf2000q074mwykzhefh","_id":"cjfxbkuf6000x074mhi89vyjk"},{"post_id":"cjfxbkuet000l074m3u86ifhs","tag_id":"cjfxbkuf5000u074mp5fyw0ai","_id":"cjfxbkuf6000z074m594t189x"},{"post_id":"cjfxbkuf1000o074mgzgeb9zq","tag_id":"cjfxbkuf5000w074m5bwxe257","_id":"cjfxbkuf70011074mjb7fhy8w"},{"post_id":"cjfxbkuf1000o074mgzgeb9zq","tag_id":"cjfxbkuf60010074mxel8mdy0","_id":"cjfxbkuf70012074mkng2oboz"},{"post_id":"cjfxbkufg0013074mnxil6a10","tag_id":"cjfxbkufi0016074m5emy91uk","_id":"cjfxbkufr001c074mc9mkstsh"},{"post_id":"cjfxbkufh0014074mszenwvtk","tag_id":"cjfxbkufq001b074miit31zyl","_id":"cjfxbkufv001k074mel40w5qy"},{"post_id":"cjfxbkufi0017074mqb44xshe","tag_id":"cjfxbkuft001h074mydp2yrn8","_id":"cjfxbkufw001o074m3ggbxq37"},{"post_id":"cjfxbkufo0019074myt03zz4j","tag_id":"cjfxbkufw001m074m8p1spmo9","_id":"cjfxbkufx001s074ms2os0jkh"},{"post_id":"cjfxbkufu001i074mu4mvmdbz","tag_id":"cjfxbkufx001q074mm5k7yepo","_id":"cjfxbkufy001v074mxji1o788"}],"Tag":[{"name":"github","_id":"cjfxbkuby0008074mi99dh7hd"},{"name":"Http 报文","_id":"cjfxbkuc4000b074mxemuphyo"},{"name":"URL","_id":"cjfxbkuc5000f074mvkssh0y3"},{"name":"cUrl","_id":"cjfxbkuf0000n074maermuwse"},{"name":"tools","_id":"cjfxbkuf2000q074mwykzhefh"},{"name":"plugins","_id":"cjfxbkuf5000u074mp5fyw0ai"},{"name":"gem","_id":"cjfxbkuf5000w074m5bwxe257"},{"name":"rvm","_id":"cjfxbkuf60010074mxel8mdy0"},{"name":"instrument","_id":"cjfxbkufi0016074m5emy91uk"},{"name":"网络请求","_id":"cjfxbkufq001b074miit31zyl"},{"name":"weak&strong","_id":"cjfxbkuft001h074mydp2yrn8"},{"name":"libimobiledevice","_id":"cjfxbkufw001m074m8p1spmo9"},{"name":"UITableView","_id":"cjfxbkufx001q074mm5k7yepo"}]}}