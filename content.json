{"pages":[{"title":"关于我","text":"关于本站从 wordpress 到 jekyll，从 jekyll 到 hexo，折腾了有好几年了。最初建站的时候是在高中毕业那会，因为后来没有精力维护就搁浅了。前前后后写过新浪博客、LOFTER、轻博客、简书，最终还是选择 hexo + github 托管的形式。可惜好多文章都没备份(ಥ_ಥ) 喜欢折腾，光 hexo 主题就换了五六个了，不过一直没有满意的。最近还是想把更多的心思放在写文章上，所以就选择这套 next 主题了。不过有时间一定要自己写一套 theme！ щ(ﾟДﾟщ) 至于本站嘛。。本站只是单纯的记录一些自己关于技术方面的看法和生活中的一些琐事，咳咳，其实并没有对外公布的打算。如果你偶然发现本站的话，请多多鼓励我哈！ 关于站长嗯，本人是一枚兴趣爱好有点多的伪文艺男青年！ 喜欢咖啡、调酒！（过程就像在做化学实验，不过总的来说很享受！） 喜欢天文，喜欢晚上一个人看星星！（从初中开始就一直喜欢干这件事，我的征途是星辰大海！ ） 喜欢国学、易学、命理学（因为一直不是很喜欢自己的名字，所以从大学开始就一直在自学这些东西，颇有心得。不过国学水平真的很渣，，） 喜欢数学（从小的梦想就是当一名数学家~） 喜欢折腾~（真的是太喜欢折腾了，玩 psv 自己破解不过瘾，还研究着写一个好用的插件） ……… 23333，喜欢的东西有些多，力争做一个有趣的人！","link":"/about/index.html"},{"title":"All categories","text":"","link":"/categories/index.html"},{"title":"gallery","text":"","link":"/gallery/index.html"},{"title":"group","text":"","link":"/group/index.html"},{"title":"tag","text":"","link":"/tag/index.html"}],"posts":[{"title":"Http - Web 基础概述","text":"唔。。。我真的是太菜了[TOC] 一、HTTP报文 Http 报文分为请求报文（request）和响应报文（response），主要分三部分： 1、起始行 请求行：包含了一个方法和 URL（路径） 以及 HTTP 版本 响应行：包含了 HTTP 版本，状态码和原因短语 方法： 分为常用的7种 HTTP 方法和对 HTTP 规范的扩展方法。 状态码： 状态码位于响应的起始行中； 状态码数在每条响应报文的起始行中返回的； 原因短语： 通常与状态码成对出现，如200 OK（描述操作状态的、文本的形式的原因短语） 版本号： 注意，版本号不会被当做小数处理，2.22要比2.3要大 2、首部（请求头、响应头、head） 通用首部 请求首部 Accept 首部 条件请求首部 安全请求首部 代理请求首部 响应首部 协商首部 安全响应首部 实体首部 内容首部（Content） 实体缓存首部 3、主体（请求体、响应体、body） 二、URL##1、URL 语法 ://:@:/;;?&amp;# 方案://用户名:密码@主机:端口/路径;参数1;参数2？查询字符串#片段 URI方案：http（80）、ftp（21）、https（443）、mailto、rtsp、rtmp（1935）、file、telnet（23）、ssh（22），以上为常用的，远不止这些 rtsp：Real Time Streaming Protocol：实时流传输协议 rtmp：Real Time Message Protocol ：实时信息传输协议 2、一些常见的概念（1） URIURI（统一资源标识符） URL（统一资源定位符） URN（统一资源名） （1）RFC​ Request For Comments（RFC），是一系列以编号排定的文件。说白了就是 Internet标准定制文件。 ​ 一个RFC文件在成为官方标准前一般至少要经历4个阶段【RFC2026】：因特网草案、建议标准、草案标准、因特网标准。 （3）事物一个 HTTP 事物有一条请求命令和一条响应结果组成。 事物 = 请求 + 响应 （4）TCPTCP：传输控制协议，是把东西从一个地方传到另一个地方用的。转发 HTTP 报文。 TCP 客户端与服务器是通过套接字（socket）通信的。 HTTP 是应用层的，TCP 是传输层的。一个侧重应用，一个侧重传输。 作用： 无差错的数据传输 按序传输（数据总是按照发送的顺序到达目的地） 未分段的数据流（可以在任意时刻以任意尺寸发送数据）（尺寸就是 Content-Length） （5）隧道（tunnel）定义：对 HTTP 报文进行盲转发的特殊代理。（ 之所以敢盲转还是不因为加了一层 SSL） （6）SSLSSL（安全套接字层，）在 HTTPS 网络协议栈同 TSL 一样，属于安全层 （7）代理与 Agent 代理这俩货其实不一样，前者指 proxy，用于在客户端和服务器之间转发流量； 后者是代表用户发起 HTTP 请求的客户端程序。（就是 web 机器人、爬虫）。 （8）报文流不管报文是从客户端流入服务器，还是从服务器流入客户端，所有的报文都是像河水一样，下游流动。 HTTP 使用流入和流出描述事务处理的方向。 客服端\\ ​ 服务器 客户端/ 三、连接管理###1、OSI 七层协议和 TCP/IP 五层网络协议 总结为一句话：应表会、传网数物（五层协议中应表会为一层）。 ###2、TCP 协议中的三次握手 总结为一句话：“船~来~了！船~来~了~吗？船~来~了。”之后服务器把船开往客服端。 3、TCP 慢启动（slow shtar）TCP 会通过时间进行自我调谐。开始会限制连接的最大速度，如果数据传输成功，再慢慢提速。这种调谐被称为 TCP 慢启动。 新建了一座桥。汽车为了试试这个桥能不能走，先慢慢开过去，如果发现没问题，其他汽车再提速过去。 在提速的过程中，有个概念叫打开拥塞窗口。 有一个车队要过一座桥。一开始先派一辆车过去，确认没事的话派两个车试试，如果还没事的话派四辆车过去，这个过程就叫打开拥塞窗口。","link":"/2013/05/13/2013/Http报文详解/"},{"title":"ios HTTP请求","text":"iOS9引入了新特性 App Transport Security (ATS)，所以需要在 Info.plist加入NSAppTransportSecurity 字典的 AllowsArbitraryLoads key的值为 BOOL。 POST 请求早期还有NSURLConnection方法，iOS 9 以后被淘汰了，有几个代理方法不能用了（同步请求，异步请求） 原生方法： NSURL* url = [NSURL URLWithString:HomeUrl]; //urlNSURLRequest* request = [NSURLRequest requestWithURL:url];//请求NSURLSession* session = [NSURLSession sharedSession]; //sessionNSURLSessionDataTask* task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) { if(error){ NSLog(@\"请求失败\"); } else{ NSLog(@\"请求成功\"); NSString *receiveStr = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding]; NSData * jsonData = [receiveStr dataUsingEncoding:NSUTF8StringEncoding]; NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableLeaves error:nil]; }}];[task resume];","link":"/2014/05/16/2014/ios-HTTP请求/"},{"title":"cUrl使用心得","text":"curl 真是调试利器啊！！ 一、常用参数# -i：include全部HTTP报文# -v：显示请求过程# -d：HTTP POST DATA # -X：自定义请求方法。如-X POST# -H：自定义请求头 如 -H \"Content-type: application/json\"# -G： --get Send the -d data with a HTTP GET (H)# -o：输出# -s：静音模式，不输出任何东西# -S, --show-error Show error. With -s, make curl show errors when they occur# -f, --fail 连接失败时不显示http错误 (H)# 调试的话暂时用到这么多，其他的命令想到在更。这种东西可以直接看英文文档。 二、get 请求# 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地curl \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\" # 显示全部信息:包括起始行、响应头、响应体# -i: --include Include protocol headers in the output (H/F)curl -i \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\"# 显示get请求全过程解析 *表示解析过程 &gt;表示请求 &lt;表示响应 # -v: --verbose 冗长的curl -v \"http://7xssni.com1.z0.glb.clouddn.com/home.txt\" #--verbose 三、post请求# -d: --data DATA HTTP POST data (H)curl -d \"param1=value1&amp;param2=value2\" \"http://www.baidu.com\" 四、JSON 格式的 post 请求# -H: --header LINE Pass custom header LINE to server (H)# -X: --request COMMAND Specify request command to use# -d: --data DATA HTTP POST data (H)curl -l -H \"Content-type: application/json\" -X POST -d '{\"phone\":\"13521389587\",\"password\":\"test\"}' http://domain/apis/users.json 五、实例URL ：http://7xssni.com1.z0.glb.clouddn.com/home.txt { &quot;headUrl&quot; : { &quot;headList&quot; : [ &quot;http://7xssni.com1.z0.glb.clouddn.com/home1.jpg&quot;, &quot;http://7xssni.com1.z0.glb.clouddn.com/home2.jpg&quot;, &quot;http://7xssni.com1.z0.glb.clouddn.com/home3.jpg&quot;, &quot;http://7xssni.com1.z0.glb.clouddn.com/home4.jpg&quot; ] }, &quot;homeUrl&quot; : { &quot;dataList&quot; : [ { &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/1.jpg&quot;, &quot;materialList&quot; : &quot;进口&quot;, &quot;titleStr&quot; : &quot;PVC实体塑木板&quot;, &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot; }, { &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/2.jpg&quot;, &quot;materialList&quot; : &quot;进口&quot;, &quot;titleStr&quot; : &quot;3D印花地毯&quot;, &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot; }, { &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/3.jpg&quot;, &quot;materialList&quot; : &quot;进口&quot;, &quot;titleStr&quot; : &quot;金刚木板&quot;, &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot; }, { &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/4.jpg&quot;, &quot;materialList&quot; : &quot;进口&quot;, &quot;titleStr&quot; : &quot;经典菱形软包&quot;, &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot; }, { &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/5.jpg&quot;, &quot;materialList&quot; : &quot;进口&quot;, &quot;titleStr&quot; : &quot;经典防水木板&quot;, &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot; }, { &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/6.jpg&quot;, &quot;materialList&quot; : &quot;进口&quot;, &quot;titleStr&quot; : &quot;经典花纹墙纸&quot;, &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot; }, { &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/7.jpg&quot;, &quot;materialList&quot; : &quot;进口&quot;, &quot;titleStr&quot; : &quot;经典使用木板&quot;, &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot; }, { &quot;imagesURL&quot; : &quot;http://7xssni.com1.z0.glb.clouddn.com/8.jpg&quot;, &quot;materialList&quot; : &quot;进口&quot;, &quot;titleStr&quot; : &quot;非洲柚木地板&quot;, &quot;use&quot; : &quot;地板/家具/隔墙/衣柜&quot; } ] }} 五、常用命令：-a, --append Append to target file when uploading (F/SFTP)-E, --cert CERT[:PASSWD] Client certificate file and password (SSL)-K, --config FILE Read config from FILE-C, --continue-at OFFSET Resumed transfer OFFSET-b, --cookie STRING/FILE Read cookies from STRING/FILE (H)-c, --cookie-jar FILE Write cookies to FILE after operation (H)-d, --data DATA HTTP POST data (H)-D, --dump-header FILE Write the received headers to FILE-f, --fail Fail silently (no output at all) on HTTP errors (H)-F, --form CONTENT Specify HTTP multipart POST data (H)-P, --ftp-port ADR Use PORT with given address instead of PASV (F)-G, --get Send the -d data with a HTTP GET (H)-g, --globoff Disable URL sequences and ranges using {} and []-H, --header LINE Pass custom header LINE to server (H)-I, --head Show document info only-h, --help This help text-i, --include Include protocol headers in the output (H/F)-k, --insecure Allow connections to SSL sites without certs (H)-j, --junk-session-cookies Ignore session cookies read from file (H)-l, --list-only List only mode (F/POP3)-L, --location Follow redirects (H)-M, --manual Display the full manual-m, --max-time SECONDS Maximum time allowed for the transfer-n, --netrc Must read .netrc for user name and password-N, --no-buffer Disable buffering of the output stream-o, --output FILE Write to FILE instead of stdout-U, --proxy-user USER[:PASSWORD] Proxy user and password --proxy1.0 HOST[:PORT] Use HTTP/1.0 proxy on given port-p, --proxytunnel Operate through a HTTP proxy tunnel (using CONNECT) --pubkey KEY Public key file name (SSH)-Q, --quote CMD Send command(s) to server before transfer (F/SFTP) --random-file FILE File for reading random data from (SSL)-r, --range RANGE Retrieve only the bytes within RANGE --raw Do HTTP &quot;raw&quot;; no transfer decoding (H)-e, --referer Referer URL (H)-J, --remote-header-name Use the header-provided filename (H)-O, --remote-name Write output to a file named as the remote file --remote-name-all Use the remote file name for all URLs-R, --remote-time Set the remote file&apos;s time on the local output-X, --request COMMAND Specify request command to use-S, --show-error Show error. With -s, make curl show errors when they occur-s, --silent Silent mode (don&apos;t output anything)-Y, --speed-limit RATE Stop transfers below RATE for &apos;speed-time&apos; secs-y, --speed-time SECONDS Trigger &apos;speed-limit&apos; abort after SECONDS (default: 30)-t, --telnet-option OPT=VAL Set telnet option --tftp-blksize VALUE Set TFTP BLKSIZE option (must be &gt;512) --tftp-no-options Do not send TFTP options requests-z, --time-cond TIME Transfer based on a time condition-T, --upload-file FILE Transfer FILE to destination --url URL URL to work with-B, --use-ascii Use ASCII/text transfer-u, --user USER[:PASSWORD] Server user and password-A, --user-agent STRING Send User-Agent STRING to server (H)-v, --verbose Make the operation more talkative-V, --version Show version number and quit-w, --write-out FORMAT Use output FORMAT after completion-q, --disable Disable .curlrc (must be first parameter)","link":"/2013/01/13/2013/cUrl使用心得/"},{"title":"weak和 strong","text":"强引用和弱引用常考知识点和易错盲点。 @property中 weak 和 strong 的使用先看两段代码： @interface ViewController ()@property (nonatomic,strong)UIButton *button1;@end@implementation ViewController-(UIButton *)button1{ if (!_button1) {_button1=[UIButton buttonWithType:UIButtonTypeCustom]; _button1.frame=CGRectMake(50, 50, 100, 100); [_button1 setTitle:@\"第一个\" forState:UIControlStateNormal];_button1.backgroundColor=[UIColor redColor]; }return _button1;}- (void)viewDidLoad { [super viewDidLoad]; [self.view addSubview:self.button1];}@end @interface ViewController ()@property (nonatomic,weak) UIButton *button2;@end @implementation ViewController-(UIButton *)button2{ UIButton *btn=[UIButton buttonWithType:UIButtonTypeCustom]; btn.frame=CGRectMake(100, 100, 100, 100); [btn setTitle:@\"第二个\" forState:UIControlStateNormal]; btn.backgroundColor=[UIColor yellowColor]; return btn;}- (void)viewDidLoad { [super viewDidLoad]; [self.view addSubview:self.button2];}@end @property：strong：视图被移除时，因为有强引用指向他，所以不再次释放一下，则引用计数就是1 @property：weak：从父视图移除时，这个 button 就直接释放了，因为是弱引用，所以不对引用计数造成影响（就像 assign）（xib 用 weak） weak 的机制：weak 变量能够在引用计数为 0 时被自动设置成 nil，显然是有运行时逻辑在工作的。","link":"/2014/05/20/2014/weak和-strong/"},{"title":"instrument 详解","text":"整理一些常用 instrument 工具。 [TOC] 一、Blank二、Activity Monitor（活动监视器）三、Allocations（内存分配） 1、程序员对内存关注的点 正确使用 避免非法访问 即避免访问被释放掉的内存。release 后不能再 retain。 避免内存泄漏 高效使用 降低内存峰值 处理内存警告 Cache 2、Regions（区域）以下内容参考自 Stack Overflow 视频链接：iOS内存管理及优化 Clean Memory：在闪存中有备份，能够再次读取。主要包括system framework、binary executable of your app、memory mapped files Dirty Memory：所有非Clean Memory，系统无法回收。包括Heap allocation、caches、decompressed images（解压的图片） 3、虚拟内存之间的关系 虚拟内存层面：（逻辑内存） virtual memory = clean memory + dirty memory. 物理内存层面： resident memory= dirty memory+clean memory that loaded in physical memory 总结： virtual memory == (clean memory + dirty memory) &gt; resident memory &gt;dirty memory // clean memory- (IBAction)clickAction1{ char *buf = malloc(100*1024*1024); //100M 虚拟内存 NSLog(@&quot;%p&quot;,buf);}// dirty memory- (IBAction)clickAction2{ char *buf = malloc(100*1024*1024); //100M 虚拟内存 NSLog(@&quot;%p&quot;,buf); for(int i=0; i &lt; 3*1024*1024; ++i){ //分配3M 物理内存，剩余97M 虚拟内存 buf[i] = rand(); }}- (void)cleanOrDirtyMemory{ NSString* str1 = [NSString stringWithString:@&quot;dirty&quot;];//dirty memory(堆上分配的内存都是 dirty的，不回收的话系统都会占用这个内存) NSString* str2 = @&quot;w&quot;;//存在只读数据段里面 char *buf = malloc(100*1024*1024); //100M 虚拟内存 (clean，因为我们没有访问到) for(int i=0; i &lt; 3*1024*1024; ++i){ //分配3M 物理内存（dirty），剩余97M 虚拟内存(clean) buf[i] = rand();//dirty }} 4、VMTracker： &gt; 官方解释：Adds the Allocations and VM Tracker instruments toyour document. Use this template to monitor memory and object-allocationpatterns in your program &gt; Dirty Size： Swapped Size： Resident Size： 5、参数： 图形列（Graph）： 当指定类别的复选框被勾选时,instrument工具在跟踪面板里面显示特定类别的图形。 Instruments 应用通常给每个图形类别赋一个颜色。 类别(Category)： 通常是一个 Core Foundation 对象、Objective-C 类、或者 malloc 出来的内存空间。 净分配字节数(Persistent Bytes)： 当前已经分配内存但是仍然没有被释放的字节的总数。 净分配数(#Persistent)： 当前已经分配内存但仍然没有被释放的对象或内存块的数量。 临时分配数(#Transient)： 当前已经分配内存但仍然没有被释放的对象或内存块的数量。 总分配字节数(Total Bytes)： 所有已经分配内存,而且包括已经被释放了的字节的总数。 总分配数(#Total)： 所有当前已经分配内存,包括已经被释放了的对象或内存 块的总数。 临时分配/全部内存分配(Transient/Total Bytes)： 当前和全部分配数的直方图。如上图所示当比例变化时,直方条会变颜色，Instruments 应用通常给它们标示不同的颜色来指出分配模式以便进行进一步的研究。 四、Cocoa Layout五、Core Animation六、Core Data七、Counters（计数器）八、Energy Log九、File Activity十、Leaks（内存泄漏）十一、Metal System Trace十二、Network十三、SceneKit十四、System Trace（系统跟踪）十五、System Usage ios 模拟器暂不支持 十六、Time profiler十七、Zombies（僵尸）","link":"/2016/05/15/2016/instrument-详解/"},{"title":"从微信跳一跳学习逆向开发iOS","text":"这几天出了个小程序特别火，借此机会学习下逆向开发。 [TOC] 一、libimobiledevice与 adblibimobiledevice：逆向出 iOS 与 Mac Windows 接口的通讯协议 adb：安卓下调试工具 二、安装libimobiledevice$ brew update$ brew install libimobiledevice# libimobiledevice中并不包含ipa的安装命令，所以还需要安装$ brew install ideviceinstaller","link":"/2017/12/29/2017/从微信跳一跳学习逆向开发iOS/"},{"title":" 闭包、lambda 计算、block","text":"导读： 什么是 block？ block 基本原理是什么？ 使用 block 需要避免哪些问题？ 什么是 blockBlockblock 概念：block是带有自动变量值的匿名函数。也称为闭包（closure）、lambda 计算。 C语言的标注不允许存在这样的函数，但是可以通过函数指针来直接调用函数。 // 声明一个函数int func(int count); // 声明一个函数指针，并取出 func 的地址赋给 *funcPint (*funcP)(int count) = &amp;func; //注：函数形参可有可无，视情况而定// 通过函数名访问这个函数int result1 = func(10); // 通过函数的指针访问这个函数int result2 = (*funcP)(10); 函数指针的用途：函数指针的用途有两个： 调用函数 作为函数的参数 Class* a; // a 是个对象，类型是指针Class *a; // a 是个指针，类型是类/* * 虽然上述写法均表示声明一个指针型变量，但是着重点不同。 * 前者意在声明一个变量，后者意在声明一个指针。 * 这种自行体会就好，不要拘泥于写法。 */ 悬浮指针的出现及避免声明一个指针需要注意的问题： 避免出现悬浮指针（也称迷途指针、失控指针） 悬浮指针的出现：dealloc 一个指针后，没有把指针置空（nil）。 如果再次调用该指针并没有重新赋值，就会出现问题。 注意：空指针 ！= 迷途指针。空指针指向的地址为空。 指针的指针即本身 函数中可能使用的变量： 函数的参数 局部变量（自动变量） 静态变量（静态局部变量） 全局变量 静态全局变量 使用全局变量会占用更多的内存（因为其生命期长），不过在计算机配置很高的今天，这个不应该算什么问题，除非使用的是巨大对象的全局变量，能避免就一定要避免。 OC 中函数和方法的区别函数和对象无关，方法和对象有关。最主要的是，函数和方法写法不一样啊！ 函数是指把一个值通过一系列计算得到一个新的值。 而方法更多考虑的是事情。如让一个人通过一系列动作制造一个新的东西。 为什么 Block 可以作为函数参数和返回值？函数的参数和返回值可以是 void、int，也可以是一个类对象，当然也可以是指针（int char）。而 block 为什么可以作为函数的参数甚至是返回值呢？ 因为block的本质是 OC 对象。（OC 的 层面） block的实质是栈上 block 的结构体实例。（C 的层面）这里也可以理解为是一个函数指针。 // 声明一个参数为 int 型、返回值为 int 型的 blk_t类型typedef int(^blk_t)(int); // 声明一个 blk 变量 int (^blk)(int) = ^(int count){return count+1;}; blk_t blk = ^(int count){return count+1;};// 等价于第二行// 声明一个名为 blkptr 的 blk_t型的指针，并指向 blk 的地址。blk_t *blkptr = &amp;blk;(*blkptr)(10); // 利用指针调用这个 blkblk(10); // 直接调用这个 blk __block 说明符引入__block的目的是用来声明变量的作用域的，意思就是 block 外用__block声明的变量，block 内也能访问到。虽然这货和全局变量有些类似，但是老机器全局变量用多了会导致浪费内存啊！（因为全局变量生命周期比较长）。 吐槽：乖乖用__block吧，特大的对象做全局变量的时候，也是会出现问题的。 block 的实质block的实质是栈上 block 的结构体实例。（吐槽，说白了就是通过指针访问的） （写一个代码用 clang rewrite 一下就明白了，因为有 Foundation 框架，一个5行的代码能重写成将近10万行。。不过核心代码在最后几行，翻到最后看就可以了） 重写代码的时候会发现有三个结构体，一个是__block_imp1另一个是__main_block_imp1_0还有一个是__main_block_desc_0 这里面引申一个概念就是 IMP 和SEL，具体以后再分析(runtime)，知道SEL 表示（选择器） IMP 表示函数指针就可以了。 __block的实质是栈上__block变量的结构体实例。 // block的实质结构typedef objc_class *Class; //Class 为 objc_class 结构体的指针类型typedef struct objc_object{ Class isa;} *id; //id为 objc_objec 结构体的指针类型 将 block源码转换为 C++源码：clang -rewrite-objc filename __block变量的配置存储域 Block 从栈复制到堆是的影响 栈（stack） 从栈复制到堆并被 Block 持有 堆（heap/maclloc） 被 Block 持有 栈上的 block ：变量作用域结束时，栈上的 __block变量和 block 被废弃 堆上的 block：变量作用域结束时不受影响，需要手动释放。 block 循环引用的问题如果在 Block 中使用__strong修饰的对象和变量，那么当 Block 从栈复制到堆上的时候，该对象就会被 Block所持有。这样就会引起循环引用。 循环引用这里有个重点，Block 是存储在栈上的，普通对象和变量是存储在堆上的。堆（malloc）上的内存需要我们手动管理（需要 dealloc），而栈上的内存顾名思义是按照数据结构中栈的方式管理，即由系统进行分配。 对象持有 block =&gt; block持有 self =&gt; self 持有对象，即形成循环引用。（这里的 self 也包含当前类的其他属性，因为在调用属性的同时也截获了 self）。 编译器能查出循环引用。 copy releaseARC 无效的时候，我们需要手动将 Block 从栈复制到堆。 因为 ARC 无效，所以需要我们手动释放复制的 Block。 这个时候我们用 copy 方法来复制，release 方法来释放。 void (^block_on_heap)(void) = [block_on_stack copy];//正常复制[block_on_heap release];//正常释放[block_on_heap retain]; // 因为block 在堆上，所以可以被 retain[block_on_stack retain];// 因为现在 block 在栈上，所以这个方法没用 ARC 是苹果公司在iOS 5 以后推出的内存管理机制。。iOS 5以前是手动管理的。。如果还问我 ARC 的话，那我基本不考虑你们公司了。。。。 __block的作用ARC 无效__block用来避免 Block 中出现的循环引用。 栈——&gt;堆时：__block修饰的变量不会被 retain。没用它修饰的就会被 retain。 ARC 对象操作 OC 方法 生成并持有对象 + alloc、+ new、copy、mutableCopy 持有对象 - retain 释放对象 - release 废弃对象 - dealloc __strong 和 __weak__strong：表示对对象的强引用。即在超出其作用域被废弃时，随着强引用的释放，引用的对象也会被释放。 内存泄露循环引用容易导致内存泄露。内存泄露就是应当废弃的对象在超出其生存周期后继续存在。","link":"/2014/05/15/2014/闭包、lambda-计算、block/"},{"title":"以太坊开发入门","text":"预备知识： 你需要知道区块链的概念及实现一个无需信任的电子货币的运作原理。可以先看看长版，如果你觉得太长，可以看看短版。但我还是建议，看那个长的视频。如果你是一名软件工程师，拥有软件开发的经验。能知道从系统、架构角度学一个东西，其实能倍增学习效果。如果有一周的空闲时间。好了，下面开始就不再是废话了。你需要了解merkle tree的基本概念，看他是如何做到防止信息篡改，以及信息自校验的（译者注：可以看我曾经翻译的以太坊官方的关于merkle tree的文章，http://me.tryblockchain.org/Ethereum-MerklePatriciaTree.html ）。不用必须读白皮书，只需要了解一些基本概念。但说实话，如果不读，不会相信这些概念，从而不能真正明白这些概念，所以读白皮书也许仍然是最快的方式。 我建议你完整的读一下本文，从一个较高的层面了解一下，然后再挑感兴趣的，一一钻研，也许要花几天时间哦。 你最后会发现，区块链就是建立在朴实无华的基本技术之上，一点也不神奇。虽然最近各种ICO把它炒得非常热。每个人都是站在巨人的肩膀上，如果你是程序员，你能对这些项目和技术，理解得更深。所以不要因为其它一些糟粕，而失去了一个提升自己的机会。 以太坊以太坊，Ethereum是一个分布式的计算机，有许多的节点，其中的每一个节点，都会执行字节码（其实就是智能合约），然后把结果存在区块链上。由于整个网络是分布式的，且应用就是一个个的状态组成，存储了状态就有了服务；所以它就能永不停机，没有一个中心化的结点（没有任何一个节点说了算，去中心化的），任何第三方不能干预。 显然上面这一段话，直接解释了以太坊是什么。但你可能有非常多的问题。可以先读一下以太坊的白皮书。或者看下这个视频，25分钟理解以太坊。（译者注：以太坊入门，确实没有什么好的办法，就是看白皮书最好，最快） 智能合约智能合约与平时的代码其实没有什么区别，只是运行于一个以太坊这样的分布式平台上而已。这个运行的平台，赋予了这些代码不可变，确定性，分布式和可自校验状态等特点。代码运行过程中状态的存储，是不可变的。每一个人，都可以开一个自己的节点，重放整个区块链，将会获得同样的结果（译者注：能控制所有节点都达到一致状态，就是所谓的共识）。 在以太坊中，每个合约都有一个唯一的地址来标识它自己（由创建者的哈希地址和曾经发送过的交易的数量推算出来）。客户端可以与这个地址进行交互，可以发送ether，调用函数，查询当前的状态等。 智能合约，本质上来说就是代码，以及代码运行后存储到区块链上的状态两个元素组成。比如，你用来收发ETH的钱包，本质上就是一个智能合约，只是外面套了一个界面。 概念非常强大，而我相信你已经看完了。而你在看相关的新闻，经常听到这个非常有潜力，经常听到资产/权利管理，分权自治组织（DAO），身份，社交网络等炫酷。但他本质就是这些。 Gas智能合约，就是一些代码，运行整个分布式网络中。由于网络中的每一个节点都是一个全节点。这样的好处是容错性强，坏处是效率低，消耗资源与时间（译者注：原来只在一个节点执行一次就行，现在所有节点中每一个，都要执行一模一样的运算）。因为执行计算要花钱，而要执行的运算量与代码直接相关。所以，每个在网络运行的底层操作都需要一定量的gas。gas只是一个名字，它代表的是执行所需要花费的成本（译者注：由于以太坊是图灵完备的，随便一个死循环就将导致网络不可用，所以引入了gas的概念）。整个分布式网络引入了强制限制，来避免停机问题。因此如果你写一个死循环，当gas耗尽后，网络就会拒绝执行接下来的操作，并且回滚你之前的所有操作。 gas的价格由市场决定，类似于比特币的交易费机制。如果你的gas价格高，节点则将优先因为利益问题打包你的交易。 一般来说，在Ethereum中计算和存储东西比在传统环境中做的更为昂贵，但是，Ethereum为您的代码提供了上述我们讨论过的那些好的属性，这可能是一样有价值的。 一般来说，在以太坊网上读取状态是免费的，只有写入状态是收费的。下面这个文章是gas概念的一些深度解析。 分布式APP（ĐApp / Dapp / dapp/ dApp）一个分布式App是指，服务端运行于以太坊网络上一个或多个智能合约。 一个分布式的App不用将所有状态都存储在区块链上，或者在链上进行所有计算（译者注：比如图形渲染），这样就太花gas了。所以一个分布式App把需要大家共同信任的状态存在区块链上就好了。许多的分布式应用使用后面提到的技术，如IPFS和Gelem，在链下进行分布式存储和计算。虽然没在以太坊上，但仍使用的是区块链技术。 我不知道谁开始在D上使用这个小小的缺点，是看起来酷，但会影响搜索。 你可以自由使用，但尽量方便别人的搜索。 以太坊的github上，有一个dapp-bin的目录，有一些文档和示例。使用前，你需要看看文件最近的状态，因为他们将很可能已经被淘汰。 DApp客户端大多数的分布式应用都通过一些用户友好的前端提供服务，因为不是所有人都愿意通过命令行，通过自己手动组装哈希串和操作指令码进行交易。 一个DApp与传统的开发中的，客户端或前端是类似，区别仅在于它们与以太坊的区块链进行交互（也可以同时与其它服务交互）。这些客户端往往用JS编写，因为当前还暂时没有完成全部的向NodeJS的转换。 另外，大多数的Dapp客户端使用JS的原因，是因为它可以在浏览器中运行，因为大家都有浏览器，这样每个人都可以运行了。由于有更多的go语言的开发工具，使用go语言来写客户端的也不少。在现在这个激烈的发展期，这意味着，除非你有自己的偏好，否则可能要从go和JS（也许还有，Rust）来选择一种语言，来与以太坊区块链，以及基于以太坊开发的协议进行交互了。 以太坊的一个核心开发者，写了一篇关于使用Meteor工具来创建Dapp的文章，这意味着Meteor已经成为Dapp客户端开发的新标准。这绝对是基于JS建立全栈应用时的一个首选方法。但需要注意的是Meteor只是提供了一个开发工具，与DApp客户端并不等同，DApp客户端也完全可以由其它方式开发。（译者注：还有一些其它的开发工具，如Truffle，也是非常不错的哦）。 因为围绕Meteor和DApp开发的活跃，有非常多的包在Atmophere（Meteor的包管理工具），它提供了许多常见的操作，如帐户管理，从区块链中获得最新的50个区块等等。 DApp浏览器一个DApp浏览器，正如它字面所表达的，用来让DApp客户端（常常使用JS与以太坊的智能合约进行交互）的使用更加容易。 DApp浏览器的主要目的是： 提供到一个以太坊节点的连接（或者连接到一个本地节点或者远程节点），和一个方便的切换不同节点（甚至是不同的网络）。提供一个帐户（或者一个钱包）来方便用户与DApp交互。Mist是以太坊官方的DApp浏览器。一个漂亮的界面来与以太坊节点交互，与智能合约发、收交易。 Status是一个手机上可以使用的DApp浏览器。 MetaMask是一个Google浏览器扩展，把Chrome变成了一个DApp浏览器。它的核心特性是注入以太坊提供的js客户端库web3，到每一个界面，来让DApp连接到MetaMask提供的以太坊节点服务。不过这个Chrome扩展，可以允许你管理你的钱包，以及连接到不同的以太坊网络（译者注：包括本地的开发网络）。 Parity是一个以太坊客户端（也是一个全节点的实现），集成到了Web浏览器，并使之成为一个DApp浏览器。 以太坊节点与比特币的节点类似。每个节点都存储了整个区块链的数据，并重放所有的交易以验证结果的状态。你可以通过geth来运行一个全节点（官方的节点，go语言），或者parity来运行一个轻节点，它是第三方的，Rust语言写的。 你的节点需要知道从哪个区块链下载数据，以及与哪些节点交互，后面会说明一些常见的网络。 你也许可以运行下所有这些节点客户端。如果你不想自己运行一个这样的节点，有第三方的网关服务，比如Infura可以选择。另外还有专门用于测试和开发的，本地版本的节点，后面会提到。 如果你正在开发一个DApp的客户端，你并不总是需要主动提供连接到以太坊的节点。因为DApp的浏览器一般会提供对应的连接（译者注：话说这样，那使用这个，还得额外安装一个DApp浏览器呀）。 以太坊代币现在你应该知道我们可以通过写智能合约，并将状态存到区块链上了？那如果，在状态这块，我们存的是一个Map类型，键是地址，值是整数。然后我们将这些整数值叫做余额，谁的余额呢？它就是我们要说的代币（译者注：代币的数据结构就是这样简单，存的就是某个用户，它当前的余额）。 是的，所有你刚才听到的代币，只是一些数据，存储在一个哈希表里，通过api或者所谓的协议，来进行增删改查。这是一个简单的基本合约。 你可以看看ethereum的创建一个众筹合约的官方教程。你将会发现它仅仅是一个合约（Crowdsale）与另一个合约（MyToken）交互，和前面的基本合约类似。并没有什么神奇的地方。 人们使用代币来做各种各样的事情，阻拦大家如何使用的只有想像力。代币常常用来激励用户与某个协议进行交互，或者证明对某个资产的所有权，投票权等等。Coinbase的Fred有一个很好的关于代币，为什么存在，如何使用的文章。 Ethereum的创始人Vitalik最近有一个关于代币发售模型，也是一篇不错的文章。 ERC20代币与ERC23代币每个人都开始定义自己与代币的交互协议，但这些很快显得陈旧，所以一些人开始集结起来，创建了ERC20代币接口标准。大概意思是说，我们定义这些接口，这样大家可以相互统一调用，比如转帐定义为transfer，第一个参数为要转去的帐户地址address _to，第二个参数为要发送的ether的uint _value数量。 有些人觉得ERC20协议过于复杂了，所以他们提议了ERC197，稍微简单一点。 由于在ERC20中存在的一个小问题，有人提议了一个新的ERC23。ERC23是向后兼容ERC20的。如果你已经创建了一个代币合约，可以尝试来支持ERC23。 看起来ERC223和ERC23是相同的概念；ERC的值是223，但是当引用时，作者和所有的其它人误写成了ERC23非常多次，它现在也还是这样引用的。如果一句话说清楚的话，ERC223是规范号，代币说明时称为ERC23代币就好了。 协议代币与App币协议代币为用来激励对某个协议的使用。比如，REP，Augur的声誉代币，用来鼓励对Augur去中心化预测协议的使用。大多数的以太坊的ERC20/ERC23代币都是协议代币，比如Golem的GNT，ICONOMI，BAT等等。 App币则是用来激励对某个特定DApp或客户端的使用，而不是因为其使用的协议提供的价值。其中一个例子是Status的SNT代币，可以用来在应用内获得价值（比如，进行消息推送，投票权，获得用户名等等）。 这种范式的转变是，我们可以开始投资协议代币而不是应用程序代币，因为我们可以建立在它们之上（任何人都可以在协议之上构建一个dapp，或为实现该协议的Dapp构建一个Dapp客户端）。 之前，这并不可能，因为加密代币，以及接下来的协议创新的时代，为了实现货币化，你自己可以在协议之上创建一个应用，并实现赢利。因为你自己可以实现协议的货币化，大家可以在未来更好的协作。 你也许可以阅读一下，关于0xProject的下面这篇文章，关于这两者区别的详细说明。 与智能合约交互你与智能合约的交互（也称做调用函数和读取状态）通过连接到某个以太坊节点，并执行操作码。当前有各种各样的以太坊客户端，可以方便进行开发。Geth和parity都提供了控制台或浏览器的方式来更好的与智能合约交互。 如果你想要一个程序的库用来与智能合约交互的接口，也有这样的客户端实现。对于JS语言，可以使用web3.js。以于go语言，可以使用在go-ethereum中的abigen的程序，提供了go包，用来与智能合约交互。 如果只是用来测试和开发，可以使用ethereumjs-testrpc来运行一个本地节点（译者注：这个节点压短区块时间等，可以方便打整的开发与测试）。 当你部署了一个智能合约，你实际进行的操作是向地址0x0发送了一个交易，使用当前合约内容作为参数，一个以太坊交易详解。 Truffle和Embark一旦你开始写智能合约，你会重复做大量的操作，比如编译源码为字节码和abi，部署到网络，测试然后部署合约等等。你也许希望更关注于你想要实现的东西。 Truffle和Embark框架，标准化和自动化了这些琐碎的工作。它们提供了一个好的开发，部署，以及更为重要的，测试智能合约的体验。 你可以查看这个文章来开启使用Truffle的旅程。 这篇文章，提供了使用Truffle来部署以及与智能合约交互的文章。 Embark提供了类似的，帮助开发者组织工程的稍有些不同的工具。 当你一开始接触智能合约这块时，应该尽量不要使用框架。直到你明白了使用框架能带来的价值时，才应该开始使用，正如你不应该通过rails new来学习HTML语言一样。 ETHPM分享是关心，所以ETHPM是一个去中心化的智能合约包管理资源库。使用ETHPM，你可以关联或连接到某个著名的合约或库，减少代码重复，尽可能理想的为未来的开发提供好的基础。 这里的这个规范，详细的说明了相关的信息以及背景。Truffle和Embark均可与之集成，并创造一个愉快的开发体验。 网络Mainnet-以太坊主网，通常是所有客户端的默认网络。 Ropsten - 以太坊使用工作量证明的主测试网络。这个网络，因为低的计算量，容易遭到DDOS攻击，分片，或者其它问题。垃圾邮件攻击后被暂时放弃，最近才恢复使用。 Kovan-parity客户端组成的测试网络，使用授权证明来提升对垃圾邮件攻击的抗扰度，并且持续4秒的阻塞时间。 Rinkeby-geth客户端组成的测试网络，使用集团共识，尽管计算量低，但是对恶意行为者更有弹性。 你可以自己搭建你自己的测试网络，也许使用kubernetes或者docker-compose，但也许你将很快就可以不需要花什么时间。 帐户与钱包一个以太坊帐户就是一个私钥和公钥地址对。它们可以用来存储ether，创建时不需要花费gas。 钱包则是用来管理ether的智能合约（一些代码）。这里是使用solidity写的一个钱包，运行于Mist浏览器。他们可以有许多的特性，比如多用户签名，纸？等等。 这样，我们就正确的定义了两个名词，前面看到其它人对这两个术语的困惑，并把所有能存ether的都叫作Wallet。 EVM以及智能合约创建的状态在每个全节点网络上运行的智能合约代码在EVM内执行。这是您的标准虚拟机，执行一些字节码，除了这个vm与网络，文件系统，进程等隔离。没有人想要编写字节码，所以我们有一些更高级别的语言编译为EVM字节码。 SoliditySolidity是第一批的描述智能合约的语言。当前是最流行的语言，因此也有最多的例子，文档，和教程。你应该学习这个，除非你有要学习其它的理由。 你可以使用基于浏览器的Remix IDE来进行快速验证。 下面是一个Solidity的合约： pragma solidity ^0.4.11;contract BasicToken {mapping(address =&gt; uint256) balances;function transfer(address _to, uint256 _value) returns () { balances[msg.sender] = balances[msg.sender] - _value; balances[_to] = balances[_to] + _value; }function balanceOf(address _owner) constant returns (uint256 balance) { return balances[_owner]; }}LLLLLL，是一门Lisp风格的底层编程语言，就像语言名称看到的这样。虽然以太坊官方并没有将它作为主要需要支持的语言，但它仍旧持续进行着更新，且与solidity在同一个资源库。 这是一个使用LLL语言写的一个ERC20代币的合约 LLL示例如下： (seq (def ‘node-bytes 0x00) (def ‘owner 0x20) ; address (def ‘set-node-owner 0x5b0fc9c3) ; setOwner(bytes32,address) (def ‘get-owner (node) (sload (+ node owner))) //只是用来示例，不能编译通过如果你正在学习，也许不是那么的容易习惯LLL语言的写法。 SerpentSerpent是一个类Python的高级语言，最终也会被编译为EVM字节码。它主要被Augur团队使用。 但最近Zeppelin Solution团队发现其编译器有一个严重的bug，在这个问题被修复之前都不建议继续使用。 如果你对Augur如何解决这些漏洞感兴趣，你可以阅读Zeppelin Solution的这篇文章。 Serpent的合约看起来如下： def register(key, value): # Key not yet claimed if not self.storage[key]: self.storage[key] = value return(1) else: return(0) # Key already claimed def ask(key): return(self.storage[key])其它在各种可用性和发展状态中还有一堆其他的高级语言，而且无疑将会被开发出来。 为了广泛采用，语言和编译器必须经过彻底的审查和测试，这当然需要时间。 智能合约反编译/Disassembly可以通过prosity来反编译以太坊智能合约的字节码，可以使用evmdis来Disassembly。 智能合约的安全一旦一个智能合约部署到了以太坊的网络上，它将是永不可变的，且将永久存在。如果你写了一个bug，你将不能下架这个有问题的版本，你只能在后续的版本中修复。 由于许多工程师开发的Ethereum和其他智能合同平台来自于Web开发，所以这个概念实在是太新，而且是疯狂的。 ConsenSys有一个非常棒的资源叫智能合约的最佳实践，你应该深入的理解一下。 一个Parity的钱包被黑的解释。 在你部署你的智能合约的时候，由于你管理的是真正的资金，你应该先开一个赏金计划，并尽量保证它完整的测试过。 WhisperWhisper是一个集成进以太坊的消息系统。它允许DApp发布小量的信息来进行非实时的消息通信。 它使用shh协议。 尽管它已经有段时间没有更新了，这是一个使用Whisper协议实现一个聊天客户端的例子。 去中心自动化组织（DAOs）这是一个组织（就像，一群人），其中，使用代码来保证最终的强制执行，而不是使用传统的法律文件。这群人使用智能合约来做常见组织做的所有的事情，比如在某件事上进行投票，比如决定是否对什么进行投资等等。 副作用是决策，管理，以及对什么进行投资的结果将会不可改变的存储在区块链上。 之前slock.it创建了标准的DAO框架来说明这个理念。在这里有对DAO概念的总览，以及如何使用框架来实现一个自己的DAO（译者注：这个项目由于bug被黑客攻击了）。 AragonAragon也正在应对挑战，设计一个根据智能合约逻辑运作的公司，重点是创建一个可以接受投资，处理会计，支付雇员，分配股权，正如我们现在知道的完成每天的公司的业务。他们也实现了漂亮的DApp客户端来让他们的协议使用起来更为简单。 查看这里Aragon核心合约来更多的理解它是如何做的。 IPFS&amp;FileCoinIPFS（星际文件系统）是一个协议，用来分发文件。你可以认为它是一个基于bittorrent和git这样概念的一个文件系统，文件可以定位，且是不可变的。IPFS以IPLD数据模型存储信息，它非常有趣，提供了一些特别的特性，你可以通过下面的说明了解一些。 这是一个新的协议，它有一个http的网关和文件系统适配器，这让你可以通过http，挂载整个互联网文件系统到你本地的盘/ipfs。IPFS还提供了一个寻址服务IPNS（星际命名空间），它允许可变的状态（需要注意的是在IPFS里的所有东西都是不可变的）。你甚至可以使用DNS TXT记录来定位到你的IPNS客户端，允许你生成用户友好的链接来指向到对应的数据。 FileCoin是Protocol Lab为创建一个去中心化的基于IPFS的存储市场的努力结果，也就是向整个网络提供存储资源的激励层。FileCoin的共识协议没有使用浪费资源的工作量证明，而是使用了Proff of Replication和Proof of SpaceTime来保证每片数据被复制某个特定的拷贝数量且存储某个特定的时间。 你应该读一下IPFS的白皮书，FileCoin的白皮书，以及IPLD的规范。 由于当前FileCoin还没有上线，你可以使用当前的IPFS存储网络来运行html/css/js，并把作为一个类似orbit-db的数据库。 SwarmSwarm是一个去中心化的存储网络，集成于以太坊生态系统，作为第一阵营的项目，看看这里关于IPFS与这个项目的比较和优劣。但本质上，基本上是一样的，除了它们有不同的哲学，并在底层使用稍微不同的协议。 项目AugurAugur是一个去中心化的预测市场，让大家对于某个现实世界的事件进行对赌。一方面，用户在某个具体可以发生的事件上投注，一旦结果成真，它们赢得的代币有真正的价值。为了实现这个，你需要实现一个去中心化的先知协议，来输入现实世界中的信息，它使用REP协议代币来进行经济激励。 你可以看看Augur项目的合约代码，以及了解下Augur Master Plan。 GnosisGnosis与Augur有类似的理念，也是一个去中心化的预测市场。这是项目的白皮书，以及与Augur项目的对比。 GolemGolem是一个分布式的算力市场，以与IPFS一样的方式构建了一整套的提供算力市场。 你可以看看FAQ来更好的理解。 0xProject0xProject创建了一个交换代币的协议，以及一个DApp来实现这个协议。开发者可以创建一个基于它们自己的分布式应用创建交易所（技术上叫中继层），而用户也不用信任这些app就可完成交易，结算在区块链上完成。0x协议旨在使用离线的第三方来广播交易和管理订单（可以创建/更新/删除订单，而不用直接向Ethereum发送缓慢/昂贵的交易），但最终会使用Ethereum进行结算。 它们实现了场外交易，一个DApp使用这个协议来在用户之间直接交换代币。你可以在github上查看他们的合约。 你还可以跳过这些酷炫的概念，直接阅读FAQ。 SwapConsenSys的Swap协议也是非常类似的，但更专注于p2p的直接交易（而不是基于订单表），这里有一个白皮书，可以看看，这里有一个关于Swap协议的介绍。 Bancor代币的流动性是相对来说在加密币的生态中是一个非常大的问题。在用户间的交易需要满足买方和卖方两边的想法。 Bancor是一个协议，可以让你的代币1）可以根据订单自动给予价格2）可以通过持有其它的代币作为抵押器来即时创造流动性。 查看这里的白皮书 Makerdao &amp; Dai以太坊区块链管理的代币价值往往会有巨大的波动。这个特性在现实生活中则非常不好，比如你的目标是用来保值。 Maker DAO是一个DAO来管理Dai稳定币。Dai现在还不存在，但他们已经发布了一个alpha的版本叫Sai来展示这门技术。 这里是DAI的白皮书。 Oraclize如果我们要向智能合约中输入一些信息，比如纽约今天的天气，我也许需要实现一个去中心化的先知协议询问一批人（花费高且慢），但如果写一个服务以中心化的方式来提供信息，又违背了去中心化应用的理念。 Oraclize尝试用以下方式来解决问题1）从一个外部数据源向你的智能合约发送数据。2）提供一个证明，数据来自某个数据源，且没有被修改过。由此如果你信任random.org，你可以使用Oraclize来提供一个随机数生成合约。 他们的集成非常强大; 您可以获取URL，解析JSON和XPATH，查询Wolfram Alpha等。 BTCRelayBTCRelay作为比特币区块链交易的先知机制，这意味着你可以在以太坊上编写智能合约来响应比特币区块链上的某个交易，进行触发后续的操作。比如，你可以让人通过BTC为你的服务付费，使用BTCRelay在以太坊上校验付款成功后，继而在以太坊上提供对应的服务。 Open Zeppelin &amp; zeppelinOSZeppelin Solutions是一个科技公司，在这个领域内正完成一些伟大，而且专业的事。它们实在做了太多事，太难一一说清了。 他们管理了Open Zeppelin，一系列经过审查的，最佳的智能合约实践，你可以继承并应用于你自己的DApp中。你可以查看他们的github资源来学习更多。你应该读一下里面的每一个合约。 他们坚持代码复用的理念，然后进一步创建了Zeppelin OS。你可以忽略OS，它不是传统意义上的操作系统的概念。zeppelinOS特性，工具和服务的集合，旨在提供稳固的开发人员体验，同时最大限度地提高智能合同安全性。 zeppelinOS中的其中一部分是“zeppelinOS Kernel”。其实他们不是传统意义上的核心，而且是一组库。它们是通过库模型实现的可升级的智能合约，可以在出现安全问题时独立的进行更新。因为你在合约内包含的代码更少，部署也将花费更少的gas，而开发者也减少了代码的重复。 zeppelinOS还有一些其他整齐的规划，比如调度程序（智能合约的异步执行，因为默认合同一般不会主动触发某个行为），市场级的协议和链下开发者体验工具。 ENS - 以太坊的命名服务ENS是一个去中心化的名称注册服务。并有一个描述性的项目名称。 BAT 基础注意力代币 &amp; Brave浏览器BAT尝试去中心化广告系统，通过监控大家的注意力，并在内容提供商，广告商和用户之间分发收益，切掉中间人。 Brave和BAT由JS创始人Brendan Eich创建，同时他也是Mozilla的联合创始人。 uPortuPort在解决去中心化的身份识别问题。 district0xdistrict0x是一个更高层级的去中心化的市场和社区。核心是通过一系列的智能合约来管理用户发布信息，搜索，过滤信息，在社区内维护信誉，管理支付等等。它可以用来建议如Ethlance和NameBazaar这样的市场。 他们有非常棒的视觉设计。 SteemSteem是区块链上的reddit，它使用协议代币（STEEM）来激励这个社交社区的参与度。 在这里查看白皮书。 有一些关于Steemit块链如何启动以及支持组织如何运作的反应。 参与者与领域内的玩家ConsenSysConsenSys（有点像共识Consensus，但作为一个公司名称;它很聪明，巧妙的把u改成了s，但我一般念为“con-SEn-SIS”，避免读错）是一个“风险投资和产品工作室”。他们是一个（其实非常大）伞形组织，它赞助了一大堆项目和核心组件的开发。值得一提的是，它们资助了Truffle，Infura，MetaMask，Gnosis和uPort。 Zeppelin SolutionsZeppelin Solutions在上面我们有提到过，他也审查智能合约代码，提供咨询服务。他们的博客质量相当高。 Protocol LabsProtocol Labs是一群让人印象深刻的人，致力于IPFS，FileCoin，lip2p以及IPLD等其它项目的开发。 区块链资本概况Etienne Brunet有一篇关于代币，ICO和VC的概况文章。 社区你可以加入以太坊的社区。 未来未来展望。","link":"/2018/04/13/以太坊开发入门/"},{"title":"ios知识脉络梳理","text":"本文收录并整理了一些 iOS 开发知识盲点。 目录 [TOC] （一）、Foundation 相关知识点一、内存管理的思考方式1、内存管理的原则： 自己生成的对象，自己持有 不是自己生成的对象，自己也能持有 （需要手动 retain） id obj = [NSMutableArray array]; // 取得对象的存在，但自己并不持有[obj retain]; // 自己持有对象 不是自己持有的对象，自己无法释放 不在需要自己持有的对象时，就要释放 对象操作 OC 方法 生成并持有 +new/+alloc/-copy/-mutableCopy 持有对象 -retain 释放对象 - release 废弃对象 - dealloc 2、autorelease：（与 release 的区别） autorelease 可以取得对象的存在，但是自己不持有对象； autorelease 可以是对象在超出指定的生存空间时能够自动并正确的释放； autorelease 不是立即释放对象的，而是将该对象注册到 autoreleasepool 中，pool 结束时（drain）自动调用 release 3、 所有权修饰符：（一共四种） __weak（__weak修饰的变量所引用的对象被废弃时，会将 nil 赋给该变量） __strong __unsafe_unretained __autoreleasing ​ 4、property声明的属性与所有权修饰符的对应关系 property 声明中的属性 所有权修饰符 assign __unsafe_unretained `unsafe_unretainedcopy` __unsafe_unretained retain __strong strong __strong copy __strong(赋值的是被复制的对象) weak __weak 5、objc使用什么机制管理对象内存？ 通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。 6、ARC通过什么方式帮助开发者管理内存？ 7、不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建） 8、苹果是如何实现autoreleasepool的？ 二、block 与内存管理1、使用block时什么情况会发生引用循环，如何解决？2、在block内如何修改block外部变量？3、使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？三、关于 Copy 的一些问题1、如何让自己的类用 copy 修饰符？让自己的类用 copy 修饰符： 声明该类遵循 NSCopying 协议或者遵循 NSMutableCopying 协议 实现 -copyWithZone： 方法，该方法生成并持有该对象的副本。 2、如何重写带关键字的 setter？_obj = [obj copy]; // 返回一个该对象的副本 3、用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？4、深复制（内容复制）和浅复制（指针复制）为了弄清这个概念，我们先来弄清楚在 集合与非集合类的 可变和不可变对象分别执行 copy 和 mutableCopy 操作。 /* * 1、无论是集合类和非集合类，只有不可变对象进行 copy 操作是浅复制，其他情况均是深复制，因为副本的结果是不 * 可变的。其他情况副本的结果是可变的。 * * 2、集合对象的内容复制仅局限于本身，对于元素来说，仍然是指针复制（浅复制）。所以，集合对象的深复制是单层 * 深复制。 */[immutableObject copy] // 浅复制[immutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制)[mutableObject copy] //深复制 (对集合类来说，是单层深复制)[mutableObject mutableCopy] //深复制 (对集合类来说，是单层深复制) 关于叫复制还是叫拷贝，我觉得叫复制更为准确些，这个过程有点像 OSX 复制一个文件的副本的感觉 1: https://www.zybuluo.com/MicroCai/note/50592 “iOS 集合的深复制与浅复制” 四、关于@property1、@property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？ 原子性：nonatomic、atomic （默认是 atomic）（atomic 需要消耗大量内存资源，故ios 不推荐使用） 读写：readonly、readwrite （默认是readwrite） 内存管理：strong、weak、assign、copy、unsafe_unretained（默认是 strong 或assign） 重命名方法名： setter=&lt;#name#&gt;不常用，也不推荐使用 getter=&lt;#name#&gt; 2、@protocol 和 category 中如何使用 @property 在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性 category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数： objc_setAssociatedObject objc_getAssociatedObject 3、weak属性需要在dealloc中置nil么？不需要。ARC 下无论是 strong 还是 weak 都不需要置nil，ARC 会自动帮我们做这件事情。 4、@synthesize和@dynamic分别有什么作用？一般情况下：成员变量 + @synthesize = @property @property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是@syntheszie var = _var; @synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。 @dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 instance.var = someVar，由于缺 setter 方法会导致程序崩溃；或者当运行到 someVar = var 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。 5、什么情况需要@synthesize 同时重写了 setter 和 getter 时（这种情况访问下划线变量会报错） 重写了只读属性的 getter 时 使用了 @dynamic 时 在 @protocol 中定义的所有属性 在 category 中定义的所有属性 重载的属性 6、IBOutlet连出来的视图属性为什么可以被设置成weak?五、关于运行时 RuntimeObjective-C 是一门动态语言，主要就体现在Runtime 上。 1、向对象发送一个消息和objc_sendMessage(receiver, SEL：MethodID)函数有什么关系？ [obj foo];在objc编译时，会被转意为：objc_msgSend(obj, @selector(foo));。 2、什么时候会报unrecognized（未被承认的） selector的异常？3、一个objc对象的isa的指针指向什么？有什么作用？指向该对象的类对象。 @interface Chinese : People Chinese isa People 4、super 和 self 有什么区别？ super的本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。 super：先找父类的方法，没有在找子类； self：先从当前类的列表里开始找，如果没有在去父类那找。 5、 runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法） 每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现。 IMP methodIMP = [self methodForSelector:@selector(foo:)];methodIMP(); // 所以 IMP 实际上是一个指针，此处 IMP 应该是Implementation的缩写 6、objc中的类方法和实例方法有什么本质区别和联系？ 类方法： 类方法是属于类对象的 类方法只能通过类对象调用 类方法中的self是类对象 类方法可以调用其他的类方法 类方法中不能访问成员变量 类方法中不能直接调用对象方法 实例方法： 实例方法是属于实例对象的 实例方法只能通过实例对象调用 实例方法中的self是实例对象 实例方法中可以访问成员变量 实例方法中直接调用实例方法 实例方法中也可以调用类方法(通过类名 7、_objc_msgForward函数是做什么的，直接调用它将会发生什么？8、 runtime如何实现weak变量的自动置nil？9、能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？10、 IB中User Defined Runtime Attributes如何使用？六、RunLoop 和多线程1、runloop和线程有什么关系？2、runloop的mode作用是什么？3、 以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？4、猜想runloop内部是如何实现的？5、如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）6、dispatch_barrier_async的作用是什么？7、苹果为什么要废弃dispatch_get_current_queue？因为容易造成死锁 8、多线程原子性与非原子性、自旋锁与互斥锁的问题七、KVO、单例、代理1、addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？2、如何手动触发一个value的KVO3、 KVC的keyPath中的集合运算符如何使用？4、 KVC和KVO的keyPath一定是属性么？5、何关闭默认的KVO的默认实现，并进入自定义的KVO实现？6、apple用什么方式实现对一个对象的KVO？八、调试与 LLDB1、如何调试BAD_ACCESS错误2、 lldb（gdb）常用的调试命令？3、BAD_ACCESS在什么情况下出现？九、基础知识1、iOS中self.和下划线的区别？参考链接 2、懒加载与单例模式的区别？懒加载是重写的 get 方法，懒加载也称延迟加载，即在使用的时候才加载，不用在 viewDidLoad 里就全部分配内存，保证了用的时候在分配内存 单例模式指的是某个类的对象是系统的唯一实例。","link":"/2014/12/19/2014/ios知识脉络梳理/"},{"title":"Xcode 环境变量","text":"在build 过程中，要想观察所有已存在的环境变量，你可以在 Build Phases 中添加一个 “Run Script”，并勾选上 “Show environment variables in build log”。 PhaseScriptExecution Run\\ Script /Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/Script-993355071C92B75C004569A0.sh cd \"/Users/home/Desktop/Learning/codebase/My TableView/SelfSizedCellByCodeExample\" export ACTION=build export AD_HOC_CODE_SIGNING_ALLOWED=NO export ALTERNATE_GROUP=staff export ALTERNATE_MODE=u+w,go-w,a+rX export ALTERNATE_OWNER=home export ALWAYS_SEARCH_USER_PATHS=NO export ALWAYS_USE_SEPARATE_HEADERMAPS=NO export APPLE_INTERNAL_DEVELOPER_DIR=/AppleInternal/Developer export APPLE_INTERNAL_DIR=/AppleInternal export APPLE_INTERNAL_DOCUMENTATION_DIR=/AppleInternal/Documentation export APPLE_INTERNAL_LIBRARY_DIR=/AppleInternal/Library export APPLE_INTERNAL_TOOLS=/AppleInternal/Developer/Tools export APPLICATION_EXTENSION_API_ONLY=NO export APPLY_RULES_IN_COPY_FILES=NO export ARCHS=arm64 export ARCHS_STANDARD=\"armv7 arm64\" export ARCHS_STANDARD_32_64_BIT=\"armv7 arm64\" export ARCHS_STANDARD_32_BIT=armv7 export ARCHS_STANDARD_64_BIT=arm64 export ARCHS_STANDARD_INCLUDING_64_BIT=\"armv7 arm64\" export ARCHS_UNIVERSAL_IPHONE_OS=\"armv7 arm64\" export ASSETCATALOG_COMPILER_APPICON_NAME=AppIcon export AVAILABLE_PLATFORMS=\"watchos iphonesimulator macosx appletvsimulator watchsimulator appletvos iphoneos\" export BITCODE_GENERATION_MODE=marker export BUILD_ACTIVE_RESOURCES_ONLY=YES export BUILD_COMPONENTS=\"headers build\" export BUILD_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products export BUILD_ROOT=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products export BUILD_STYLE= export BUILD_VARIANTS=normal export BUILT_PRODUCTS_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products/Debug-iphoneos export CACHE_ROOT=/var/folders/vp/gh5sjvr13k5_r7tb5_n8y92c0000gn/C/com.apple.DeveloperTools/7.2.1-7C1002/Xcode export CCHROOT=/var/folders/vp/gh5sjvr13k5_r7tb5_n8y92c0000gn/C/com.apple.DeveloperTools/7.2.1-7C1002/Xcode export CHMOD=/bin/chmod export CHOWN=/usr/sbin/chown export CLANG_CXX_LANGUAGE_STANDARD=gnu++0x export CLANG_CXX_LIBRARY=libc++ export CLANG_ENABLE_MODULES=YES export CLANG_ENABLE_OBJC_ARC=YES export CLANG_MODULES_BUILD_SESSION_FILE=/Users/home/Library/Developer/Xcode/DerivedData/ModuleCache/Session.modulevalidation export CLANG_WARN_BOOL_CONVERSION=YES export CLANG_WARN_CONSTANT_CONVERSION=YES export CLANG_WARN_DIRECT_OBJC_ISA_USAGE=YES_ERROR export CLANG_WARN_EMPTY_BODY=YES export CLANG_WARN_ENUM_CONVERSION=YES export CLANG_WARN_INT_CONVERSION=YES export CLANG_WARN_OBJC_ROOT_CLASS=YES_ERROR export CLANG_WARN_UNREACHABLE_CODE=YES export CLANG_WARN__DUPLICATE_METHOD_MATCH=YES export CLASS_FILE_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/JavaClasses export CLEAN_PRECOMPS=YES export CLONE_HEADERS=NO export CODESIGNING_FOLDER_PATH=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products/Debug-iphoneos/SelfSizedCellByCodeExample.app export CODE_SIGNING_ALLOWED=YES export CODE_SIGNING_REQUIRED=YES export CODE_SIGN_CONTEXT_CLASS=XCiPhoneOSCodeSignContext export CODE_SIGN_IDENTITY=\"iPhone Developer\" export COLOR_DIAGNOSTICS=NO export COMBINE_HIDPI_IMAGES=NO export COMMAND_MODE=legacy export COMPOSITE_SDK_DIRS=/var/folders/vp/gh5sjvr13k5_r7tb5_n8y92c0000gn/C/com.apple.DeveloperTools/7.2.1-7C1002/Xcode/CompositeSDKs export COMPRESS_PNG_FILES=YES export CONFIGURATION=Debug export CONFIGURATION_BUILD_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products/Debug-iphoneos export CONFIGURATION_TEMP_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos export CONTENTS_FOLDER_PATH=SelfSizedCellByCodeExample.app export COPYING_PRESERVES_HFS_DATA=NO export COPY_HEADERS_RUN_UNIFDEF=NO export COPY_PHASE_STRIP=NO export COPY_RESOURCES_FROM_STATIC_FRAMEWORKS=YES export CORRESPONDING_SIMULATOR_PLATFORM_DIR=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform export CORRESPONDING_SIMULATOR_PLATFORM_NAME=iphonesimulator export CORRESPONDING_SIMULATOR_SDK_DIR=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk export CORRESPONDING_SIMULATOR_SDK_NAME=iphonesimulator9.2 export CP=/bin/cp export CREATE_INFOPLIST_SECTION_IN_BINARY=NO export CURRENT_ARCH=arm64 export CURRENT_VARIANT=normal export DEAD_CODE_STRIPPING=YES export DEBUGGING_SYMBOLS=YES export DEBUG_INFORMATION_FORMAT=dwarf export DEFAULT_COMPILER=com.apple.compilers.llvm.clang.1_0 export DEFAULT_KEXT_INSTALL_PATH=/System/Library/Extensions export DEFINES_MODULE=NO export DEPLOYMENT_LOCATION=NO export DEPLOYMENT_POSTPROCESSING=NO export DEPLOYMENT_TARGET_CLANG_ENV_NAME=IPHONEOS_DEPLOYMENT_TARGET export DEPLOYMENT_TARGET_CLANG_FLAG_NAME=miphoneos-version-min export DEPLOYMENT_TARGET_CLANG_FLAG_PREFIX=-miphoneos-version-min= export DEPLOYMENT_TARGET_SETTING_NAME=IPHONEOS_DEPLOYMENT_TARGET export DEPLOYMENT_TARGET_SUGGESTED_VALUES=\"6.0 6.1 7.0 7.1 8.0 8.1 8.2 8.3 8.4 9.0 9.1 9.2\" export DERIVED_FILES_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/DerivedSources export DERIVED_FILE_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/DerivedSources export DERIVED_SOURCES_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/DerivedSources export DEVELOPER_APPLICATIONS_DIR=/Applications/Xcode.app/Contents/Developer/Applications export DEVELOPER_BIN_DIR=/Applications/Xcode.app/Contents/Developer/usr/bin export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer export DEVELOPER_FRAMEWORKS_DIR=/Applications/Xcode.app/Contents/Developer/Library/Frameworks export DEVELOPER_FRAMEWORKS_DIR_QUOTED=/Applications/Xcode.app/Contents/Developer/Library/Frameworks export DEVELOPER_LIBRARY_DIR=/Applications/Xcode.app/Contents/Developer/Library export DEVELOPER_SDK_DIR=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs export DEVELOPER_TOOLS_DIR=/Applications/Xcode.app/Contents/Developer/Tools export DEVELOPER_USR_DIR=/Applications/Xcode.app/Contents/Developer/usr export DEVELOPMENT_LANGUAGE=English export DOCUMENTATION_FOLDER_PATH=SelfSizedCellByCodeExample.app/English.lproj/Documentation export DO_HEADER_SCANNING_IN_JAM=NO export DSTROOT=/tmp/SelfSizedCellByCodeExample.dst export DT_TOOLCHAIN_DIR=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain export DWARF_DSYM_FILE_NAME=SelfSizedCellByCodeExample.app.dSYM export DWARF_DSYM_FILE_SHOULD_ACCOMPANY_PRODUCT=NO export DWARF_DSYM_FOLDER_PATH=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products/Debug-iphoneos export EFFECTIVE_PLATFORM_NAME=-iphoneos export EMBEDDED_CONTENT_CONTAINS_SWIFT=NO export EMBEDDED_PROFILE_NAME=embedded.mobileprovision export EMBED_ASSET_PACKS_IN_PRODUCT_BUNDLE=NO export ENABLE_BITCODE=YES export ENABLE_HEADER_DEPENDENCIES=YES export ENABLE_ON_DEMAND_RESOURCES=YES export ENABLE_STRICT_OBJC_MSGSEND=YES export ENABLE_TESTABILITY=YES export ENTITLEMENTS_ALLOWED=YES export ENTITLEMENTS_REQUIRED=YES export EXCLUDED_INSTALLSRC_SUBDIRECTORY_PATTERNS=\".DS_Store .svn .git .hg CVS\" export EXCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES=\"*.nib *.lproj *.framework *.gch *.xcode* *.xcassets (*) .DS_Store CVS .svn .git .hg *.pbproj *.pbxproj\" export EXECUTABLES_FOLDER_PATH=SelfSizedCellByCodeExample.app/Executables export EXECUTABLE_FOLDER_PATH=SelfSizedCellByCodeExample.app export EXECUTABLE_NAME=SelfSizedCellByCodeExample export EXECUTABLE_PATH=SelfSizedCellByCodeExample.app/SelfSizedCellByCodeExample export EXPANDED_CODE_SIGN_IDENTITY=54D2584F0CDFF507E70F191FC851A7D39B24F29B export EXPANDED_CODE_SIGN_IDENTITY_NAME=\"iPhone Developer: Jing Yang (KEPL6DZH42)\" export EXPANDED_PROVISIONING_PROFILE=f2d6f047-08d8-4627-a967-585e63aa876a export FILE_LIST=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/Objects/LinkFileList export FIXED_FILES_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/FixedFiles export FRAMEWORKS_FOLDER_PATH=SelfSizedCellByCodeExample.app/Frameworks export FRAMEWORK_FLAG_PREFIX=-framework export FRAMEWORK_SEARCH_PATHS=\"/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products/Debug-iphoneos \" export FRAMEWORK_VERSION=A export FULL_PRODUCT_NAME=SelfSizedCellByCodeExample.app export GCC3_VERSION=3.3 export GCC_C_LANGUAGE_STANDARD=gnu99 export GCC_DYNAMIC_NO_PIC=NO export GCC_INLINES_ARE_PRIVATE_EXTERN=YES export GCC_NO_COMMON_BLOCKS=YES export GCC_OPTIMIZATION_LEVEL=0 export GCC_PFE_FILE_C_DIALECTS=\"c objective-c c++ objective-c++\" export GCC_PREPROCESSOR_DEFINITIONS=\"DEBUG=1 \" export GCC_SYMBOLS_PRIVATE_EXTERN=NO export GCC_THUMB_SUPPORT=YES export GCC_TREAT_WARNINGS_AS_ERRORS=NO export GCC_VERSION=com.apple.compilers.llvm.clang.1_0 export GCC_VERSION_IDENTIFIER=com_apple_compilers_llvm_clang_1_0 export GCC_WARN_64_TO_32_BIT_CONVERSION=YES export GCC_WARN_ABOUT_RETURN_TYPE=YES_ERROR export GCC_WARN_UNDECLARED_SELECTOR=YES export GCC_WARN_UNINITIALIZED_AUTOS=YES_AGGRESSIVE export GCC_WARN_UNUSED_FUNCTION=YES export GCC_WARN_UNUSED_VARIABLE=YES export GENERATE_MASTER_OBJECT_FILE=NO export GENERATE_PKGINFO_FILE=YES export GENERATE_PROFILING_CODE=NO export GID=20 export GROUP=staff export HEADERMAP_INCLUDES_FLAT_ENTRIES_FOR_TARGET_BEING_BUILT=YES export HEADERMAP_INCLUDES_FRAMEWORK_ENTRIES_FOR_ALL_PRODUCT_TYPES=YES export HEADERMAP_INCLUDES_NONPUBLIC_NONPRIVATE_HEADERS=YES export HEADERMAP_INCLUDES_PROJECT_HEADERS=YES export HEADERMAP_USES_FRAMEWORK_PREFIX_ENTRIES=YES export HEADERMAP_USES_VFS=NO export HEADER_SEARCH_PATHS=\"/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products/Debug-iphoneos/include \" export HIDE_BITCODE_SYMBOLS=YES export HOME=/Users/home export ICONV=/usr/bin/iconv export INFOPLIST_EXPAND_BUILD_SETTINGS=YES export INFOPLIST_FILE=SelfSizedCellByCodeExample/Info.plist export INFOPLIST_OUTPUT_FORMAT=binary export INFOPLIST_PATH=SelfSizedCellByCodeExample.app/Info.plist export INFOPLIST_PREPROCESS=NO export INFOSTRINGS_PATH=SelfSizedCellByCodeExample.app/English.lproj/InfoPlist.strings export INSTALL_DIR=/tmp/SelfSizedCellByCodeExample.dst/Applications export INSTALL_GROUP=staff export INSTALL_MODE_FLAG=u+w,go-w,a+rX export INSTALL_OWNER=home export INSTALL_PATH=/Applications export INSTALL_ROOT=/tmp/SelfSizedCellByCodeExample.dst export IPHONEOS_DEPLOYMENT_TARGET=7.0 export JAVAC_DEFAULT_FLAGS=\"-J-Xms64m -J-XX:NewSize=4M -J-Dfile.encoding=UTF8\" export JAVA_APP_STUB=/System/Library/Frameworks/JavaVM.framework/Resources/MacOS/JavaApplicationStub export JAVA_ARCHIVE_CLASSES=YES export JAVA_ARCHIVE_TYPE=JAR export JAVA_COMPILER=/usr/bin/javac export JAVA_FOLDER_PATH=SelfSizedCellByCodeExample.app/Java export JAVA_FRAMEWORK_RESOURCES_DIRS=Resources export JAVA_JAR_FLAGS=cv export JAVA_SOURCE_SUBDIR=. export JAVA_USE_DEPENDENCIES=YES export JAVA_ZIP_FLAGS=-urg export JIKES_DEFAULT_FLAGS=\"+E +OLDCSO\" export KEEP_PRIVATE_EXTERNS=NO export LD_DEPENDENCY_INFO_FILE=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/Objects-normal/arm64/SelfSizedCellByCodeExample_dependency_info.dat export LD_GENERATE_MAP_FILE=NO export LD_MAP_FILE_PATH=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/SelfSizedCellByCodeExample-LinkMap-normal-arm64.txt export LD_NO_PIE=NO export LD_QUOTE_LINKER_ARGUMENTS_FOR_COMPILER_DRIVER=YES export LD_RUNPATH_SEARCH_PATHS=\" @executable_path/Frameworks\" export LEGACY_DEVELOPER_DIR=/Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/SharedSupport/Developer export LEX=lex export LIBRARY_FLAG_NOSPACE=YES export LIBRARY_FLAG_PREFIX=-l export LIBRARY_KEXT_INSTALL_PATH=/Library/Extensions export LIBRARY_SEARCH_PATHS=\"/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products/Debug-iphoneos \" export LINKER_DISPLAYS_MANGLED_NAMES=NO export LINK_FILE_LIST_normal_arm64=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/Objects-normal/arm64/SelfSizedCellByCodeExample.LinkFileList export LINK_WITH_STANDARD_LIBRARIES=YES export LOCALIZABLE_CONTENT_DIR= export LOCALIZED_RESOURCES_FOLDER_PATH=SelfSizedCellByCodeExample.app/English.lproj export LOCAL_ADMIN_APPS_DIR=/Applications/Utilities export LOCAL_APPS_DIR=/Applications export LOCAL_DEVELOPER_DIR=/Library/Developer export LOCAL_LIBRARY_DIR=/Library export LOCROOT= export LOCSYMROOT= export MACH_O_TYPE=mh_execute export MAC_OS_X_PRODUCT_BUILD_VERSION=15D21 export MAC_OS_X_VERSION_ACTUAL=101103 export MAC_OS_X_VERSION_MAJOR=101100 export MAC_OS_X_VERSION_MINOR=1103 export MODULE_CACHE_DIR=/Users/home/Library/Developer/Xcode/DerivedData/ModuleCache export MTL_ENABLE_DEBUG_INFO=YES export NATIVE_ARCH=armv7 export NATIVE_ARCH_32_BIT=i386 export NATIVE_ARCH_64_BIT=x86_64 export NATIVE_ARCH_ACTUAL=x86_64 export NO_COMMON=YES export OBJECT_FILE_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/Objects export OBJECT_FILE_DIR_normal=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/Objects-normal export OBJROOT=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates export ONLY_ACTIVE_ARCH=YES export OPTIMIZATION_LEVEL=0 export OS=MACOS export OSAC=/usr/bin/osacompile export PACKAGE_TYPE=com.apple.package-type.wrapper.application export PASCAL_STRINGS=YES export PATH=\"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/libexec:/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/local/bin:/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/usr/bin:/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/usr/local/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/local/bin:/Applications/Xcode.app/Contents/Developer/Tools:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\" export PATH_PREFIXES_EXCLUDED_FROM_HEADER_DEPENDENCIES=\"/usr/include /usr/local/include /System/Library/Frameworks /System/Library/PrivateFrameworks /Applications/Xcode.app/Contents/Developer/Headers /Applications/Xcode.app/Contents/Developer/SDKs /Applications/Xcode.app/Contents/Developer/Platforms\" export PBDEVELOPMENTPLIST_PATH=SelfSizedCellByCodeExample.app/pbdevelopment.plist export PFE_FILE_C_DIALECTS=objective-c export PKGINFO_FILE_PATH=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/PkgInfo export PKGINFO_PATH=SelfSizedCellByCodeExample.app/PkgInfo export PLATFORM_DEVELOPER_APPLICATIONS_DIR=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Applications export PLATFORM_DEVELOPER_BIN_DIR=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin export PLATFORM_DEVELOPER_LIBRARY_DIR=/Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/SharedSupport/Developer/Library export PLATFORM_DEVELOPER_SDK_DIR=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs export PLATFORM_DEVELOPER_TOOLS_DIR=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Tools export PLATFORM_DEVELOPER_USR_DIR=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr export PLATFORM_DIR=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform export PLATFORM_DISPLAY_NAME=iOS export PLATFORM_NAME=iphoneos export PLATFORM_PREFERRED_ARCH=arm64 export PLATFORM_PRODUCT_BUILD_VERSION=13C75 export PLIST_FILE_OUTPUT_FORMAT=binary export PLUGINS_FOLDER_PATH=SelfSizedCellByCodeExample.app/PlugIns export PRECOMPS_INCLUDE_HEADERS_FROM_BUILT_PRODUCTS_DIR=YES export PRECOMP_DESTINATION_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/PrefixHeaders export PRESERVE_DEAD_CODE_INITS_AND_TERMS=NO export PRIVATE_HEADERS_FOLDER_PATH=SelfSizedCellByCodeExample.app/PrivateHeaders export PRODUCT_BUNDLE_IDENTIFIER=tv.douyu.SelfSizedCellByCodeExample export PRODUCT_MODULE_NAME=SelfSizedCellByCodeExample export PRODUCT_NAME=SelfSizedCellByCodeExample export PRODUCT_SETTINGS_PATH=\"/Users/home/Desktop/Learning/codebase/My TableView/SelfSizedCellByCodeExample/SelfSizedCellByCodeExample/Info.plist\" export PRODUCT_TYPE=com.apple.product-type.application export PROFILING_CODE=NO export PROJECT=SelfSizedCellByCodeExample export PROJECT_DERIVED_FILE_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/DerivedSources export PROJECT_DIR=\"/Users/home/Desktop/Learning/codebase/My TableView/SelfSizedCellByCodeExample\" export PROJECT_FILE_PATH=\"/Users/home/Desktop/Learning/codebase/My TableView/SelfSizedCellByCodeExample/SelfSizedCellByCodeExample.xcodeproj\" export PROJECT_NAME=SelfSizedCellByCodeExample export PROJECT_TEMP_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build export PROJECT_TEMP_ROOT=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates export PROVISIONING_PROFILE_REQUIRED=YES export PUBLIC_HEADERS_FOLDER_PATH=SelfSizedCellByCodeExample.app/Headers export RECURSIVE_SEARCH_PATHS_FOLLOW_SYMLINKS=YES export REMOVE_CVS_FROM_RESOURCES=YES export REMOVE_GIT_FROM_RESOURCES=YES export REMOVE_HEADERS_FROM_EMBEDDED_BUNDLES=YES export REMOVE_HG_FROM_RESOURCES=YES export REMOVE_SVN_FROM_RESOURCES=YES export RESOURCE_RULES_REQUIRED=YES export REZ_COLLECTOR_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/ResourceManagerResources export REZ_OBJECTS_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/ResourceManagerResources/Objects export REZ_SEARCH_PATHS=\"/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products/Debug-iphoneos \" export SCAN_ALL_SOURCE_FILES_FOR_INCLUDES=NO export SCRIPTS_FOLDER_PATH=SelfSizedCellByCodeExample.app/Scripts export SCRIPT_INPUT_FILE_COUNT=0 export SCRIPT_OUTPUT_FILE_0=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/DerivedSources/myfile export SCRIPT_OUTPUT_FILE_COUNT=1 export SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk export SDK_DIR=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk export SDK_DIR_iphoneos9_2=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk export SDK_NAME=iphoneos9.2 export SDK_NAMES=iphoneos9.2 export SDK_PRODUCT_BUILD_VERSION=13C75 export SDK_VERSION=9.2 export SDK_VERSION_ACTUAL=90200 export SDK_VERSION_MAJOR=90000 export SDK_VERSION_MINOR=200 export SED=/usr/bin/sed export SEPARATE_STRIP=NO export SEPARATE_SYMBOL_EDIT=NO export SET_DIR_MODE_OWNER_GROUP=YES export SET_FILE_MODE_OWNER_GROUP=NO export SHALLOW_BUNDLE=YES export SHARED_DERIVED_FILE_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products/Debug-iphoneos/DerivedSources export SHARED_FRAMEWORKS_FOLDER_PATH=SelfSizedCellByCodeExample.app/SharedFrameworks export SHARED_PRECOMPS_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/PrecompiledHeaders export SHARED_SUPPORT_FOLDER_PATH=SelfSizedCellByCodeExample.app/SharedSupport export SKIP_INSTALL=NO export SOURCE_ROOT=\"/Users/home/Desktop/Learning/codebase/My TableView/SelfSizedCellByCodeExample\" export SRCROOT=\"/Users/home/Desktop/Learning/codebase/My TableView/SelfSizedCellByCodeExample\" export STRINGS_FILE_OUTPUT_ENCODING=binary export STRIP_BITCODE_FROM_COPIED_FILES=YES export STRIP_INSTALLED_PRODUCT=YES export STRIP_STYLE=all export SUPPORTED_DEVICE_FAMILIES=1,2 export SUPPORTED_PLATFORMS=\"iphonesimulator iphoneos\" export SUPPORTS_TEXT_BASED_API=NO export SWIFT_PLATFORM_TARGET_PREFIX=ios export SYMROOT=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products export SYSTEM_ADMIN_APPS_DIR=/Applications/Utilities export SYSTEM_APPS_DIR=/Applications export SYSTEM_CORE_SERVICES_DIR=/System/Library/CoreServices export SYSTEM_DEMOS_DIR=/Applications/Extras export SYSTEM_DEVELOPER_APPS_DIR=/Applications/Xcode.app/Contents/Developer/Applications export SYSTEM_DEVELOPER_BIN_DIR=/Applications/Xcode.app/Contents/Developer/usr/bin export SYSTEM_DEVELOPER_DEMOS_DIR=\"/Applications/Xcode.app/Contents/Developer/Applications/Utilities/Built Examples\" export SYSTEM_DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer export SYSTEM_DEVELOPER_DOC_DIR=\"/Applications/Xcode.app/Contents/Developer/ADC Reference Library\" export SYSTEM_DEVELOPER_GRAPHICS_TOOLS_DIR=\"/Applications/Xcode.app/Contents/Developer/Applications/Graphics Tools\" export SYSTEM_DEVELOPER_JAVA_TOOLS_DIR=\"/Applications/Xcode.app/Contents/Developer/Applications/Java Tools\" export SYSTEM_DEVELOPER_PERFORMANCE_TOOLS_DIR=\"/Applications/Xcode.app/Contents/Developer/Applications/Performance Tools\" export SYSTEM_DEVELOPER_RELEASENOTES_DIR=\"/Applications/Xcode.app/Contents/Developer/ADC Reference Library/releasenotes\" export SYSTEM_DEVELOPER_TOOLS=/Applications/Xcode.app/Contents/Developer/Tools export SYSTEM_DEVELOPER_TOOLS_DOC_DIR=\"/Applications/Xcode.app/Contents/Developer/ADC Reference Library/documentation/DeveloperTools\" export SYSTEM_DEVELOPER_TOOLS_RELEASENOTES_DIR=\"/Applications/Xcode.app/Contents/Developer/ADC Reference Library/releasenotes/DeveloperTools\" export SYSTEM_DEVELOPER_USR_DIR=/Applications/Xcode.app/Contents/Developer/usr export SYSTEM_DEVELOPER_UTILITIES_DIR=/Applications/Xcode.app/Contents/Developer/Applications/Utilities export SYSTEM_DOCUMENTATION_DIR=/Library/Documentation export SYSTEM_KEXT_INSTALL_PATH=/System/Library/Extensions export SYSTEM_LIBRARY_DIR=/System/Library export TARGETED_DEVICE_FAMILY=1,2 export TARGETNAME=SelfSizedCellByCodeExample export TARGET_BUILD_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Products/Debug-iphoneos export TARGET_DEVICE_MODEL=iPhone7,2 export TARGET_DEVICE_OS_VERSION=9.0.2 export TARGET_NAME=SelfSizedCellByCodeExample export TARGET_TEMP_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build export TEMP_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build export TEMP_FILES_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build export TEMP_FILE_DIR=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build export TEMP_ROOT=/Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates export TOOLCHAINS=com.apple.dt.toolchain.XcodeDefault export TOOLCHAIN_DIR=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain export TREAT_MISSING_BASELINES_AS_TEST_FAILURES=NO export UID=501 export UNLOCALIZED_RESOURCES_FOLDER_PATH=SelfSizedCellByCodeExample.app export UNSTRIPPED_PRODUCT=NO export USER=home export USER_APPS_DIR=/Users/home/Applications export USER_LIBRARY_DIR=/Users/home/Library export USE_DYNAMIC_NO_PIC=YES export USE_HEADERMAP=YES export USE_HEADER_SYMLINKS=NO export VALIDATE_PRODUCT=NO export VALID_ARCHS=\"arm64 armv7 armv7s\" export VERBOSE_PBXCP=NO export VERSIONPLIST_PATH=SelfSizedCellByCodeExample.app/version.plist export VERSION_INFO_BUILDER=home export VERSION_INFO_FILE=SelfSizedCellByCodeExample_vers.c export VERSION_INFO_STRING=\"\\\"@(#)PROGRAM:SelfSizedCellByCodeExample PROJECT:SelfSizedCellByCodeExample-\\\"\" export WRAPPER_EXTENSION=app export WRAPPER_NAME=SelfSizedCellByCodeExample.app export WRAPPER_SUFFIX=.app export WRAP_ASSET_PACKS_IN_SEPARATE_DIRECTORIES=NO export XCODE_APP_SUPPORT_DIR=/Applications/Xcode.app/Contents/Developer/Library/Xcode export XCODE_PRODUCT_BUILD_VERSION=7C1002 export XCODE_VERSION_ACTUAL=0721 export XCODE_VERSION_MAJOR=0700 export XCODE_VERSION_MINOR=0720 export XPCSERVICES_FOLDER_PATH=SelfSizedCellByCodeExample.app/XPCServices export YACC=yacc export arch=arm64 export variant=normal /bin/sh -c /Users/home/Library/Developer/Xcode/DerivedData/SelfSizedCellByCodeExample-hcqrqdritrqaldddhuundxfypgvk/Build/Intermediates/SelfSizedCellByCodeExample.build/Debug-iphoneos/SelfSizedCellByCodeExample.build/Script-993355071C92B75C004569A0.sh","link":"/2015/04/13/2015/Xcode-环境变量/"}],"tags":[{"name":"UITableView","slug":"UITableView","link":"/tags/UITableView/"},{"name":"gem","slug":"gem","link":"/tags/gem/"},{"name":"rvm","slug":"rvm","link":"/tags/rvm/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"tools","slug":"tools","link":"/tags/tools/"},{"name":"plugins","slug":"plugins","link":"/tags/plugins/"},{"name":"Http 报文","slug":"Http-报文","link":"/tags/Http-报文/"},{"name":"URL","slug":"URL","link":"/tags/URL/"},{"name":"网络请求","slug":"网络请求","link":"/tags/网络请求/"},{"name":"cUrl","slug":"cUrl","link":"/tags/cUrl/"},{"name":"weak&strong","slug":"weak-strong","link":"/tags/weak-strong/"},{"name":"instrument","slug":"instrument","link":"/tags/instrument/"},{"name":"libimobiledevice","slug":"libimobiledevice","link":"/tags/libimobiledevice/"}],"categories":[{"name":"iOS开发","slug":"iOS开发","link":"/categories/iOS开发/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"git&svn","slug":"git-svn","link":"/categories/git-svn/"},{"name":"股票投资","slug":"股票投资","link":"/categories/股票投资/"},{"name":"Http","slug":"Http","link":"/categories/Http/"},{"name":"iOS-Dev","slug":"iOS-Dev","link":"/categories/iOS-Dev/"}]}